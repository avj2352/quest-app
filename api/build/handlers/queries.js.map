{"version":3,"sources":["../../src/handlers/queries.js"],"names":["QueriesController","group","GroupController","user","UserController","_getAllGroups","bind","_getAllQuestionOnGroupId","filterGroupsByUserPremium","getGroupsWithQuestions","promise","Promise","resolve","reject","GroupModel","find","err","data","id","QuestionnaireModel","groups","req","res","email","header","fetchUserByEmail","then","role","filterGroupsWithoutPremium","getAllGroups","result","groupPromiseList","map","push","el","_id","all","index","title","slug","description","premium","questionCount","data1","length","questions","json","send"],"mappings":"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","file":"queries.js","sourcesContent":["/**\r\n * PAJ - all custom queries handled here\r\n */\r\nimport { GroupController } from \"../controllers/group.controller\";\r\nimport { UserController } from \"../controllers/user.controller\";\r\nimport { GroupModel } from './../models/group.model';\r\nimport { QuestionnaireModel } from './../models/questionnaire.model';\r\n\r\n\r\nexport class QueriesController {\r\n    constructor () {\r\n        this.group = new GroupController();\r\n        this.user = new UserController();\r\n        this._getAllGroups = this._getAllGroups.bind(this);\r\n        this._getAllQuestionOnGroupId = this._getAllQuestionOnGroupId.bind(this);\r\n        this.filterGroupsByUserPremium = this.filterGroupsByUserPremium.bind(this);\r\n        this.getGroupsWithQuestions = this.getGroupsWithQuestions.bind(this);\r\n    }\r\n\r\n    _getAllGroups() {\r\n        const promise = new Promise((resolve, reject) => {\r\n            GroupModel.find({}, (err, data)=>{\r\n                if (err) reject(err);\r\n                else resolve(data);\r\n            });\r\n        });\r\n        return promise;\r\n    }\r\n\r\n    _getAllQuestionOnGroupId (id) {\r\n        const promise = new Promise((resolve, reject) => {\r\n            QuestionnaireModel.find({groups: id}, (err, data)=>{\r\n                if (err) reject(err);\r\n                else resolve(data);\r\n            });\r\n        });\r\n        return promise;\r\n    }\r\n\r\n    filterGroupsByUserPremium (req, res) {\r\n        const email = req.header('email');\r\n        if(email && email !=='') {\r\n            this.user.fetchUserByEmail(email)\r\n            .then(data => {\r\n                if(data.role === 'normal') {\r\n                    this.group.filterGroupsWithoutPremium(req, res);\r\n                } else {\r\n                    this.group.getAllGroups(req, res);\r\n                }\r\n            });\r\n        }\r\n        else {\r\n            this.group.filterGroupsWithoutPremium(req, res);\r\n        }\r\n    }\r\n\r\n    getGroupsWithQuestions (req, res) {\r\n        let result = [];\r\n        let groupPromiseList = [];        \r\n        this._getAllGroups()\r\n        .then(data => {\r\n            data.map(el => groupPromiseList.push(this._getAllQuestionOnGroupId(el._id)));\r\n            Promise.all(groupPromiseList).then(data1 => {\r\n                data.map((el,index)=>{\r\n                    result.push({\r\n                        _id:el._id, \r\n                        title: el.title, \r\n                        slug: el.slug, \r\n                        description: el.description,\r\n                        premium: el.premium,\r\n                        questionCount: data1[index].length,\r\n                        questions: data1[index]\r\n                    });\r\n                });\r\n                res.json(result);\r\n            }, err => {\r\n                res.send(err);\r\n            });\r\n        }, err => {\r\n            res.send(err);\r\n        });\r\n    }\r\n}"]}