{"version":3,"sources":["../../src/controllers/user.controller.js"],"names":["saltRounds","UserController","req","res","aUser","UserModel","name","body","provider","password","bcrypt","hashSync","email","role","err","send","save","data","json","console","log","find","findOne","_id","params","userId","exec","promise","Promise","resolve","reject","select","findByIdAndUpdate","new","deleteOne","message"],"mappings":"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","file":"user.controller.js","sourcesContent":["/**\r\n * CRUD - Controller for User Model\r\n*/\r\nimport { UserModel } from './../models/user.model';\r\nimport bcrypt from 'bcrypt';\r\nexport const saltRounds = 10;\r\n\r\nexport class UserController {\r\n    // Create - new User record\r\n    addNewUser (req, res) {\r\n        let aUser;\r\n        try {        \r\n        aUser = new UserModel({\r\n            name: req.body.name,\r\n            provider: req.body.provider,\r\n            password: bcrypt.hashSync(req.body.password, saltRounds),\r\n            email: req.body.email,\r\n            role: req.body.role\r\n        });              \r\n       } catch (err) {\r\n        res.send(err);\r\n       } finally {\r\n        aUser.save((err, data)=>{\r\n            if(err) res.send(err);\r\n            else res.json(data);\r\n        });\r\n       }\r\n    }\r\n\r\n    // Create new record - without req, res\r\n    createRecord (data) {\r\n        let aUser;\r\n        try {\r\n        // Query Question\r\n        aUser = new UserModel({\r\n            name: data.name,\r\n            provider: data.provider,\r\n            password: data.password,\r\n            email: data.email,\r\n            role: data.role\r\n        });\r\n       } catch (err) {\r\n        console.log('Error while populating data: ', err);\r\n       } finally {\r\n        return aUser.save();\r\n       }\r\n    }\r\n\r\n    // Retrieve - Get all Users\r\n    getAllUsers (req, res) {\r\n        UserModel.find({},(err, data)=>{\r\n            if (err) res.send(err);\r\n            else res.json(data);\r\n        });\r\n    }\r\n\r\n    // Retrieve - Get User by userId\r\n    getUserById (req, res) {\r\n        UserModel.findOne({_id: req.params.userId})\r\n        .exec((err, data)=>{\r\n            if (err) res.send(err);\r\n            else res.json(data);\r\n        });\r\n    }\r\n\r\n    // Retrieve - Get user by email\r\n    getUserByEmail (email) {\r\n        const promise = new Promise((resolve, reject)=>{\r\n            UserModel.findOne({email: email})\r\n            .exec((err, data)=>{\r\n                if (err) reject(err);\r\n                else resolve(data);\r\n            });\r\n        });\r\n        return promise;\r\n    }\r\n\r\n    // Fetch userDetails\r\n    fetchUserByEmail (email) {\r\n        const promise = new Promise((resolve, reject)=>{\r\n            UserModel.findOne({email: email})\r\n            .select('+password')\r\n            .exec((err, data)=>{\r\n                if (err) reject(err);\r\n                else resolve(data);\r\n            });\r\n        });\r\n        return promise;\r\n    }\r\n    \r\n    // Update - User by UserId\r\n    updateUserById (req, res) {    \r\n        try {            \r\n            const aUser = UserModel.findByIdAndUpdate({ _id: req.params.userId },{\r\n                name: req.body.name,\r\n                provider: req.body.provider,\r\n                password: bcrypt.hashSync(req.body.password, saltRounds),\r\n                email: req.body.email,\r\n                role: req.body.role\r\n            }, {new: true}, (err, data)=>{\r\n                if (err) res.send(err);\r\n                else res.json(data);\r\n            });\r\n        } catch (err) {\r\n            res.send(err);\r\n        }\r\n    }\r\n\r\n    // DELETE - User by UserId\r\n    deleteUserById (req, res) {\r\n        try {\r\n            UserModel.deleteOne({_id: req.params.userId}, (err)=>{\r\n                if (err) res.send(err);\r\n                else res.json({ message: 'Successfully deleted user record'});\r\n            });\r\n        } catch (err) {\r\n            res.send(err);\r\n        }\r\n    }    \r\n}"]}