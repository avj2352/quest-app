{"version":3,"sources":["../../src/controllers/questionnaire.controller.js"],"names":["QuestionsController","groupModelList","tagModelList","req","res","aQuestion","tagList","body","tags","groupList","groups","QuestionnaireModel","title","type","question","answer","date","Date","getTime","save","err","data","send","json","find","populate","exec","findOne","_id","params","questionId","groupId","findByIdAndUpdate","new","deleteOne","message"],"mappings":"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","file":"questionnaire.controller.js","sourcesContent":["/**\r\n * CRUD - Controller for Questionnaire Model\r\n*/\r\nimport mongoose from 'mongoose';\r\nimport { QuestionnaireModel } from './../models/questionnaire.model';\r\nimport { GroupModel } from './../models/group.model';\r\nimport { TagModel } from './../models/tag.model';\r\n\r\nexport class QuestionsController {\r\n    \r\n    constructor () {\r\n        this.groupModelList = [];\r\n        this.tagModelList = [];        \r\n    }\r\n\r\n\r\n    // Create - new question record\r\n    addNewQuestion (req, res) {\r\n        // prepare query\r\n        let aQuestion;        \r\n        const tagList = req.body.tags;\r\n        const groupList = req.body.groups;        \r\n        // Query Question\r\n        aQuestion = new QuestionnaireModel({\r\n            title: req.body.title,\r\n            type: req.body.type,\r\n            question: req.body.question,\r\n            answer: req.body.answer,\r\n            tags: tagList,\r\n            groups: groupList,\r\n            date: new Date().getTime()                \r\n        });\r\n        aQuestion.save((err, data)=>{\r\n            if(err) res.send(err);\r\n            else res.json(data);\r\n        });        \r\n    }\r\n\r\n    getAllQuestions (req, res) {\r\n        QuestionnaireModel.find({})\r\n        .populate('tags')\r\n        .populate('groups')\r\n        .exec((err, data)=>{\r\n            if (err) res.send(err);\r\n            else res.json(data);\r\n        });\r\n    }\r\n\r\n    // Retrieve - question by Id\r\n    getQuestionById (req, res) {\r\n        QuestionnaireModel.findOne({_id: req.params.questionId})\r\n        .populate('tags')\r\n        .populate('groups')\r\n        .exec((err, data)=>{\r\n            if (err) res.send(err);\r\n            else res.json(data);\r\n        });\r\n    }\r\n\r\n    // Retrieve - questions by groupId\r\n    getQuestionByGroupId (req, res) {\r\n        QuestionnaireModel.find({groups: req.params.groupId})\r\n        .populate('tags')\r\n        .populate('groups')\r\n        .exec((err, data)=>{\r\n            if (err) res.send(err);\r\n            else res.json(data);\r\n        });\r\n    }\r\n\r\n    // UPDATE - question by Id\r\n    updateQuestionById (req, res) {\r\n        // prepare query\r\n        try {\r\n            // get question by Id\r\n            const questionId = req.params.questionId;\r\n            // get reference for tagId and groupId\r\n            const tagList = req.body.tags;\r\n            const groupList = req.body.groups;            \r\n\r\n            // Query Question\r\n            QuestionnaireModel.findByIdAndUpdate({ _id: questionId },{\r\n                title: req.body.title,\r\n                type: req.body.type,\r\n                question: req.body.question,\r\n                answer: req.body.answer,\r\n                date: new Date().getTime(),\r\n                tags: tagList,\r\n                groups: groupList\r\n            }, {new: true}, (err, data)=>{\r\n                if (err) res.send(err);\r\n                else res.json(data);\r\n            });\r\n        } catch (err) {\r\n            res.send(err);\r\n        }\r\n    }\r\n\r\n    // DELETE - question by id\r\n    deleteQuestionById (req, res) {\r\n        try {\r\n            QuestionnaireModel.deleteOne({_id: req.params.questionId}, (err)=>{\r\n                if (err) res.send(err);\r\n                else res.json({ message: 'Successfully deleted question record'});\r\n            });\r\n        } catch (err) {\r\n            res.send(err);\r\n        }\r\n    }\r\n}"]}