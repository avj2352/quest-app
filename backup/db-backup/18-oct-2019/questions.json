{"_id":{"$oid":"5d520a75aa54c34180a48140"},"tags":[{"$oid":"5d520639aa54c34180a48139"},{"$oid":"5d5205c1aa54c34180a48136"},{"$oid":"5d5c328779d75f001616d186"}],"groups":[{"$oid":"5d520740aa54c34180a4813e"}],"title":"Compound Components","type":"question","question":"# What are _Compound Components_\n\n- Provide examples\n- Code snippets in React","answer":"# Answer\n\nLiterally, the word compound refers to something that is composed of two or more separate elements.\n\n- With respect to React components, this could mean a component that is composed of two or more separate components.\n- Any React component can be composed of 2 or more separate components. So, that’s really not a good way to describe compound components.\n- With compound components, there’s more. **The separate components within which the main component is composed cannot be used without the parent.**\n- Remember that the children are dependent on the parent compound component for the state.\n\n### Best Example\n\nThe state of the entire component is managed by **select** with all child elements dependent on that state.\n\n```html\n<select>\n<!--For one, it no sense to use the <option>key0</option> element without a select parent tag.-->\n  <option value=\"value0\">key0</option>\n  <option value=\"value1\">key1</option>\n  <option value=\"value2\">key2</option>\n</select>\n```\n\n**NOTE:** The Expandable component needs to communicate the state to every child component regardless of their position in the nested component tree.\n\nThe best way to achieve an inherited, parent-child dependency is using a **context**\n\n\n```js\nimport React, { createContext } from 'react'\n\nconst ExpandableContext = createContext()\nconst { Provider } = ExpandableContext\n\nconst Expandable = ({children}) => {\n  return <Provider>{children}</Provider>\n}\n\nexport default Expandable\n```","date":1.568012507906E+12,"__v":0}
{"_id":{"$oid":"5d527d384bed9e0016afa685"},"tags":[{"$oid":"5d520577aa54c34180a48132"},{"$oid":"5d520585aa54c34180a48133"},{"$oid":"5d5205c1aa54c34180a48136"}],"groups":[{"$oid":"5d5206aaaa54c34180a4813d"}],"title":"Data-structure of a Hashtable / HashMap","type":"question","question":"## What are the properties in a HashMap? Also, explain what properties does a node in Hashtable contain\n\n### Strengths:\n- **Fast lookups:** Lookups take O(1) time on average.\n- **Flexible keys:** Most data types can be used for keys, as long as they're hashable.\n\n### Weaknesses:\n- **Slow worst-case lookups:** Lookups take O(n) time in the worst case.\n- **Unordered:** Keys aren't stored in a special order. If you're looking for the smallest key, the largest key, or all the keys in a range, you'll need to look through every key to find it. Single-directional lookups.\n- While you can look up the value for a given key in O(1) time, looking up the keys for a given value requires looping through the whole dataset—O(n) time. \n- Not **cache-friendly**. \n- Many hash table implementations use **linked lists**, which don't put data next to each other in memory.","answer":"## HashTable has the following properties\n\n- buckets : A Defined sized Array, from the constructor of Hashtable\n- numBuckets : the length of buckets\n\n## HashTable has the following methods\n\n- hash()\n- insert()\n- get()\n- retrieveAll()\n\n## Space time complexity\n\n- O(n) - Space\n- O(1) - Lookup\n- O(1) - Insert\n- O(1) - Delete\n\n## Code\n\n```javascript\n    \n// HashTable constructor\n    function HashTable(size) {\n      this.buckets = Array(size);\n      this.numBuckets = this.buckets.length;\n    }\n\n    /*\n    * A Hashtable's node (a.k.a HashNode) consists of Key Value pairs and a next ppty\n    */ \n    function HashNode(key, value, next) {\n      this.key = key;\n      this.value = value;\n      this.next = next || null;\n    }\n\n    HashTable.prototype.hash = function(key) {\n      var total = 0;\n      for (var i = 0; i < key.length; i++) {\n        total += key.charCodeAt(i);\n      }\n      var bucket = total % this.numBuckets;\n      return bucket;\n    };\n\n    HashTable.prototype.insert = function(key, value) {\n      var index = this.hash(key);\n      if (!this.buckets[index]) {\n        this.buckets[index] = new HashNode(key, value);\n      }\n      else if (this.buckets[index].key === key) {\n        this.buckets[index].value = value;\n      }\n      else {\n        var currentNode = this.buckets[index];\n        while (currentNode.next) {\n          if (currentNode.next.key === key) {\n            currentNode.next.value = value;\n            return;\n          }\n          currentNode = currentNode.next;\n        }\n        currentNode.next = new HashNode(key, value);\n      }\n    };\n\n    HashTable.prototype.get = function(key) {\n      var index = this.hash(key);\n      if (!this.buckets[index]) return null;\n      else {\n        var currentNode = this.buckets[index];\n        while (currentNode) {\n          if (currentNode.key === key) return currentNode.value;\n          currentNode = currentNode.next;\n        }\n        return null;\n      }\n    };\n\n    HashTable.prototype.retrieveAll = function() {\n      var allNodes = [];\n      for (var i = 0; i < this.numBuckets; i++) {\n        var currentNode = this.buckets[i];\n        while(currentNode) {\n          allNodes.push(currentNode);\n          currentNode = currentNode.next;\n        }\n      }\n      return allNodes;\n    };\n\n    // Testing\n    var myHT = new HashTable(30);\n\n    const myHT = new HashTable(30);\n    myHT.insert('Pramod','pramod.jingade@gmail.com');\n    myHT.insert('Shwetha','shwetha.shekar@gmail.com');\n    myHT.insert('Pramdo','shwetha.jingade@gmail.com'); // O(1)\n    myHT.insert('Dean', 'dean@gmail.com');\n    myHT.insert('Megan', 'megan@gmail.com');\n    myHT.insert('Dane', 'dane@yahoo.com');\n    myHT.insert('Dean', 'deanmachine@gmail.com');\n    myHT.insert('Megan', 'megansmith@gmail.com');\n    myHT.insert('Dane', 'dane1010@outlook.com');\n\n\n   console.log('All the values in the Hashtable: ', myHT.retrieveAll()); //O(n^2)\n\n```","date":1.565710512944E+12,"__v":0}
{"_id":{"$oid":"5d53762fbec43b0016650850"},"tags":[{"$oid":"5d520577aa54c34180a48132"},{"$oid":"5d520585aa54c34180a48133"},{"$oid":"5d52060caa54c34180a48138"}],"groups":[{"$oid":"5d5257c4954dab0016611386"}],"title":"Counting Sort Algorithm","type":"question","question":"# Explain Programmatically the Counting Sort algorithm\n\n- Counting sort is similar to the previous **Counting Pattern algorithm**\n- Except we are using an **array** and also sorting our values based on the **number of times they occurred**\n","answer":"# Solution\n- What if we did an in-order walk through scoreCounts.\n- Each index represents a score and its value represents the count of appearances.\n- So we can simply add the score to a new array sortedScores as many times as count of appearances.\n- Complexity: **O(n)** **time** and **O(n) space**, where **n** is the **number of scores**.\n\n```javascript\nfunction sortScores(unorderedScores, highestPossibleScore) {\n\n          // Array of 0s at indices 0..highestPossibleScore\n          const scoreCounts = new Array(highestPossibleScore + 1).fill(0);\n\n          // Populate scoreCounts\n          unorderedScores.forEach(score => {\n            scoreCounts[score]++;\n          });\n\n          // Populate the final sorted array\n          const sortedScores = [];\n\n          // For each item in scoreCounts\n          for (let score = highestPossibleScore; score >= 0; score--) {\n            const count = scoreCounts[score];\n\n            // For the number of times the item occurs\n            for (let time = 0; time < count; time++) {\n              sortedScores.push(score);\n            }\n          }\n\n          return sortedScores;\n        }\n```","date":1.565750831754E+12,"__v":0}
{"_id":{"$oid":"5d5411bf48544b0016b9a2f3"},"tags":[{"$oid":"5d520577aa54c34180a48132"},{"$oid":"5d520585aa54c34180a48133"}],"groups":[{"$oid":"5d5565f04d555b0016d3e304"}],"title":"Understanding Promises used within setTimeout and setInterval","type":"question","question":"# How to execute a javascript promise (sequentially) as part of setInterval\n\n1. Say you need to repeatedly call a Promise (getStats()) within every interval of 5 mins. How can you make use of setTimeout to sequentially execute a Javascript promise?\n\n1. How can you extend the solution to clear the interval when required.\n\n1. Come up with implementation without the use of 3rd party library like - **_RxJS, bluebird, axios..etc.,_**\n\nFor example, this doesn't work as expected (known issue)\n\n```javascript\nsetInterval(()=>{\n // Assume this is a Promise call to a 3rd party library\n getStatsPromise().then(res=>{\n  console.log('Result is: ', res); // Expected is this line runs every 5 mins, but is not the case\n });\n},50000);\n// Output is undefined being shown every 5 min interval\n```","answer":"# Solution\n\nThe simplest solution would be to make use of Promise' resolve method\n\n```javascript\nvar wait = \n    ms => new Promise(\n        r => setTimeout(r, ms)\n    );\n\nvar repeat = \n    (ms, func) => new Promise(\n        r => (\n            setInterval(func, ms), \n            wait(ms).then(r)\n        )\n    );\n\nrepeat(1000, () => Promise.all([myfunction()]))\n.then(...);\n```\n\n1. The first line (wait) simply waits a certain number of milliseconds and then ends.\n\n1. The second line (repeat) programs a function to be run in a certain interval of time (setInterval), and then calls wait and passes the number of milliseconds set on repeat function to it. These function are called only once. \n1. Javascript's internal controls for setInterval is what takes control from now on calling `() => Promise.all([myfunction()])` at the programmed time interval.\n\n## Clear setIntervals\n\nIn order to stop the function you have to capture the interval's id and call clearInterval as SimpleJ pointed out. You probably will want to do this with Promises once you're all into it. So a complete working example would be:\n\n\n```javascript\nlet intervalID = 0;\n\nlet wait = \n    ms => new Promise(\n        r => setTimeout(r, ms)\n    );\n\nlet repeat = \n    (ms, func) => new Promise(\n        r => (\n            intervalID = setInterval(func, ms), \n            wait(ms).then(r)\n        )\n    );\n\nconst myfunction = \n    () => new Promise(\n        r => r(console.log('repeating...'))\n    );\n\nconst stopAfter5Secs = \n    () => new Promise(\n        r => r(setTimeout(() => { \n                    clearInterval(intervalID);\n                    console.log('repeat end') \n               } , 5000))\n    );\n\nrepeat(1000, () => Promise.all([myfunction()])) // 1000 miliseconds = 1 second\n.then(stopAfter5Secs())  // starts timer to end repetitions\n.then(console.log('repeat start')); // informs that all actions \n// were started correctly and we are waiting for them to finish\n```\n\n\n`Promise.all` calls all promises in any iterable object passed to it. In this case an array with only one element (myfunction). I created a simple function which only writes 'repeating' to the console, to be that function. But you can pass any number of functions you want to it if all of them return promises.\n\n[You can see it working here - JS Fiddle](https://jsfiddle.net/9n2knxdg/7/)","date":1.565877846557E+12,"__v":0}
{"_id":{"$oid":"5d55844d9c9b6c0016cf2d61"},"tags":[{"$oid":"5d520577aa54c34180a48132"},{"$oid":"5d520585aa54c34180a48133"}],"groups":[{"$oid":"5d5206aaaa54c34180a4813d"}],"title":"Trie Data-structure - Explained & Program","type":"question","question":"# Explain Trie data-structure and break down its properties and method implementation\n\nThe trie data structure (sometimes called a prefix tree) is a special type of tree used to store associative data structures. Learn more about tries and how to implement them in JavaScript.\n\n### A Trie Node is made of 2 properties\n- **key**: Map() - Easy to check for keys and set key and value pairs\n- **end**: boolean - Getter setter for end\n\n### A Trie Node is made of 2 methods\n\n- **setEnd()** - method to toggle `end` property to `true`\n- **isEnd()** - method to retrieve `end` property \n\n---\n\n### A Trie class itself is made up of 1 property\n\n- **root**: Node() - Initialise root as an empty Node\n\n### A Trie class itself is made up of 4 methods\n- **addWord()**: `void` - Recursive function which takes in a `string`\n- **contains()**: `boolean` - Has a while loop - O(n)\n- **isWordPresent**: very similar to **contains()** `boolean` - Has a while loop - O(n)\n- **print**: `string` - print out the letters stored in the Trie\n\n---\n\n## Understanding Trie class's methods\n\n### addWord() - 2 parameters (val, currNode = this.root)\n- Recursive function, 4 Steps\n- Step 1: Edge case - check if the string is empty if yes, setEnd and return null;\n- Step 2: If currNode.key.has(val[0]) is empty. initialize it with a new node\n- Step 3: Call recursive function on a substring of Pramod, with the first character taken out\n- Step 4: IF currNode.key.has(val[0]) is not empty, again call the recursive function\n\n### contains() - 1 parameter (val)\n- While loop, 5 Steps\n- Step 1: Start from the root node - currNode = this.root;\n- Step 2: While loop to check if the val.length > 1\n- Step 3: If yes, then check if the first character is present or not - if no, return false;\n- Step 4: If yes, go to that node and apply the substring\n- Step 5: Finally outside the while loop check last time if the word is present in the node - return true/false\n\n### isWordPresent() - 1 parameter (val)\n- While loop, 5 Steps\n- Step 1: Start from the root node - currNode = this.root;\n- Step 2: While loop to check if the val.length > 1\n- Step 3: If yes, then check if the first character is present or not - if no, return false;\n- Step 4: If yes, go to that node and apply the substring\n- Step 5: Finally outside the while loop check last time if the word is present in the node And the end flag is set or not - return true/false","answer":"# Code\n\nThe following is the Data-structure code implementation\n\n```javascript\n\n/*\n* A Trie also contains a Node similar to LinkedList / BST. However this Node has the following properties\n*/\nclass Node {\n  constructor() {\n    this.key = new Map(); // ES6 feature\n    this.end = false;\n  }\n\n  //setter\n  setEnd() {\n    this.end = true; // \n  }\n\n  isEnd() {\n    return this.end;\n  }\n}\n\n/*\n* A Trie class take in no arguments.... has - add, search, remove methods\n*/\n\n// Implement a Trie\nclass Trie {\n  constructor() {\n    this.root = new Node();\n  }\n\n  addWord(val, currNode = this.root) {\n    const self = this;\n    // Edge case - if empty word then return null\n    if(val.length == 0) {\n      currNode.setEnd();\n      return null;\n    } else if (!currNode.key.has(val[0])) {\n      currNode.key.set(val[0], new Node());\n      // Calling recursively addWord\n      return self.addWord(val.substr(1),currNode.key.get(val[0])); // Pass the next character\n    }\n    return self.addWord(val.substr(1),currNode.key.get(val[0])); // Pass the next character\n  }//end:addWord\n\n  // Function to check if the phrase is present - In-place algorithm\n  contains(word) {\n    let currNode = this.root;    \n    while(word.length > 1) {\n      // Quickly determine  - O(1) if the starting char is present or not\n      if(!currNode.key.has(word[0])) return false;\n      else {\n        currNode = currNode.key.get(word[0]);\n        word = word.substr(1);\n      }\n    }//end:while\n    return (currNode.key.has(word)) ? true : false ;\n  }//end:contains\n\n  // Function to check if the Entire word is present - In-place algorithm\n  isWordPresent(word) {\n    let currNode = this.root;    \n    while(word.length > 1) {\n      // Quickly determine  - O(1) if the starting char is present or not\n      if(!currNode.key.has(word[0])) return false;\n      else {\n        currNode = currNode.key.get(word[0]);\n        word = word.substr(1);\n      }\n    }//end:while\n    return (currNode.key.has(word) && currNode.key.get(word).isEnd()) ? true : false ;\n  }//end:contains\n\n}\n```\n\n## Testing our code\n\n```javascript\n/**\n* Creating instances of above data-structure\n*/\nconst t = new Trie();\nt.addWord('ball');\nt.addWord('bat');\nt.addWord('bat');\nt.addWord('doll');\nt.addWord('dork');\nt.addWord('dorm');\nt.addWord('send');\nt.addWord('sense');\n\n// isWordPresent - Check if the phrase is present\ndesc = 'isWordPresent - Check if the word is present';\nactual = t.isWordPresent('dork');\nexpected = true;\nassertObjectEquals(actual, expected, desc);\n\n// Contains - Check if the phrase is present\ndesc = 'contains - Check if the phrase is present';\nactual = t.contains('do');\nexpected = true;\nassertObjectEquals(actual, expected, desc);\n\n\n// Function to assert tests\nfunction assertObjectEquals(a, b, desc) {\n  const objectA = JSON.stringify(a);\n  const objectB = JSON.stringify(b);\n  if (objectA !== objectB) {\n    console.log(`${desc} ... FAIL: ${objectA} != ${objectB}`)\n  } else {\n    console.log(`${desc} ... PASS`);\n  }\n}\n```","date":1.565885517058E+12,"__v":0}
{"_id":{"$oid":"5d5586249c9b6c0016cf2d62"},"tags":[{"$oid":"5d520577aa54c34180a48132"}],"groups":[{"$oid":"5d5565f04d555b0016d3e304"}],"title":"Permutation versus Combination","type":"question","question":"# What is the difference between a Permutation and a Combination when it comes to programming?","answer":"# Answer\n\n- A **Permutation** is an ordering of a set of items.\n```javascript\n// Permutations of 'tom'\n    tom;\n    tmo;\n    omt;\n    otm;\n    mto;\n    mot;\n```\n\n- **Combination**: It's is an unordered set or subset.","date":1.565885988519E+12,"__v":0}
{"_id":{"$oid":"5d5588589c9b6c0016cf2d63"},"tags":[{"$oid":"5d520577aa54c34180a48132"},{"$oid":"5d520585aa54c34180a48133"}],"groups":[{"$oid":"5d5565f04d555b0016d3e304"}],"title":"Custom Iterator - Inside an array ","type":"question","question":"# Explain the inner workings of an array in Javascript\n\nOR\n\nHow can you define a custom iterator within Javascript?\n- _So that we can use it where you would use an iterator, like `for-of`._","answer":"# SOLUTION\n\nAn array is an iterator, which just means that it's an object that has a property with name Symbol.iterator that points to an object with a next() function that returns an object with `{ done: false, value: ? }` for each value. When you want the iterator to complete just return done: `true` instead.\n\n- We can loop over a pre-built array of promises with `for-await-of` keyword.\n- Once a custom iterator is defined, then you can use it where you would use any iterator, like `for-of`.\n\n```javascript\n// Custom iterator definition\nconst customIterator = () => ({\n  [Symbol.iterator]: () => ({\n    x: 0,\n    next() {\n      if (this.x > 100) {\n        return {\n          done: true,\n          value: this.x\n        };\n      }\n      return {\n        done: false,\n        value: this.x++\n      };\n    }\n  })\n});\n\nfor (let x of customIterator()) {\n  console.log(x);\n}\n```","date":1.565886552958E+12,"__v":0}
{"_id":{"$oid":"5d559e273e078b001669cfcc"},"tags":[{"$oid":"5d520577aa54c34180a48132"},{"$oid":"5d520585aa54c34180a48133"},{"$oid":"5d5205c1aa54c34180a48136"}],"groups":[{"$oid":"5d5206aaaa54c34180a4813d"}],"title":"Doubly-Linked LIst","type":"question","question":"# Explain Programmatically how a Doubly Linked List data structure works\n\n## Doubly Linked List\n\nA Doubly Linked List has a node with the following properties\n\n### Node properties\n\n- **value**: Value of the node\n- **next**: pointer to the next node\n- **prev**: pointer to the previous node (cause its a doubly-linked list)\n\nThe constructor of the Node takes 3 params in the following order\n- value\n- next\n- prev\n\n---\n\n### LinkedList properties\n\nThe doubly-linked list itself has 2 properties and 6 methods in it\n\n### Properties\n\n- **head**: Head pointer of the LinkedList\n- **tail**: Tail pointer of the LinkedList\n\n### Methods\n\n#### 1. addToHead - 1 parameter, value\n\n- Simple function - as the name suggests, we are adding value to the Head side pointer of the linked list.\n- Create a node first with the following params - **value**, **this.head**, null\n- Check if header pointer is previously assigned\n- If **True** - assign the new node to the prev pointer of the head pointer\n- else assign the new node to the Tail pointer\n\n---\n\n#### 2. addToTail - 1 parameter, value\n\n- Very similar to **addToHead** method, just the head and tail pointers get reversed.\n\n---\n\n#### 3. removeHead - no params\n\n- **Edge case scenario**: First check if the head pointer exists (is not null) else return null\n- Create a node first with the following params - **value**, **this.head**, null\n- Check if header pointer is previously assigned\n- If **True** - assign the new node to the prev pointer of the head pointer\n- else assign the new node to the Tail pointer\n\n---\n\n#### 4. removeTail - no params\n\n- Very similar to **removeHead** method, just the head and tail pointers get reversed.\n\n---\n\n#### 5. contains - 1 parameter, value\n\n- Method to check if the linkedlist contains the value passed to the method or not\n- Returns boolean - true / false\n\n---\n\n#### 6. indexOf - 1 parameter, value\n\n- Returns an array of index positions where all the value is present\n\n---\n\n#### 7. reverse - no params\n\n- Reverse a linked list (Doubly linked list)\n- First check for edge case scenarios\n- If the head pointer doesn't have a next pointer then immediately return the head.\n- Else assign a new variable `first` the value of head pointer\n- assign a variable `second` the next element of the head pointer\n- Also assign the tail the value of the head pointer\n- Now in the while loop - if second variable is not null\n- first take a backup of the next property of the `second` variable = temp;\n- Assign `second.next` the value of the `first`\n- Interchange `first` variable with second\n- Assign back the backup of second.next to second variable\n- Repeat\n- Once out of the while loop, \nnullify the head.next property\n- Assign the this.head value of `first`\n- Return\n\n---\n\n#### 8. printList - no params\n\n- Convert a linked list into a flattened array \n\n---","answer":"# Solution\n- Reverse:\n - Complexity: Linear, O(n). - Time complexity\n - Complexity: Constant, O(1). - Space complexity\n\n```javascript\n// Define properties of a node to LinkedList\nfunction Node(value, next, prev) {\n  this.value = value;\n  this.next = next;\n  this.prev = prev; // It's a doubly linkedlist\n}\n```\n\nThe Linked list itself will have the following properties\n\n```javascript\n// Define properties of a LinkedList\nexport function LinkedList() {\n  this.head = null;\n  this.tail = null;\n}\n```\nNow to implement the methods, we have used the prototypical fashion of Datastructure definition\n\n```javascript\n// Add values to the head pointer of linked list\nLinkedList.prototype.addToHead = function(value) {\n  const newNode = new Node(value, this.head, null);\n  if (this.head) this.head.prev = newNode;\n  else this.tail = newNode;\n  this.head = newNode;\n};\n\n// Add values to the tail pointer of linked list\nLinkedList.prototype.addToTail = function(value) {\n  const newNode = new Node(value, null, this.tail);\n  if (this.tail) this.tail.next = newNode;\n  else this.head = newNode;\n  this.tail = newNode;\n};\n\n// Pop items out of the head pointer from linked list\nLinkedList.prototype.removeHead = function() {\n  //edge case - if head is empty return null\n  if (!this.head) return false;\n  const value = this.head.value;\n  this.head = this.head.next;\n  if (this.head) this.head.prev = null;\n  else this.tail = null;\n  return true;\n};\n\n// Pop items out of the tail pointer from linked list\nLinkedList.prototype.removeTail = function() {\n  //edge case - if tail is empty return null\n  if (!this.tail) return false;\n  const value = this.tail.value;\n  this.tail = this.tail.prev;\n  if (this.tail) this.tail.next = null;\n  else this.head = null;\n  return true;\n};\n\n// Search items in Linked list\nLinkedList.prototype.search = function(value) {\n  let currNode = this.head;\n  while (currNode) {\n    if (currNode.value === value) return currNode.value;\n    currNode = currNode.next;\n  }\n  return null;\n};\n\n// Find the indexOf of a value present in LinkedList\nLinkedList.prototype.indexOf = function(value) {\n  let result = [];\n  let indexCounter = 0;\n  let currNode = this.head;\n  while (currNode) {\n    // Where and all the value is there - record their positions\n    if (currNode.value === value) result.push(indexCounter);\n    // If the Head pointer reches the tail pointer - return the array\n    if (currNode === this.tail) return result;\n    currNode = currNode.next;\n    indexCounter++;\n  }\n};\n\n// Print all items as array of a linkedlist\nLinkedList.prototype.printList = function() {\n  const array = [];\n  let currentNode = this.head;\n  while (currentNode !== null) {\n    array.push(currentNode.value);\n    currentNode = currentNode.next;\n  }\n  return array;\n};\n\n// THis is a reversal of a single linked list\n// Linear\nLinkedList.prototype.reverse = function() {\n  // Edge case - check if the head pointer has the ppty next\n  if (!this.head.next) {\n    return this.head;\n  }\n  let first = this.head;\n  this.tail = this.head;\n  let second = first.next;\n\n  while (second) {\n    const temp = second.next;\n    second.next = first;\n    first = second;\n    second = temp;\n  }\n\n  this.head.next = null;\n  this.head = first;\n  return this;\n};\n```\n\n","date":1.566398634066E+12,"__v":0}
{"_id":{"$oid":"5d56853003e19700164ddc5f"},"tags":[{"$oid":"5d520577aa54c34180a48132"},{"$oid":"5d5691738806320016112ee2"}],"groups":[{"$oid":"5d54e6e53b82230016f596e4"}],"title":"TailWind CSS","type":"article","question":"# About Tailwind CSS\n\nTailwind is a CSS utility framework and is designed to be `mobile-first` approach to developing Websites\n\n# Important commands of Tailwind CSS\n\n1. Installing the TailWind library / cli framework\n\n```bash\nnpm install --save tailwindcss\n```\n\n2. Setting up a global (project level) theme configuration\n\n```bash\nnpx tailwind init\n```\n\n3. The above command, sets up a `tailwind.config.js` configuration file at the root of your project\n\n```javascript\nmodule.exports = {\n  theme: {\n    container: {\n      center: true,\n      padding: '2rem'\n    },\n    extend: {}\n  },\n  variants: {},\n  plugins: []\n}\n\n```\n\n4. Compiling Tailwind CSS\n\n> _You need to compile the Tailwind CSS atleast once!_\n\n```bash\n# The following command needs to be part of the package.json script array\n\"build:css\": \"tailwind build src/main.css -o public/style.css\"\n```","answer":"# Configuring your main styling \n\nOnce you have setup the above project structure and run tailwind, you could directly do either of the following\n\n- Enter tailwind utility classes directly in your HTML\n- Make use of the custom directives of Tailwind and apply the styles from CSS\n\n## Option 1\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link rel=\"stylesheet\" href=\"style.css\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>TailWind CSS</title>\n</head>\n<body class=\"bg-blue-700\">\n    <div class=\"container\">\n        <h1>TailWind CSS</h1>\n        <button class=\"bg-blue-500 hover:bg-blue-400 text-white font-bold py-2 px-4 rounded\">Find Friends</button>\n        <button class=\"btn btn-blue\">Find Groups</button>\n    </div>\n</body>\n</html>\n```\n\n---\n\n## Option 2\n\n```css\n@tailwind base;\n\n@tailwind components;\n\n@tailwind utilities;\n\n\n/** Directives in Tailwind*/\n.btn {\n    @apply text-white font-bold py-2 px-4 rounded;\n}\n\n.btn-blue {\n    @apply bg-blue-500;\n}\n\n.btn-blue:hover {\n    @apply bg-blue-400;\n}\n```\n\n---\n\n## Layouts - Responsive Grid in Tailwind CSS\n\nUsing Tailwind CSS to define grid components\n\n```html\n<div class=\"flex flex-wrap\">\n  <div class=\"w-full sm:w-1/2 md:w-1/3 lg:w-1/4 xl:w-1/6 mb-4 bg-gray-500\"></div>\n  <div class=\"w-full sm:w-1/2 md:w-1/3 lg:w-1/4 xl:w-1/6 mb-4 bg-gray-400\"></div>\n  <div class=\"w-full sm:w-1/2 md:w-1/3 lg:w-1/4 xl:w-1/6 mb-4 bg-gray-500\"></div>\n  <div class=\"w-full sm:w-1/2 md:w-1/3 lg:w-1/4 xl:w-1/6 mb-4 bg-gray-400\"></div>\n  <div class=\"w-full sm:w-1/2 md:w-1/3 lg:w-1/2 xl:w-1/6 mb-4 bg-gray-500\"></div>\n  <div class=\"w-full sm:w-1/2 md:w-1/3 lg:w-1/2 xl:w-1/6 mb-4 bg-gray-400\"></div>\n</div>\n```","date":1.565954462266E+12,"__v":0}
{"_id":{"$oid":"5d575cb1ccb7740016a7eef3"},"tags":[{"$oid":"5d520585aa54c34180a48133"},{"$oid":"5d520639aa54c34180a48139"},{"$oid":"5d5205c1aa54c34180a48136"}],"groups":[{"$oid":"5d520740aa54c34180a4813e"}],"title":"createContext & useCallback in Compound Components","type":"article","question":"#  Explain `createContext` and its uses in Compound Component\n\n- More detail about Hooks can be found under the following link:\n- [React Hook Cheat Sheet](https://react-hooks-cheatsheet.com/usecallback)","answer":"# Expandable component\n\nFor the below code, what is the best way to ensure that the Child components are dependent on the Parent component\n\n```html\n<Expandable>\n\t<Expandable.Header> Header </Expandable.Header>\n \t<Expandable.Icon/>\n    <Expandable.Body> This is the content </Expandable.Body>\n</Expandable>\n```\n\nTo ensure dependency, we introduce a **Context** using `React.createContext()`\n\n```javascript\n\nimport React, { createContext } from 'react'\n\n/* \n* Creating a context, \n* is one way to ensure that the child components are dependent \n* on the parent\n*/\nconst ExpandableContext = createContext()\n/* \n* Context has a Provider component which\n* needs to be wrapped around your Child component\n*/\nconst { Provider } = ExpandableContext\n\nconst Expandable = ({children}) => {\n  return <Provider>{children}</Provider>\n}\n\nexport default Expandable\n```\n\n---\n\n\n# Preventing unecessary renders\n\n- React Hook - `useCallback` can be used to optimize / memoize the render stack\n- [React Hooks Cheat sheet link](https://react-hooks-cheatsheet.com/usecallback)\n\nLet's optimize the code by `memoizing`\n\n```javascript\nimport React, { createContext, useState, useCallback } from 'react'\n\nconst ExpandableContext = createContext()\nconst { Provider } = ExpandableContext\n\nconst Expandable = ({children}) => {\n  const [expanded, setExpanded] = useState(false)\n  // look here 👇 - memoization\n  const toggle = useCallback(\n    () => setExpanded(prevExpanded => !prevExpanded),\n    []\n  )\n  return <Provider>{children}</Provider>\n}\n\nexport default Expandable\n```\n\n---\n\n## Final implementation of Expandable component\n\n```javascript\nimport React, { createContext, useState, useCallback, useRef, useEffect, useMemo } from 'react'\n\nconst ExpandableContext = createContext()\nconst { Provider } = ExpandableContext\n\nconst Expandable = ({ children, onExpand }) => {\n  const [expanded, setExpanded] = useState(false)\n  const toggle = useCallback(\n    () => setExpanded(prevExpanded => !prevExpanded),\n    []\n  )\n  const componentJustMounted = useRef(true)\n  useEffect(\n    () => {\n    if (!componentJustMounted.current) {\n        onExpand(expanded)\n      }\n     componentJustMounted.current = false\n    },\n    [expanded]\n  )\n  const value = useMemo(\n   () => ({ expanded, toggle }), \n   [expanded, toggle]\n  )\n  return (\n    <Provider value={value}>\n        {children}\n    </Provider>\n  )\n}\n\nexport default Expandable\n```\n\n","date":1.566009259668E+12,"__v":0}
{"_id":{"$oid":"5d5768aaccb7740016a7eef4"},"tags":[{"$oid":"5d520585aa54c34180a48133"},{"$oid":"5d520639aa54c34180a48139"},{"$oid":"5d5205c1aa54c34180a48136"}],"groups":[{"$oid":"5d520740aa54c34180a4813e"}],"title":"prevent useEffect() invocation on component Mount","type":"article","question":"## prevent useEffect() invocation on component Mount\n\nIn scenarios, where you are useing `useEffect()` method to change on props, state changes but dont want it to run on component mount, how can you achieve that ?\n\n> - _What's the one problem with `useEffect()` hook ?_\n> - Its **always invoked on mount**, even with a state / prop provided as the 2nd argument\n\n- [Solution explained well in Educative](https://www.educative.io/courses/advanced-react-patterns-with-hooks/gxgEzY5oB7r)\n","answer":"## prevent useEffect() invocation on component Mount\n\nIn scenarios, where you are useing `useEffect()` method to change on props, state changes but dont want it to run on component mount, how can you achieve that ?\n\n> - _What's the one problem with `useEffect()` hook ?_\n> - Its **always invoked on mount**, even with a state / prop provided as the 2nd argument\n\n- [Solution explained well in Educative](https://www.educative.io/courses/advanced-react-patterns-with-hooks/gxgEzY5oB7r)\n\n\n## Solution\n\n### Preventing Invocation Upon Mount\nThe functionality we seek requires that the callback passed by the user isn’t invoked on mount.\n\nHow can we enforce this?\n\nFirst, consider the naive solution below:\n\n```javascript\n//faulty solution\n... \nlet componentJustMounted = true\nuseEffect(\n    () => {  \n      if(!componentJustMounted) {\n        props.onExpand(expanded)\n        componentJustMounted = false\n      }\n    },\n    [expanded]\n  )\n...\n```\n\n_What’s **wrong** with the code above?_\n\nLoosely speaking, the thinking behind the code is correct. You keep track of a certain variable componentJustMounted, set it to true, and only call the user callback onExpand when componentJustMounted is false.\n\nFinally, the componentJustMounted value is only set to false after the user callback has been invoked at least once.\n\nLooks good.\n\nHowever, the problem with this is that whenever the function component re-renders owing to a state or prop change, the componentJustMounted value will always be reset to true. Thus, the user callback onExpand will never be invoked as it is only invoked when componentJustMounted is false.\n\n--- \n\n## Keeping Value Constant - Right solution\n\n### Using useRef to Ensure Value Remains Constant\n\nThe solution to this problem is simple. We can use the useRef hook to ensure that a value stays the same throughout component’s entire lifetime.\n\nHere’s how it works:\n\n```javascript\n//correct implementation\n  const componentJustMounted = useRef(true)\n  useEffect(\n    () => {\n      if (!componentJustMounted.current) {\n        onExpand(expanded)\n      }\n     componentJustMounted.current = false\n    },\n    [expanded] // this way its only called when expanded changes and not on component mount\n  ) \n```\n\nuseRef returns a ref object, and the value stored in the object may be retrieved from the current property, ref.current\n\nThe signature for useRef looks like this: `useRef(initialValue).`\n\nThis means that a ref object is stored initially in componentJustMounted.current with the current property set to `true.`","date":1.566009514134E+12,"__v":0}
{"_id":{"$oid":"5d57983b9dd4d30016515a4b"},"tags":[{"$oid":"5d520639aa54c34180a48139"},{"$oid":"5d5691738806320016112ee2"}],"groups":[{"$oid":"5d54e6e53b82230016f596e4"}],"title":"TailWind CSS with React","type":"question","question":"## Explain how to integrate tailwind configuration React (using create-react-app).\n- [Tailwind Official website](https://tailwindcss.com)\n\n- [Youtube - Integrate Tailwind with React](https://www.youtube.com/watch?v=XtNkcHyVQOY)\n- [Youtube - Integrate Tailwind with Vue cli](https://www.youtube.com/watch?v=cnfR4vYJGgY)\n- [Github Repo for React + Tailwind barebones project](https://github.com/avj2352/react-tailwind-components)\n- [Tailwind Components - toolbox](https://www.tailwindtoolbox.com/components/searchy)","answer":"# Integrate TailwindCss with React App\n\n- [Medium Article by Mike Francis](https://medium.com/@mikeeeeeeey/create-react-app-tailwind-css-feat-postcss-631d9e33ba8c)\n\n- Setup React Project using create-react-app\n\n```bash\nC:\\> create-react-app tailwindcss-react\n```\n\n- Under the project, install the following `devDepdendencies`\n\n```bash\nnpm install --save-dev tailwindcss autoprefixer postcss-cli\n```\n\n- Generate Tailwind project config\n\n```bash\n# creates a tailwind.config.js file at the root of your project\nnpx tailwind init\n```\n\n\n- Enter the following configuration as part of `tailwind.config.js` file\n\n```javascript\nmodule.exports = {\n  theme: {\n    container: {\n      center: true,\n      padding: '2rem'\n    },\n    extend: {}\n  },\n  variants: {},\n  plugins: []\n}\n\n```\n\n- Create a postcss config file \n\n```bash\n# creates a file under windows terminal\nC:\\> echo \"config\" > postcss.config.js\n```\n\n- Enter the following configuration under postcss.config.js file\n\n```js\nconst tailwindcss = require('tailwindcss');\nmodule.exports = {\n plugins: [\n  tailwindcss('./tailwind.config.js'),\n  require('autoprefixer')\n ]\n};\n```\n\n- Now, to setup a barebones tailwind project, create the following file under the `assets` folder\n\n```bash\nC:\\> echo \"main css goes here\" > src/assets/css/main.css\n```\n\n- Enter the following CSS in your main.css file\n\n```css\n@tailwind base;\n\n@tailwind components;\n\n@tailwind utilities;\n\n\n/** Directives in Tailwind*/\n\nh1 {\n    @apply text-2xl font-bold;\n}\n\n.btn {\n    @apply text-white font-bold py-2 px-4 rounded;\n}\n\n.btn-blue {\n    @apply bg-blue-500;\n}\n\n.btn-blue:hover {\n    @apply bg-blue-400;\n}\n\n.btn-blue:focus {\n    @apply shadow-outline;\n}\n```\n\n- Finally, configure your `package.json` build file\n\n```json\n\"scripts\": {\n        \"build:css\": \"postcss src/assets/css/main.css -o src/index.css\",\n        \"watch:css\": \"postcss src/assets/css/main.css -o src/index.css -w\",\n        \"start\": \"npm run watch:css & react-scripts start\",\n        \"build\": \"npm run build:css && react-scripts build\",\n        \"test\": \"react-scripts test --env=jsdom\",\n        \"eject\": \"react-scripts eject\"\n    }\n```","date":1.567679383764E+12,"__v":0}
{"_id":{"$oid":"5d5a1ab4267c3d0016ea90ff"},"tags":[{"$oid":"5d520577aa54c34180a48132"},{"$oid":"5d520585aa54c34180a48133"},{"$oid":"5d5a1b83267c3d0016ea9100"}],"groups":[{"$oid":"5d53df003ac67a00160671e3"}],"title":"UDP - How to setup using Node JS","type":"question","question":"# UDP - User Datagram Protocol - Node JS\n\n- Typically in a TCP connection, Two nodes have a handshake before sending  / receiving data from one another\n- With UDP, One Node starts sending off information from it with a hope that some node is receiving it\n- UDP - Used in streaming services, streaming videos\n\n# Creating a UDP server and a UDP client\n\n- in Node JS, the module from which we create an instance of UDP is the `dgram` module\n- `dgram` module refers to the **Datagram** module. It can then be used to create a `udp4` instance.\n- UDP doesn't really care if there is a client and server.","answer":"# Setting a simple UDP server using Node\n\n```javascript\n/**\n * UDP - Server listening on 6000\n */\nconst dgram = require('dgram'); // datagram module\n\n// Creating a server and \nconst server = dgram.createSocket('udp4'); // create a UDP4 type datagram\nserver.on('message',(msgBuffer, sender)=>{\n    const msgString = msgBuffer.toString();\n    console.log('Message is: ', msgString);\n});\n\n//Bind to 6000\nserver.bind(6000);\n```\n\n# Setting a simple UDP client using Node\n\n```javascript\n/**\n * Example UDP client\n * Sending a message to the UDP server on 6000\n */\n// dependencies\ncosnt dgram = require('dgram');\n\n// create the client\nconst client = dgram.createSocket('udp4');\n\n// define the message and pull it onto the server\nconst msgString = `This is a message`;\nconst msgBugger = Buffer.from(msgString);\n\n// Send off the message\nclient.send(msgBugger, 6000, 'localhost', (err)=>{\n    client.close();\n});\n```","date":1.56618639699E+12,"__v":0}
{"_id":{"$oid":"5d5a43521ddcc90016428fe8"},"tags":[{"$oid":"5d8ede5c9ccd7e0016cdb48f"},{"$oid":"5d5a437e1ddcc90016428fea"}],"groups":[{"$oid":"5d5a403a1ddcc90016428fe7"}],"title":"What is Nest JS","type":"question","question":"# What is Nest JS ?\n\n- [Official Site](https://nestjs.com/)\n- [Documentation Site - Guide](https://nestjs.com/)\n- [Udemy Course](https://www.udemy.com/nestjs-zero-to-hero/learn/lecture/15053816#overview)\n","answer":"<p align=\"center\">\n  <a href=\"http://nestjs.com/\" target=\"blank\"><img src=\"https://nestjs.com/img/logo_text.svg\" width=\"320\" alt=\"Nest Logo\" /></a>\n</p>\n\n\n# Answer\n\nNest (or NestJS) is a framework for building efficient, scalable Node.js server-side applications. \n- It uses progressive JavaScript, \n\n- is built with and fully supports TypeScript (yet still enables developers to code in pure JavaScript) \n\n- and combines elements of OOP (Object Oriented Programming), FP (Functional Programming), and FRP (Functional Reactive Programming).\n\n- It ships with a CLI - Scaffolding apps which makes it easier and quick to build and scale applications.\n\n- _Angular Developer Friendly !!_\n\n- Its possible to generate schematics using the CLI \n\n- [https://docs.nestjs.com](https://docs.nestjs.com)\n\n---\n\n# Pain Point\n\nWhile Node.JS (for the server side) has plenty of great libraries for server side development, none of them effectively solve the main problem of **architecture**\n\n# Solution\n\nNest JS provides an out of the box application architecture which allows developers & teams to create highly testable, scalable, loosely coupled & easy-to-maintain applications.\n\n\n","date":1.569644173394E+12,"__v":0}
{"_id":{"$oid":"5d5a5b4ad6f3260016d1c228"},"tags":[{"$oid":"5d520577aa54c34180a48132"},{"$oid":"5d520585aa54c34180a48133"},{"$oid":"5d5205c1aa54c34180a48136"}],"groups":[{"$oid":"5d5206aaaa54c34180a4813d"}],"title":"Singly Linked List","type":"question","question":"# Explain how a Singly Linked List is different from a Doubly Linked List\n\nAlso provide the code structure of a Singly Linked List with the help of an array\n\n### reverse()\n\nThe brain of this solution lies in the loop which iterates through the list. For any current node, its link with the previous node is reversed, and next stores the next node in the list:\n\n- Store the current node’s nextElement in next\n- Set current node’s nextElement to previous (reversal)\n- Make the current node the new previous so that it can be used for the next iteration\n- Use next to move on to the next node\n- In the end, we simply point the head to the last node in our loop.\n\n---","answer":"# In Singly LL, the following properties would be missing\n\n- In Node class, the property present is only `next`\n- In Node class, the `prev` property is missing\n- In LL class, the property present is only `head` / `getHead`\n- For `insertionAtTail` we would have to traverse through the LL and then insert the node\n\n\n```javascript\nclass Node {\n constructor(data) {\n   this.data=data;\n   this.nextElement=null;\n }\n}\n\nclass LinkedList {\n  constructor() {\n    this.head=new Node(-1);\n    this.length=0;\n  }\n  \n  //Insertion At Head  \n  insertAtHead(dt) {\n    let tempNode = new Node(dt);\n    tempNode.nextElement=this.head.nextElement;\n    this.head.nextElement=tempNode;\n    this.length=this.length+1;\n    return this; //returning the updated list\n  }\n\n  // Insert at Tail\n  insertAtTail(dt) {\n    let tempNode = new Node(dt);\n    let currNode = this.getHead();\n    while(currNode.nextElement !== null) {\n      currNode = currNode.nextElement;\n    }\n    currNode.nextElement = tempNode;\n    this.length = this.length + 1;\n    return this;\n  }\n\n  // Remove Head\n  removeHead() {\n   // Step 1: Get a reference of the head pointer and its next element\n   let head = this.getHead();\n   let firstElement = head.nextElement;\n\n   // only if the list is not empty, remove head\n   if (firstElement !== null) {\n     head = firstElement.nextElement;\n     firstElement.nextElement = null;\n   }\n   return this;\n  }\n\n  // Delete a node by value - return true if value found and is deleted - else return false\n  deleteVal(value) {\n  let deleted = false; //True or False\n  //Check if list if empty, return false if it is\n  if(this.isEmpty()) {\n      console.log(\"Empty list\");\n      return deleted;\n  }\n\n  let currentNode = this.getHead().nextElement; //Get current node\n  let previousNode = null;  //Get previous node\n  if (currentNode.data === value) {\n    this.removeHead(); //Use the previous function\n    deleted=true;\n    return deleted; \n  }\n\n  //Traversing/Searching for Node to Delete\n  while (currentNode != null) {\n    //Node to delete is found\n    if (value == currentNode.data) {\n      previousNode.nextElement = currentNode.nextElement; //previous node now points to next node\n      currentNode.nextElement = null;\n      deleted = true;\n      break;\n    }\n    previousNode = currentNode\n    currentNode = currentNode.nextElement\n  }\n\n  if (deleted == false) {\n    console.log(String(value), \" is not in list!\");\n  }\n  else {\n    console.log(String(value), \" deleted!\");\n  }\n  return deleted;\n}\n\n  \n  // Check if the Single LL is empty or not\n  isEmpty() {\n    return (this.length==0);\n  }\n\n  // Search if a particular value exists - true else return false\n  search(value) {\n   if (this.isEmpty()) return false;\n   let currNode = this.getHead();\n   while (currNode) {\n    if (currNode.data === value) return true;\n    currNode = currNode.nextElement;\n   }  \n   return false;\n  }\n\n  // Reverse a LL\n  reverse() {\n   Maintain a previousNode, currNode & nextNode\n   let previousNode=null;\n   let currentNode = this.getHead().nextElement; // The current node\n   let nextNode = null; // The next node in the list\n\n   //Reversal\n   while (currentNode != null){\n    nextNode = currentNode.nextElement;\n    currentNode.nextElement = previousNode;\n    previousNode = currentNode;\n    currentNode = nextNode;\n   }\n   //Set the last element as the new head node\n   this.getHead().nextElement = previousNode;\n   return this;\n }\n \n  //function to print the linked list\n  printList() {\n    if(this.isEmpty()){\n      console.log(\"Empty List\");\n      return false;\n    }\n    else {\n      let temp=this.head.nextElement\n      while (temp.nextElement!=null){\n        process.stdout.write(String(temp.data));\n        process.stdout.write(\" -> \");\n        temp=temp.nextElement;\n      }\n      console.log(\"null\");\n      return true;\n    }\n  }\n  \n}\n\nlet list = new LinkedList();\nfor (i=0; i<10; i++) {\n   list=list.insertAtHead(i); \n}\nlist.printList(); //will print the list\n```","date":1.566430420178E+12,"__v":0}
{"_id":{"$oid":"5d5c0d8113895300161309e1"},"tags":[{"$oid":"5d520577aa54c34180a48132"},{"$oid":"5d520585aa54c34180a48133"},{"$oid":"5d5205c1aa54c34180a48136"}],"groups":[{"$oid":"5d5206aaaa54c34180a4813d"}],"title":"Singly Linked Lists vs. Doubly Linked Lists","type":"question","question":"Let's see how the two renditions of the linked list structure fare against each other.\n- Which is better ?\n- Optimized Doubly Linked List (with a tail pointer)\n- [Difference btwn SLL & DLL](https://www.educative.io/courses/data-structures-in-javascript-an-interview-refresher/gx6lVB0D4xl)","answer":"# Answer\nDLLs have a few advantages over SLLs, but these perks do not come without a cost:\n\n- **Doubly linked lists** can be traversed in both directions, which makes them more compatible with complex algorithms.\n- Nodes in **Doubly linked lists** require **extra memory** to store the `previousElement` pointer.\n- **Deletion** is more efficient in doubly linked lists as we do not need to keep track of the previous node. We already have a backwards pointer for it.\n\nAt this point, we’ve compared the two major types of linked lists. The minor memory load that comes with DLLs can be forgone because of the convenience they provide.","date":1.566313857025E+12,"__v":0}
{"_id":{"$oid":"5d5c2c9679d75f001616d181"},"tags":[{"$oid":"5d520577aa54c34180a48132"},{"$oid":"5d520585aa54c34180a48133"},{"$oid":"5d5205c1aa54c34180a48136"}],"groups":[{"$oid":"5d52068baa54c34180a4813c"}],"title":"Length of a Singly Linked List","type":"question","question":"# Write an algorithm to find the length of a filled up Singly Linked List\n- The data-structure of a Singly Linked List is found in Data-structure category\n- Do not use the built-in property - length :) available in Singly linked list\n","answer":"# Solution\n\n```javascript\n//Access HeadNode => list.getHead()\n//Check if list is empty => list.isEmpty()\n//Insert at head => list.insertAtHead(value)\n//Delete at head => list.deleteAtHead()\n//Insert at tail => list.insertAtTail(value)\n//Search for element => list.search(value)\n//Delete by value => list.deleteVal(value)\n//Node class { data ; Node nextElement;}\n\nfunction length(list){\n  let length=0;\n  let currentNode=list.getHead().nextElement;\n  while (currentNode!=null){\n    length=length+1;\n    currentNode=currentNode.nextElement;\n  }\n  return length;\n}\n\nlet list = new LinkedList();\nlist.insertAtHead(4);\nlist.insertAtHead(3);\nlist.insertAtHead(2);\nlist.insertAtHead(1);\nlist.insertAtHead(0);\nconsole.log(length(list));\n```\n\n## Time Complexity\n\nSince this is a linear algorithm, the time complexity will be O(n).","date":1.566321814491E+12,"__v":0}
{"_id":{"$oid":"5d5c310f79d75f001616d182"},"tags":[{"$oid":"5d5a43751ddcc90016428fe9"},{"$oid":"5d5a437e1ddcc90016428fea"}],"groups":[{"$oid":"5d53df003ac67a00160671e3"}],"title":"Node JS Core Essentials - 101","type":"question","question":"# Explain the following categories\n\n- **Event Loops**: _How Node processes JS_\n- **Module System**: _How Node runs an application_\n- **REPL**: _What is a REPL_\n- Environments & Configuration in Node\n- **Handling Errors** in Node\n- Node JS versus the Browser\n","answer":"# How Node processes JS - Event Loops \n\n- The **event loop** is continually checking if there's any new for Node JS to do.\n- Each task is blocking if its blocking all the resources and tasks that are in pipeline - while it's executing the current task.\n- Node JS is a **single threaded** - Node's event loop and non blocking IO doesn't allow Node to do multiple things at one time...they just allow Node to schedule things later.\n- **Non blocking IO** allows the app to do other things while it's sitting around waiting.\n\n---\n\n# How Node Runs an application Module System\n\n```javascript\nvar lib  = require ('./lib'); // This line imports a piece of code\nmodule.exports = whatever ; //This line exports a piece of code\n```\n\nThese imports and exports, when chained together, create a dependency tree, which tells Node which files are needed to run the application.\n\n---\n\n# REPL\n\n- It is a way to execute the JS code against V8 engine at runtime\n\nThe REPL is an interactive JS runtime.\n\n- **R**: Reading input using node command\n- **E**: Executing\n- **P**: Printing Response\n- **L**: Loop\n\n---\n\n```javascript\n// This is the R of REPL\nnode index.js \n```\n\n- package-lock.json - is used to lock your versions exactly down to what you have installed\n- .npmrc - Contains authToken that lets your local npm authenticate against the NPM cloud.\n- .travis.yml - Node version of a CI / CD which tells travis CI configuration for a test to pass\n- .jshintrc - configures javascript linter\n- Gulp, Grunt, Webpack - Popular build tools\n\n---\n\n# Environments & Configurations\n\nWhen it comes to Environments & Configuration Node is woefully lacking.\n\n## Option 1\n\n- Start your app with `NODE_ENV = myEnvironemntName node index.js`\n\n```bash\n# Pass the name of your environment file  before calling node index.js\nNODE_ENV=config.js node index.js\n```\n\n- Put your configuration in a file (eg: config.js) which has a switch inside of it\n- That switch should read `process.env.NODE_ENV` to determine the current environment and export only the configuration variables for that environment.\n- All your project specific configuration are inside that config.js\n\n## Option 2\n- Start your app with every configuration variable you're going to need for that environment\n\n```bash\n# All below are configuration parameters accessed inside index.js using process.env.xyz\nDBPassword=myDBPassword apiToken=mySecretToken port=myPortConfiguration foo=bar node index.js\n```\n\n## Option 3\n- Read all your configuration from a `.env` file which gets ignored by source control (like Git)\n- Each dev would put their own `.env` file in the project prior to beginning localhost work.\n- Your deployment pipeline would insert an `.env` file into the repo before it deploys anywhere.\n\n---\n\n# Handling Errors\n\nThe following are the 3 possible ways of handling errors in a Node JS application\n\n## Error callback:\nFunctions should callback 2 parameters\n- An Error (if any)\n- Data being returned (if any)\n\n```javascript\n// First param should always be the error to be handled, followed by the actual data as 2nd param\nexampleErrBackFunction(function (err, data){\n//Check the error\nerr ? return `Error recieved`\n// Else process your data\nconsole.log('Processed data', data);\n});\n```\n\n## Avoid throwing Exceptions\nAn uncaught exception takes down the entire thread, and kills the application\n\n## Avoid Globals\nJust as in Browser best practice, Avoid Globals in Node JS application. This way you'll avoid namespace collisions with any libraries you may be using.\n\n","date":1.566322959519E+12,"__v":0}
{"_id":{"$oid":"5d5dd5f1efc96a001605ef19"},"tags":[{"$oid":"5d520585aa54c34180a48133"},{"$oid":"5d520577aa54c34180a48132"},{"$oid":"5d5205c1aa54c34180a48136"}],"groups":[{"$oid":"5d52068baa54c34180a4813c"}],"title":"Reverse a Linked List","type":"question","question":"# Write an algorithm to reverse a Linked List\n\nThe brain of this solution lies in the loop which iterates through the list. For any current node, its link with the previous node is reversed, and next stores the next node in the list:\n\n- Store the current node’s `nextElement` in next\n- Set current node’s `nextElement` to previous `(reversal)`\n- Make the current node the new previous so that it can be used for the next iteration\n- Use next to move on to the next node\n- In the end, we simply point the head to the last node in our loop.\n\n## Time Complexity\n\nThe algorithm runs in **O(n)** since the list is traversed once.","answer":"# Solution\n\n```javascript\n//Access HeadNode => list.getHead()\n//Check if list is empty => list.isEmpty()\n//Insert at head => list.insertAtHead(value)\n//Delete at head => list.deleteAtHead()\n//Insert at tail => list.insertAtTail(value)\n//Search for element => list.search(value)\n//Delete by value => list.deleteVal(value)\n//Node class { data ; Node nextElement;}\n\nfunction reverse(list){\n  \n  let previousNode=null;\n  let currentNode = list.getHead().nextElement; // The current node\n  let nextNode = null; // The next node in the list\n\n  //Reversal\n  while (currentNode != null){\n    nextNode = currentNode.nextElement;\n    currentNode.nextElement = previousNode;\n    previousNode = currentNode;\n    currentNode = nextNode;\n  }\n\n  //Set the last element as the new head node\n  list.getHead().nextElement = previousNode;\n  \n  return list;\n}\n\nlet list=new LinkedList();\nlist.insertAtHead(4);\nlist.insertAtHead(9);\nlist.insertAtHead(6);\nlist.insertAtHead(1);\nlist.insertAtHead(0);\nlist.printList();\nreverse(list);\nlist.printList();\n```","date":1.566430705383E+12,"__v":0}
{"_id":{"$oid":"5d5dd932efc96a001605ef1a"},"tags":[{"$oid":"5d520577aa54c34180a48132"},{"$oid":"5d520585aa54c34180a48133"},{"$oid":"5d5205c1aa54c34180a48136"}],"groups":[{"$oid":"5d52068baa54c34180a4813c"}],"title":"Detect a Loop in a Linked List","type":"question","question":"# Problem Statement\n\nBy definition, a loop is formed when a node in your linked list points to a previously traversed node.\n\nYou must implement the `detectLoop()` function which will take a linked list as input and deduce whether or not a loop is present.\n\n- **Input**: A singly linked list.\n- **Output**: Returns `true` if the given linked list contains a loop. Otherwise, it returns `false`\n\n## Sample Input\n```bash\nlinkedlist = 7->14->21->7 // Both '7's are the same node. Not duplicates.\n```\n## Sample Output\n```bash\ntrue\n```","answer":"# Solution \\#1\n\n## Using a Set / List\n\n- This is the primitive approach, but it works nonetheless.\n- We iterate over the whole linked list and add each visited node to a visitedNodes list or set. At every node, we check whether it has been visited or not.\n- By principle, if a node is revisited, a cycle exists!\n\n```javascript\nfunction detectLoop(list) {\n  //Used to store nodes which we already visited\n  visitedNodes = []\n  currentNode = list.getHead().nextElement;\n\n /**\n * Traverse the list and put each node in the visitedNodes list \n * and if a node appears twice in the map\n * then it means there is a loop in the list\n */\n  while (currentNode != null) {\n    if (visitedNodes.includes(currentNode)) {\n      return true;\n    }\n    visitedNodes.push(currentNode); //Insert node in visitedNodes list\n    currentNode = currentNode.nextElement;\n  }\n  return false;\n}\n\n```\n\n---\n\n# Solution \\#2\n\n## Floyd’s Cycle-Finding Algorithm\n\n- This is perhaps the fastest algorithm for detecting a linked list loop. We keep track of two iterators, onestep and twostep.\n- onestep moves forward one node at a time, while twostep iterates over two nodes. In this way, twostep is the faster iterator.\n- By principle, if a loop exists, the two iterators will meet. Whenever this condition is fulfilled, the function returns true.\n\n\n```javascript\n//Access HeadNode => list.getHead()\n//Check if list is empty => list.isEmpty()\n//Node class  { int data ; Node nextElement;}\n\nfunction detectLoop(list){\n  //Keep two iterators\n  onestep = list.getHead();\n  twostep = list.getHead();\n  while(onestep!=null && twostep!=null && twostep.nextElement!=null){ \n    onestep = onestep.nextElement // Moves one node at a time\n    twostep = twostep.nextElement.nextElement // Moves two nodes at a time\n    if (onestep == twostep){ // Loop exists\n      return true;\n    }\n  }\n  return false;\n}\n```\n\n---\n\n## Testing the solution\n\n```javascript\nlet list = new LinkedList();\n\nlist.insertAtHead(21);\nlist.insertAtHead(14);\nlist.insertAtHead(7);  \n  \nlet head = list.getHead();\nlet node = list.getHead();\n\n// Adding a loop\nfor(i=0; i<4; i++) {\n  if(node.nextElement == null) {\n    node.nextElement = head.nextElement;\n    break;\n  }\n  node = node.nextElement;\n}\nconsole.log(detectLoop(list));\n```","date":1.566431538961E+12,"__v":0}
{"_id":{"$oid":"5d5dddb0efc96a001605ef1b"},"tags":[{"$oid":"5d520577aa54c34180a48132"},{"$oid":"5d520585aa54c34180a48133"},{"$oid":"5d5205c1aa54c34180a48136"}],"groups":[{"$oid":"5d52068baa54c34180a4813c"}],"title":"Find Middle Value of a Linked List","type":"question","question":"# Problem Statement\n\nYou have to implement the findMid() function which will take a linked list as an input and return the value of the middle node. If the length of the list is even, the middle value will occur at \n`length\\2`​​. For a list of odd length, the middle value will be `length+1\\2`.\n\n- **Input**: A singly linked list.\n- **Output**: The integer value of the middle node.\n\n## Sample Input\n\n```bash\nLinkedList = 7->14->10->21\n```\n## Sample Output\n```bash\n14\n```\n\n## Sample Input\n\n```bash\nLinkedList = 7->14->10->21->22\n```\n## Sample Output\n```bash\n10\n```","answer":"# Solution \\#1\n\n## Brute Force Method\n\nThis is the simplest way to go about this problem. We traverse the whole list to find its length. The middle position can be calculated by halving the length.\n- Note: For odd lengths, the middle value would be,\n- mid = length/2 + 1\n- Then we iterate till the middle index and return the value of that node.\n\n## Time Complexity\nThe algorithm makes a linear traversal over the list. Hence, the time complexity is `O(n)`.\n\n```javascript\n//Access HeadNode => list.getHead()\n//Acess Length => list.length;\n//Check if list is empty => list.isEmpty()\n//Insert at head => list.insertAtHead(value)\n//Delete at head => list.deleteAtHead()\n//Insert at tail => list.insertAtTail(value)\n//Search for element => list.search(value)\n//Delete by value => list.deleteVal(value)\n//Node class { data ; Node nextElement;}\nfunction findMid(list){\n  if(list.isEmpty()){\n    return null;\n  }\n  \n  let node = list.getHead();\n  let mid = 0;\n  if (list.length%2 == 0){\n    mid = list.length/2;\n  }\n  else{\n    mid = list.length/2 + 1;\n  }\n  for(i=0;i<mid;i++){\n    node = node.nextElement;\n  }\n  return node.data;\n}\n```\n\n---\n\n# Solution \\#2\n\n## Two Pointers\n\nThis solution is more efficient as compared to the brute force method. We will use two pointers which will work simultaneously.\n\nThink of it this way:\n\n- The fast pointer moves two steps at a time until​ the end of the list\n- The slow pointer moves one step at a time\n- when the fast pointer reaches the end, the slow pointer will be at the middle\n\nUsing this algorithm, we can make the process faster because the calculation of the length and the traversal till the middle are happening side-by-side.\n\n## Time Complexity\n\nWe are traversing the linked list at twice the speed, so it is certainly faster. However, the bottleneck complexity is still O(n).\n\n```javascript\nfunction findMid(list){\n  if (list.isEmpty()){\n    return -1;\n  }\n  let currentNode = list.getHead().nextElement;\n  if (currentNode.nextElement == null){\n\t\t//Only 1 element exist in array so return its value.\n    return currentNode.data;\n  }\n  \n  let midNode = currentNode\n  currentNode = currentNode.nextElement.nextElement\n  //Move midNode (Slower) one step at a time\n  //Move currentNode (Faster) two steps at a time\n  //When currentNode reaches at end, midNode will be at the middle of List \n  while (currentNode != null){\n    midNode = midNode.nextElement;\n    currentNode = currentNode.nextElement;\n    if (currentNode != null){\n      currentNode = currentNode.nextElement;\n    }\n  }\n  if (midNode != None){\n    return midNode.data;\n  }\n  return -1;\n}\n```\n\n---\n\n## Testing\n\n```javascript\nlet list = new LinkedList()\nlist.insertAtHead(22);\nlist.insertAtHead(21);\nlist.insertAtHead(10);\nlist.insertAtHead(14);\nlist.insertAtHead(7);\nlist.insertAtHead(9);\n\nlist.printList();\nconsole.log(findMid(list));\n```","date":1.566432688717E+12,"__v":0}
{"_id":{"$oid":"5d5de3dfefc96a001605ef1c"},"tags":[{"$oid":"5d520577aa54c34180a48132"},{"$oid":"5d520585aa54c34180a48133"},{"$oid":"5d5205fbaa54c34180a48137"}],"groups":[{"$oid":"5d5257c4954dab0016611386"}],"title":"Pancake Sorting Algorithm","type":"question","question":"# Problem Statement\n\nImplement sorting using a technique known popularly as **Pancake Sorting**\n\n\n- HINT: Show a brute force style of implementing this algortihm\n- **Pan cake sorting** using simple array reversals\n- Complexity: **O(nlogn)** time and **O(1)** space.\n","answer":"# Solution\n\n- you need to flip the array twice (two reversals) in order to show **Pancake Sorting**\n\n```javascript\nexport function pancake_sort(arr) {\n  for (var i = arr.length - 1; i >= 1; i--) {\n    // find the index of the largest element not yet sorted\n    var max_idx = 0;\n    var max = arr[0];\n    for (var j = 1; j <= i; j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n        max_idx = j;\n      }\n    }\n\n    if (max_idx == i) continue; // element already in place\n\n    var new_slice;\n\n    // flip arr max element to index 0\n    if (max_idx > 0) {\n      new_slice = arr.slice(0, max_idx + 1).reverse();\n      for (j = 0; j <= max_idx; j++) arr[j] = new_slice[j];\n    }\n\n    // then flip the max element to its place\n    new_slice = arr.slice(0, i + 1).reverse();\n    for (j = 0; j <= i; j++) arr[j] = new_slice[j];\n  }\n  return arr;\n}\n```","date":1.566434308726E+12,"__v":0}
{"_id":{"$oid":"5d5e014b705c6a001602f35e"},"tags":[{"$oid":"5d520577aa54c34180a48132"},{"$oid":"5d520585aa54c34180a48133"}],"groups":[{"$oid":"5d5206aaaa54c34180a4813d"}],"title":"Stack Data-structure (using Linked List)","type":"question","question":"# Explain programmatically how to implement a Stack data-structure using the concept of Linked List\n\n- Using `Linked-Lists`\n- Last in First Out (LIFO)\n\n## Time complexity\n\n- Lookup - **O(n)**\n- Pop - **O(1)**\n- Push - **O(1)**\n- Peek - **O(1)**\n\n","answer":"# Solution\n- In order to Implement Stack using Linked lists, we will use a singly linked list\n- We will use the same properties of a LinkedList's Node\n\n```javascript\n// Each stack consists of Nodes with 2 properties value, next\nclass Node {\n  constructor(value) {\n    this.value = value;\n    this.next = null;\n  }\n}\n```\n\nNow the Stack Data structure\n\n```javascript\n// Stack Data structure using LL\nclass Stack {\n  constructor() {\n    this.top = null;\n    this.bottom = null;\n    this.length = 0;\n  }\n\n  peek() {\n    return this.top;\n  }\n\n  push(value) {\n    const newNode = new Node(value);\n    if (this.length === 0) {\n      this.top = newNode;\n      this.bottom = newNode;\n    } else {\n      const holdingPointer = this.top;\n      this.top = newNode;\n      this.top.next = holdingPointer;\n    }\n    this.length++;\n    return this;\n  }\n\n  pop() {\n    // If stack is empty\n    if (!this.top) return null;\n    // If stack has only one item\n    if (this.top === this.bottom) this.bottom = null;\n    const holdingPointer = this.top;\n    this.top = this.top.next;\n    this.length--;\n    return holdingPointer;\n  }\n\n  isEmpty() {\n    if (!this.top) return true;\n    else return false;\n  }\n}\n```\n\n## Testing the Stack Data-structure\n\n```javascript\nexport function testStackLL() {\n  const myStack = new Stack();\n\n  myStack.push(\"google\");\n  myStack.push(\"facebook\");\n  myStack.push(\"lynda\");\n\n  console.log(\"Pop: \", myStack.pop());\n  console.log(\"New Peek is: \", myStack.peek());\n}\n```","date":1.566441803832E+12,"__v":0}
{"_id":{"$oid":"5d60ba20cab5080016401ff1"},"tags":[{"$oid":"5d520639aa54c34180a48139"},{"$oid":"5d520585aa54c34180a48133"},{"$oid":"5d520577aa54c34180a48132"}],"groups":[{"$oid":"5d520740aa54c34180a4813e"}],"title":"Custom Hooks","type":"question","question":"# Explain programmatically how you can create a Custom Hook in React\n\n- A custom hook is a function that starts with the word **“use”** and may call other hooks.\n- It uses standard ecmascript / javascript syntax ie., its nothing but a reusable function\n- Only difference is that it should have the prefix - `use` and it makes use of built in hooks in react.\n- [Building Custom Hooks in React](https://www.educative.io/courses/advanced-react-patterns-with-hooks/JYpw3BKPD5J)","answer":"# Solution \\#1 - Reusable Custom hooks\n\nIn the previous article, we wrote a custom function which calls the `useEffect` hook except at mount, we will turn this function into a reusable custom hook called\n\n- _useEffectAfterMount_\n\n\n```javascript\n// useEffectAfterMount.js\nimport { useRef, useEffect } from 'react'\n\nexport default function useEffectAfterMount (cb, deps) {\n  const componentJustMounted = useRef(true);\n  useEffect(() => {\n    if (!componentJustMounted.current) {\n      return cb();\n    }\n    componentJustMounted.current = false\n  }, deps)\n}\n```\n\n---\n\n# Solution \\#2 - Wrapper Custom hooks \n\nCustom hooks can also be application specific. The following custom hook will toggle expanded state in React.\n\nThe `useExpanded` is a application specific custom hook which will handle the logic for the `expanded` state variable, and `useEffectAfterMount` will handle the logic for invoking a callback only after mount.\n\n\nNote that these custom hooks will pretty much use the same logic as the `Expandable` compound component we had written earlier. The difference here will be wrapping these in a custom hook.\n\nHere’s the `useExpanded` custom hook:\n\n\n```javascript\n// useExpanded.js\nimport { useCallback, useMemo, useState } from 'react';\n\nexport default function useExpanded () {\n  const [expanded, setExpanded] = useState(false);\n  const toggle = useCallback(\n    () => setExpanded(prevExpanded => !prevExpanded),\n    []\n  );\n  // Expose the custom function and toggle hook just like a useState hook.\n  const value = useMemo(() => ({ expanded, toggle }), [expanded, toggle]);\n\n  return value;\n}\n```\n\n","date":1.56662019253E+12,"__v":0}
{"_id":{"$oid":"5d60d7907491070016b8e3e8"},"tags":[{"$oid":"5d520639aa54c34180a48139"},{"$oid":"5d520577aa54c34180a48132"},{"$oid":"5d520585aa54c34180a48133"}],"groups":[{"$oid":"5d520740aa54c34180a4813e"}],"title":"Props Collection Pattern","type":"question","question":"# Explain programmatically what is Props Collection Pattern? Also explain what problem statement does this pattern solve?\n\n### A props collection is a collection of “common props” associated with a custom hook or component.\n\n# What's the benefit of using props collection?\n\nWhile defining a reusable component/hook, If it requires some common props, the user will not have to manually pass them\n\nRegardless of the components, you build and who uses them, some things will remain the same for all users of the component.\n\nHow can we know this?\n\n---\n\nWell, consider the Expandable component we’ve worked so hard on.\n\nRegardless of the UI solution the user decides to go for, they’ll always need an onClick handler for the “toggle element”.\n\n```html\nconst { toggle, expanded } = useExpanded()\n// user 1. \n<button onClick={toggle} aria-expanded={expanded}>Click to view awesomeness...</button>\n// user 2. \n<div onClick={toggle} aria-expanded={expanded}> Burn the place down 🔥</div>\n// user 3. \n<img onClick={toggle} aria-expanded={expanded} alt=\"first image in carousel\"/> \n```\n\nNow, that’s two props. - `onClick` & `aria-expanded`\n\nIs there a way we can prevent the users from writing these props every single time? Can we expose some API from within your reusable custom hook or component?\n\nThese are the questions that the props collection pattern answers with a resounding yes!","answer":"# Solution \n\n```javascript\n// we use built in hooks - useCallback, useMemo for better performance\nimport { useCallback, useMemo, useState } from 'react';\n\n\n/* Custom hook - useExpanded, but instead of returning \n * An array of elements - toggle, expanded, it returns the third element\n * togglerProps\n**/\nexport default function useExpanded () {\n  const [expanded, setExpanded] = useState(false);\n  const toggle = useCallback(\n    () => setExpanded(prevExpanded => !prevExpanded),\n    []\n  );\n  // This common props patterns\n  const togglerProps = useMemo(\n    () => ({\n      onClick: toggle,\n      'aria-expanded': expanded\n    }),\n    [toggle, expanded]\n  );\n\n  // This props collection pattern\n  const value = useMemo(() => ({ expanded, toggle, togglerProps }), [\n    expanded,\n    toggle,\n    togglerProps\n  ]);\n\n  return value;\n}\n```\n\n---\n\n# Usage in App.js\n\nNow with the wrapper event handler, instead of calling `toggle` eventHandler for every onClick, we are instead calling - togglerProps\n\n```javascript\nimport React from 'react';\nimport useExpanded from './useExpanded.js';\nimport useEffectAfterMount from './useEffectAfterMount.js';\n\nimport Header from './components/Header';\nimport Icon from './components/Icon';\nimport Body from './components/Body';\n\nimport './App.css';\n\nfunction App () {\n  const { expanded, togglerProps } = useExpanded();\n  return (\n    <div style={{ marginTop: '3rem' }}>\n      <!-- togglerProps which returns event handlers here-->\n      <button {...togglerProps}>Click to view awesomeness...</button>\n      {expanded ? <p>{'😎'.repeat(50)}</p> : null}\n    </div>\n  );\n}\n\nexport default App;\n\n```","date":1.566627728566E+12,"__v":0}
{"_id":{"$oid":"5d60eb407491070016b8e3e9"},"tags":[{"$oid":"5d520639aa54c34180a48139"},{"$oid":"5d520585aa54c34180a48133"},{"$oid":"5d520577aa54c34180a48132"}],"groups":[{"$oid":"5d520740aa54c34180a4813e"}],"title":"Props Getters Pattern","type":"question","question":"# Explain What is Props Getters Pattern\n\n- _Provide main difference between **Props Collection Pattern** & **Props Getters Pattern**_\n- _Show how to invoke **Props Getters pattern**_\n\n---\n\n# Basic Javascript fundamentals Recap\n\nIn JavaScript, all functions are objects. However, functions are built to be more customizable and reusable.\n\nConsider the following:\n\n```javascript\n/**Nothing new here...*/\nconst obj = {name: \"React hooks\"};\nconsole.log(obj);\n```\n\nIf you wanted to create the same object but allow for some level of customization, you could do this:\n\n```javascript\n// this is a function now which RETURNS an object\nconst objCreator = n => ({name:n});\n```\n\n### Reusability\n\nNow, this objCreator function can be called multiple times to create different objects as shown below:\n\n```javascript\nconst objCreator = n => ({name:n})\n\nconst obj1 = objCreator(\"React hooks\")\nconst obj2 = objCreator(\"React hooks mastery\")\nconst obj3 = objCreator(\"React hooks advanced patterns\")\n\nconsole.log(obj1)\nconsole.log(obj2)\nconsole.log(obj3)\n```","answer":"# Why have I chosen to explain this?\n\nBecause this is the difference between the **props collection pattern** and **props getters pattern**.\n\nWhile props collection relies on providing an **object**, props getters **expose functions** that can be invoked to create a collection of props.\n\n```javascript\n// Props collection pattern\n  const togglerProps = useMemo(\n    () => ({\n      onClick: toggle,\n      'aria-expanded': expanded\n    }),\n    [toggle, expanded]\n  )\n\n// Props getters pattern\n  const getTogglerProps = useCallback(\n    () => ({\n      onClick: toggle,\n      'aria-expanded': expanded\n    }),\n    [toggle, expanded]\n  )\n```\n\nInstead of togglerProps, we now create a memoized function, getTogglerProps, that returns the same props collection.\n\nWe’ll expose this via the returned value variable within the useExpanded hook as shown below:\n\n\n```javascript\nexport default function useExpanded () {\n  ...\n  const getTogglerProps = useCallback(\n    () => ({\n      onClick: toggle,\n      'aria-expanded': expanded\n    }),\n    [toggle, expanded]\n  )\n  // look here 👇\n  const value = useMemo(() => ({ expanded, toggle, getTogglerProps }), [\n    expanded,\n    toggle,\n    getTogglerProps\n  ])\n  return value\n}\n```\n\n---\n\n# How to invoke Props Getters Pattern\n\nSimple, Just like invoking any other function\n\n\n```javascript\nimport React from 'react';\nimport useExpanded from './useExpanded.js';\nimport useEffectAfterMount from './useEffectAfterMount.js';\n\nimport Header from './components/Header';\nimport Icon from './components/Icon';\nimport Body from './components/Body';\n\nimport 'App.css';\n\nfunction App () {\n  const { expanded, getTogglerProps } = useExpanded()\n  return (\n    <div style={{ marginTop: '3rem' }}>\n    <button {...getTogglerProps()}>Click to view awesomeness...</button>      {expanded ? <p>{'😎'.repeat(50)}</p> : null}\n    </div>\n  );\n}\n\nexport default App;\n```","date":1.566632987924E+12,"__v":0}
{"_id":{"$oid":"5d622351b602da0016df8f66"},"tags":[{"$oid":"5d520577aa54c34180a48132"},{"$oid":"5d520585aa54c34180a48133"},{"$oid":"5d5205c1aa54c34180a48136"}],"groups":[{"$oid":"5d52068baa54c34180a4813c"}],"title":"Remove Duplicates from a Linked List","type":"question","question":"# Explain programmatically how to remove duplicates from a LinkedList data-structures\n\n- Explain Brute force approach\n- Provide a Linear approach\n- Compare Time space complexity of both the approaches\n\n- [Linked to both solution - Educative.io](https://www.educative.io/courses/data-structures-in-javascript-an-interview-refresher/7An88W8MAoO)","answer":"# Solution \\#1\n\n### Use Brute force algorithm to get an item and then again search through all the nodes in the LinkedList\n\n### Time Complexity O(n^2) - Quadratic\n\n```javascript\n//Access HeadNode => list.getHead()\n//Acess Length => list.length;\n//Check if list is empty => list.isEmpty()\n//Insert at head => list.insertAtHead(value)\n//Delete at head => list.deleteAtHead()\n//Insert at tail => list.insertAtTail(value)\n//Search for element => list.search(value)\n//Delete by value => list.deleteVal(value)\n//Node class { data ; Node nextElement;}\nfunction removeDuplicates(list){\n  if (list.isEmpty()){\n    return null;\n  }\n  \n  //If list only has one node, leave it unchanged\n  if(list.getHead().nextElement.nextElement == null){\n    return list;\n  }\n  \n  let outerNode = list.getHead().nextElement;\n  while(outerNode!=null){\n    let innerNode = outerNode; // Iterator for the inner loop\n    while(innerNode!=null){\n      if(innerNode.nextElement!=null && outerNode.data == innerNode.nextElement.data){ //Duplicate found ahead\n        innerNode.nextElement = innerNode.nextElement.nextElement; // Remove duplicate\n      }\n      else{\n        innerNode = innerNode.nextElement; // Otherwise simply iterate ahead\n      }\n    }\n    outerNode = outerNode.nextElement;\n  }\n  \n  return list;\n}\n```\n\n---\n\n# Solution \\#2\n\n### Simple Solution with **O(2n)** Time complexity and **O(n)** Space.\n\n- Use a Set to store all the values as you iterate through the LinkedList\n- Iterate through the set again to now store the unique values back into a new LinkedList\n- **NOTE:** _For some reason, had to use **insertAtTail** to properly store the data_\n\n```javascript\n/**\n* Access HeadNode => list.getHead()\n* Access Length => list.length;\n* Check if list is empty => list.isEmpty()\n* Insert at head => list.insertAtHead(value)\n* Delete at head => list.deleteAtHead()\n* Insert at tail => list.insertAtTail(value)\n* Search for element => list.search(value)\n* Delete by value => list.deleteVal(value)\n* Node class { data ; Node nextElement;}\n*/\nfunction removeDuplicates(list) {\n  // Edge case: check if the list is empty\n  if (list.isEmpty()) return null;\n  // create a set data-structure to store the results \n  const uniqueItems = new Set();\n  let currNode = list.getHead().nextElement;\n  while(currNode) {    \n    uniqueItems.add(currNode.data);\n    currNode = currNode.nextElement;\n  }\n\n  // now that the results are stored, iterate through the set to get unique values\n  // store those results into a new LinkedList\n  const result = Array.from(uniqueItems);  \n  let newList = new LinkedList();\n  for (let val of result) {    \n    newList.insertAtTail(val);\n  }\n  return newList; //return the updated list here\n}\n```\n\n---\n\n# Testing\n\n```javascript\nlet list = new LinkedList();\nlist.insertAtHead(7);\nlist.insertAtHead(7);\nlist.insertAtHead(7);\nlist.insertAtHead(22);\nlist.insertAtHead(14);\nlist.insertAtHead(21);\nlist.insertAtHead(14);\nlist.insertAtHead(7);\n\n\nlist.printList();\nremoveDuplicates(list);\nlist.printList();\n```","date":1.566712657906E+12,"__v":0}
{"_id":{"$oid":"5d62963767d2da0016c5474d"},"tags":[{"$oid":"5d520577aa54c34180a48132"},{"$oid":"5d520585aa54c34180a48133"},{"$oid":"5d520639aa54c34180a48139"},{"$oid":"5d5205c1aa54c34180a48136"}],"groups":[{"$oid":"5d520740aa54c34180a4813e"}],"title":"Handling Props with the Same Property Name","type":"question","question":"## _Explain programmatically how you can allow the user to provide their own custom event handler and still support internal event handler for the same event name as part of your component_ ?","answer":"# Solution \\#1 - Invoking Both User's & Internal onClick\n\n```javascript\nimport { useCallback, useMemo, useState } from 'react'\n\n// Handy reusable function which takes in an array of functions and their array of arguments\nconst callFunctionsInSequence = (...fns) => (...args) => {\n  console.log(args)\n  return fns.forEach(fn => fn && fn(...args))\n}\n\nexport default function useExpanded () {\n  const [expanded, setExpanded] = useState(false)\n  const toggle = useCallback(\n    () => setExpanded(prevExpanded => !prevExpanded),\n    []\n  )\n\n  const getTogglerProps = useCallback(\n      ({ onClick, ...props } = {}) => ({\n        'aria-expanded': expanded,\n        onClick: callFunctionsInSequence(toggle, onClick),\n        ...props\n      }),\n      [toggle, expanded]\n    )\n\n  const value = useMemo(() => ({ expanded, toggle, getTogglerProps }), [\n    expanded,\n    toggle,\n    getTogglerProps\n  ])\n  \n  return value\n}\n```\n\nNow instead of returning an object with the `onClick` set to a single function, i.e, our internal `toggle` function or the user’s `onClick`, we could set the `onClick` property to a function, `callFunctionsInSequence`, that invokes both functions - our `toggle` function and the user’s `onClick`!\n\n# How callFunctionsInSequence Works\n\nNow back to the returned function from callFunctionsInSequence:\n\n```javascript\n(...args) => fns.forEach(fn && fn(...args))\n```\n\nThe function receives whatever arguments are passed into the function, (...args), and invokes all function parameters with these arguments if the function is not false. fn && fn(...args).\n\nIn this case, the argument received by the function will be the event object and it will be passed down to both toggle and onClick as arguments.\n\n---","date":1.566781060523E+12,"__v":0}
{"_id":{"$oid":"5d6350bda0b4970016ab74ff"},"tags":[{"$oid":"5d5205c1aa54c34180a48136"}],"groups":[{"$oid":"5d52068baa54c34180a4813c"}],"title":"Union & Intersection - Definitions","type":"question","question":"# Explain with examples the difference between Union & Intersection in data sets (or in a linked list)\n\n- Provide Examples\n- Union\n- Intersection","answer":"# Union\n\nGiven two lists A and B, the union is the list that contains elements or objects that belong to either A or to B or to both.\n\n## Sample Input\n\n```javascript\nlist1 = 10->20->80->60\nlist2 = 15->20->30->60->45\n```\n\n## Output - using Union\n\n```javascript\nunion = 10->20->80->60->15->30->45\n```\n\n---\n\n# Intersection\n\nGiven two lists A and B, the intersection is the largest list which contains all the elements that are common to both the sets.\n\n## Sample Input\n\n```javascript\nlist1 = 10->20->80->60\nlist2 = 15->20->30->60->45\n```\n\n## Output - using Intersection\n\n```javascript\nintersection = 20->60\n```\n\n---\n\n**NOTE:** _Both Union & Intersection algorithms will require the logic to separate out the commonly occurring elements in both lists._","date":1.566789821536E+12,"__v":0}
{"_id":{"$oid":"5d6353e9a0b4970016ab7500"},"tags":[{"$oid":"5d520577aa54c34180a48132"},{"$oid":"5d520585aa54c34180a48133"},{"$oid":"5d5205c1aa54c34180a48136"}],"groups":[{"$oid":"5d52068baa54c34180a4813c"}],"title":"Union of two Linked Lists - Code","type":"question","question":"# Write the algorithm to find the union of 2 linked lists\n\n- Provide Solution approach\n- Evaluate Time Space complexity","answer":"# Solution\n\nNothing to tricky going on here. We traverse to the tail of the first list and link it to the first node of the second list. All we have to do now is remove duplicates from the combined list.\n\nAnother approach would be to add all unique elements to a set. It would also work in the same time complexity, assuming that hashing is O(1) on average.\n\n## Time-space complexity\n\n- **O(m + n)** where **m** is the size of the first list and **n** is the size of the second list.\n\n## Code\n\n```javascript\n//Returns a list containing the union of list1 and list2  \nfunction union(list1,list2){\n  //Return other List if one of them is empty\n  if (list1.isEmpty()){\n    return list2;\n  }\n  else if (list2.isEmpty()){\n    return list1;\n  }\n  \n  let start = list1.getHead().nextElement;\n  \n  //Traverse the first list till the tail\n  while (start.nextElement != null){\n    start = start.nextElement;\n  }\n  \n  //Link last element of first list to the first element of second list\n  start.nextElement = list2.getHead().nextElement;\n  list1.removeDuplicates();\n////\n  return list1;\n}\n\nlet ulist1 = new LinkedList();\nlet ulist2 = new LinkedList();\nulist1.insertAtHead(8);\nulist1.insertAtHead(22);\nulist1.insertAtHead(15);\nulist1.printList();\n\nulist2.insertAtHead(21);\nulist2.insertAtHead(14);\nulist2.insertAtHead(7);\nulist2.printList();\n\nunion(ulist1, ulist2);\nulist1.printList();\n```","date":1.566790633231E+12,"__v":0}
{"_id":{"$oid":"5d6354efa0b4970016ab7501"},"tags":[{"$oid":"5d520577aa54c34180a48132"},{"$oid":"5d520585aa54c34180a48133"},{"$oid":"5d5205c1aa54c34180a48136"}],"groups":[{"$oid":"5d52068baa54c34180a4813c"}],"title":"Intersection of two Linked Lists - Code","type":"question","question":"# Explain the Intersection of two Linked Lists with a solution approach and code\n\n- Solution Approach\n- Code\n- Evaluate for Time-Space complexity","answer":"# Solution\n\nYou are already familiar with this approach. We simply create a set which contains all the unique elements from list1. If anyone of these values is found in list2, it is added to the result linked list. Since we insert at the head, insert works in constant time.\n\n## Time-space complexity\n\n- **O(m + n)** where **m** is the size of the first list and **n** is the size of the second list.\n\n```javascript\n//Returns a list containing the intersection of list1 and list2  \nfunction intersection(list1,list2){\n  let result =new  LinkedList();\n  let visitedNodes = []; // Keep track of all the visited nodes\n  let currentNode = list1.getHead().nextElement;\n  \n  //Traversing list1 and adding all unique nodes into the hash set\n  while (currentNode != null){\n    let value = currentNode.data;\n    if (!(visitedNodes.includes(value))){\n      visitedNodes.push(value); //Visiting currentNode for first time\n    }\n    currentNode = currentNode.nextElement;\n  }\n  \n  let start = list2.getHead().nextElement;\n  \n  //console.log(visitedNodes);\n  \n  //Traversing list 2\n  //Nodes which are already present in visitedNodes are added to result\n  while (start != null){\n    let val = start.data;\n    if (visitedNodes.includes(val)){\n      result.insertAtTail(val);\n    }\n    start = start.nextElement;\n  }\n  result.removeDuplicates(); \n  return result;\n}\n\nlet ulist1 = new LinkedList();\nlet ulist2 = new LinkedList();\nulist1.insertAtHead(8);\nulist1.insertAtHead(22);\nulist1.insertAtHead(15);\nulist1.insertAtHead(14);\nulist1.printList();\n\nulist2.insertAtHead(21);\nulist2.insertAtHead(14);\nulist2.insertAtHead(7);\nulist2.printList();\n\nres=intersection(ulist1, ulist2);\nres.printList();\n```","date":1.566790895519E+12,"__v":0}
{"_id":{"$oid":"5d64fedba2bf200016bf5c94"},"tags":[{"$oid":"5d622529b602da0016df8f67"},{"$oid":"5d520653aa54c34180a4813a"},{"$oid":"5d5691738806320016112ee2"}],"groups":[{"$oid":"5d54e6e53b82230016f596e4"}],"title":"TailWind CSS with Angular","type":"question","question":"## _Explain how to integrate Tailwind CSS with Angular (v8.x and above)_\n\n- Using a 3rd Party Plugin [ng-tailwindcss](https://github.com/tehpsalmist/ng-tailwindcss)\n- Integrating with angular-cli.json\n\n### Important Link\n\n- [Integrate TailwindCSS with Angular](https://www.youtube.com/watch?v=qmxo2NntTX8)\n\n","answer":"# Approach\n\n## Important Points to consider...\n\n1. **NOTE:** _For Angular to support Tailwind CSS, Your Angular CLI application should be configured to support_ **default CSS styling configuration**\n1. Meaning, You need to create an angular app with default CSS pre-processing (no use of scss, sass, less pre-processors).\n1. **Angular v6.x** and above no longer supports **ng-eject** functionality\n1. This would mean, you cannot configure Tailwind CSS as part of Webpack by ejecting **webpack.config.js** from Angular project\n\n1. Before creating an angular application, you need to have the following 3rd party plugin installed in your system. [Refer here](https://github.com/tehpsalmist/ng-tailwindcss)\n\n```bash\n# install Tailwind plugin for angular globally. this is a one time setup\nnpm install -g ng-tailwindcss\n```\n\n6. Create an Angular Application\n\n```bash\n# create a simple application - NOTE do not include any pre-processor support\nng new my-app\n```\n\n---\n\n\n7. Check your **angular.json** file. It should have basic CSS support as mentioned below:\n\n**NOTE:** _Ignore this chunk of code below. this gets auto generated as part of your angular-cli configuration. This is just to cross check your **angular.json** with the code snippet below._\n\n```json\n{\n  \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n  \"version\": 1,\n  \"newProjectRoot\": \"projects\",\n  \"projects\": {\n    \"ng2-rtc-stats-poc\": {\n      \"projectType\": \"application\",\n      \"schematics\": {\n        // only CSS mentioned below\n        \"@schematics/angular:component\": {\n          \"style\": \"css\"\n        }\n      },\n      \"root\": \"\",\n      \"sourceRoot\": \"src\",\n      \"prefix\": \"app\",\n      \"architect\": {\n        \"build\": {\n          \"builder\": \"@angular-devkit/build-angular:browser\",\n          \"options\": {\n            \"outputPath\": \"dist/ng2-rtc-stats-poc\",\n            \"index\": \"src/index.html\",\n            \"main\": \"src/main.ts\",\n            \"polyfills\": \"src/polyfills.ts\",\n            \"tsConfig\": \"tsconfig.app.json\",\n            \"aot\": false,\n            \"assets\": [\n              \"src/favicon.ico\",\n              \"src/assets\" // your main.css is part of assets folder\n            ],\n            \"styles\": [\n              \"src/styles.css\" // It should watch for src/styles.css\n            ],\n            \"scripts\": []\n          },\n          \"configurations\": {\n            \"production\": {\n              \"fileReplacements\": [\n                {\n                  \"replace\": \"src/environments/environment.ts\",\n                  \"with\": \"src/environments/environment.prod.ts\"\n                }\n              ],\n              \"optimization\": true,\n              \"outputHashing\": \"all\",\n              \"sourceMap\": false,\n              \"extractCss\": true,\n              \"namedChunks\": false,\n              \"aot\": true,\n              \"extractLicenses\": true,\n              \"vendorChunk\": false,\n              \"buildOptimizer\": true,\n              \"budgets\": [\n                {\n                  \"type\": \"initial\",\n                  \"maximumWarning\": \"2mb\",\n                  \"maximumError\": \"5mb\"\n                },\n                {\n                  \"type\": \"anyComponentStyle\",\n                  \"maximumWarning\": \"6kb\",\n                  \"maximumError\": \"10kb\"\n                }\n              ]\n            }\n          }\n        },\n        \"serve\": {\n          \"builder\": \"@angular-devkit/build-angular:dev-server\",\n          \"options\": {\n            \"browserTarget\": \"ng2-rtc-stats-poc:build\"\n          },\n          \"configurations\": {\n            \"production\": {\n              \"browserTarget\": \"ng2-rtc-stats-poc:build:production\"\n            }\n          }\n        },\n        \"extract-i18n\": {\n          \"builder\": \"@angular-devkit/build-angular:extract-i18n\",\n          \"options\": {\n            \"browserTarget\": \"ng2-rtc-stats-poc:build\"\n          }\n        },\n        \"test\": {\n          \"builder\": \"@angular-devkit/build-angular:karma\",\n          \"options\": {\n            \"main\": \"src/test.ts\",\n            \"polyfills\": \"src/polyfills.ts\",\n            \"tsConfig\": \"tsconfig.spec.json\",\n            \"karmaConfig\": \"karma.conf.js\",\n            \"assets\": [\n              \"src/favicon.ico\",\n              \"src/assets\" // your main.css is part of assets folder\n            ],\n            \"styles\": [\n              \"src/styles.css\" // It should watch for src/styles.css\n            ],\n            \"scripts\": []\n          }\n        },\n        \"lint\": {\n          \"builder\": \"@angular-devkit/build-angular:tslint\",\n          \"options\": {\n            \"tsConfig\": [\n              \"tsconfig.app.json\",\n              \"tsconfig.spec.json\",\n              \"e2e/tsconfig.json\"\n            ],\n            \"exclude\": [\n              \"**/node_modules/**\"\n            ]\n          }\n        },\n        \"e2e\": {\n          \"builder\": \"@angular-devkit/build-angular:protractor\",\n          \"options\": {\n            \"protractorConfig\": \"e2e/protractor.conf.js\",\n            \"devServerTarget\": \"ng2-rtc-stats-poc:serve\"\n          },\n          \"configurations\": {\n            \"production\": {\n              \"devServerTarget\": \"ng2-rtc-stats-poc:serve:production\"\n            }\n          }\n        }\n      }\n    }},\n  \"defaultProject\": \"ng2-rtc-stats-poc\"\n}\n```\n\n---\n\n8. Navigate inside your angular application and add the following library as a Dev dependency\n\n```bash\n# from your application root folder, install this plugin\nnpm i tailwindcss -D\n```\n\n\n9. Run the following command, to generate **tailwind.config.js** file\n\n```bash\nnpx tailwind init # use --full if you want to see all the default configurations\n```\n\n10. Your **tailwind.config.js** will look like below:\n\n```javascript\nmodule.exports = {\n  theme: {\n    container: {\n      center: true,\n      padding: '2rem'\n    },\n    extend: {}\n  },\n  variants: {},\n  plugins: []\n}\n```\n\n11. Run the following command to generate **ng-tailwind.js** file\n\n```bash\nngtw configure # creates ng-tailwind.js in the root of your project\n```\n\n12. Have the following configuration in your **ng-tailwind.js** file\n\n```javascript\nmodule.exports = {\n  // Tailwind Paths\n  configJS: 'tailwind.config.js',\n  sourceCSS: 'src/assets/css/main.css',\n  outputCSS: 'src/styles.css',\n  // Sass\n  sass: false,\n  // PurgeCSS Settings\n  purge: false,\n  keyframes: false,\n  fontFace: false,\n  rejected: false,\n  whitelist: [],\n  whitelistPatterns: [],\n  whitelistPatternsChildren: [],\n  extensions: [\n    '.ts',\n    '.html',\n    '.js'\n  ],\n  extractors: [],\n  content: []\n}\n```\n\n13. As part of the configuration above, You need to create a new file claled **main.css** under `src/assets/css` path.\n\n```bash\necho \"CSS goes here\" > src/assets/css/main.css # create a main.css in the path specified.\n```\n\n14. **FINALLY** you are good to go, run **ngtw scripts** and then **npm start**\n\n\n\n\n\n\n\n\n\n\n\n","date":1.566899931577E+12,"__v":0}
{"_id":{"$oid":"5d6533ae2b098f0016f4ba6c"},"tags":[{"$oid":"5d520577aa54c34180a48132"},{"$oid":"5d520585aa54c34180a48133"},{"$oid":"5d65340d2b098f0016f4ba6d"}],"groups":[{"$oid":"5d54e6e53b82230016f596e4"}],"title":"Tympanus Sidebar Effects","type":"article","question":"## Useful Sidebar Effects\n- [Tympanus Sidebar Effects](https://tympanus.net/Development/SidebarTransitions/)","answer":"","date":1.566913592653E+12,"__v":0}
{"_id":{"$oid":"5d6577f33007cd0016e87f0f"},"tags":[{"$oid":"5d6408f22775780016ecf972"},{"$oid":"5d5591fd3e078b001669cfcb"}],"groups":[{"$oid":"5d6408cf2775780016ecf971"}],"title":"UX - Project Description / Quotation","type":"question","question":"# Briefly describe all the essentials of a UI / UX Project Description\n\n- [Udemy Lesson](https://www.udemy.com/course/ui-ux-web-design-using-adobe-xd/learn/lecture/13640790?start=0#overview)","answer":"# Project Description\n\nThe Project Description should contain the following\n\n- **Project Name**\n- **Project Description**: High level overview of the application that you are going to be designing\n- **Who is this for? (Audience)**: Mention the Users persona who would be using this app. Eg: Software Trainers\n- **Feature List**: List of features available\n- **Competitors & Product References**: Link and list of competition apps / websites or reference sites\n- **Deliverables**: Outcome of this project\n  - Wireframes\n  - High Fidelity Prototype\n  - Usability testing\n  - UI assets for developers\n- **Cost**: Quotation\n- **Timeline / Deadline**:","date":1.566930931603E+12,"__v":0}
{"_id":{"$oid":"5d6a1d62d9e30e00169183e0"},"tags":[{"$oid":"5d520577aa54c34180a48132"},{"$oid":"5d520585aa54c34180a48133"},{"$oid":"5d5205c1aa54c34180a48136"}],"groups":[{"$oid":"5d52068baa54c34180a4813c"}],"title":"Return the Nth Node for the End","type":"question","question":"# Explain programmatically how to find the nth node of a Singly Linked list\n\n- Return the Nth Node for the End\n- Calculate for time space complexity\n","answer":"# Solution\n\n## Two pointers\n\nThis is the more efficient approach, although it is not an unfamiliar one. Here’s the flow of the algorithm:\n\n- Check if n is in the bounds of the list\n- Move endNode forward n times, while nthNode stays at the head\n- Move pointers simultaneously\n- When endNode reaches the end, nthNode is one the Nth position from the end\n- Return the node’s value\n- This algorithm also works in O(n) time complexity, but it still adopts the policy of one iteration over the whole list. We do not need to keep track of the length of the list.\n\n## Time Complexity\nA single linear iteration is performed which means that time complexity is O(n).\n\n```javascript\nfunction findNth(list, n){\n  let nthNode=list.getHead(); //This iterator will reach the nth node\n  let endNode=list.getHead(); //This iterator will reach the end\n  \n  let count=0;\n  if(!list.isEmpty()){\n    while(count<n){\n      if(endNode==null){\n        console.log(\"Out of bounds\");\n        return -1;\n      }\n      endNode=endNode.nextElement;\n      count++;\n    }\n  }\n  while(endNode!=null){\n    endNode=endNode.nextElement;\n    nthNode=nthNode.nextElement;\n  }\n  if (nthNode!=null){\n    return nthNode.data;\n  }\n  else{\n   return -1; \n  }\n}\n```\n\n## Testing\n\n\n```javascript\nlet l1=new LinkedList();\nl1.insertAtHead(23);\nl1.insertAtHead(76);\nl1.insertAtHead(49);\nl1.insertAtHead(54);\nl1.insertAtHead(22);\n\nfor(i=1; i<5; i++){\n  console.log(findNth(l1, i));\n}\nconsole.log(findNth(l1, 100));\n\n```","date":1.567235426956E+12,"__v":0}
{"_id":{"$oid":"5d6bdb462a77330016c74e2e"},"tags":[{"$oid":"5d6bdb962a77330016c74e2f"},{"$oid":"5d520585aa54c34180a48133"},{"$oid":"5d520639aa54c34180a48139"}],"groups":[{"$oid":"5d520740aa54c34180a4813e"}],"title":"Integrate Typescript into React Application","type":"article","question":"# Integrating Typescript into React\n\n- First you need to have a working scaffolding application for React `create-react-app` version 2.1.1 or higher\n- Create a project using create-react-app\n\n```bash\n# Use the cli to create a project\ncreate-react-app my-app\ncd my-app\n```\n- Now, inside the project, you just need to add the following libraries as dependencies\n\n```bash\n# creates project dependencies\nnpm install --save typescript @types/node @types/react-dom @types/jest\n```\n- You need to change all your `.js` or `.jsx` file extensions to `.tsx` _(including changing index.js to index.tsx)_\n- Once installed, simple run - `npm start`\n- Application will auto detect typescript and compile and run !!","answer":"","date":1.56734971918E+12,"__v":0}
{"_id":{"$oid":"5d6bde352a77330016c74e30"},"tags":[{"$oid":"5d520585aa54c34180a48133"},{"$oid":"5d6bdb962a77330016c74e2f"}],"groups":[{"$oid":"5d5206aaaa54c34180a4813d"}],"title":"Tuples in Typescript","type":"question","question":"# Explain programmatically what is a Tuple\n\n- Explain the difference between a Tuple and a List\n- Context of a Tuple in Typescript\n- [All About Tuples and their usage in Typescript 3.x](https://auth0.com/blog/typescript-3-exploring-tuples-the-unknown-type/#TypeScript-TupleWare)","answer":"# Answer\n\nBy definition, A `Tuple` is a data-structure consisting of multiple parts\n\n### The Key Difference between a List and a Tuple. \n- The main difference between lists and tuples is the fact that lists are mutable whereas tuples are immutable. \n\n### Context of a Tuple in Typescript\n\nIn Typescript, when you datatype define a list / array, it would always have a single dataype\nFor eg:\n\n```javascript\nconst list: string[] = ['Pramod', 'Shwetha']; //list of type string\n```\n\nBut with a Tuple, you can specify more than one datatype\n\n```javascript\nconst aTuple: [string, number] = ['Pramod', 32]; // list can support more than one datatype\n```\n\nA tuple is a TypeScript type that works like an array with some special considerations:\n\n- The number of elements of the `tuple` is fixed.\n- The type of the elements is known.\n- The type of the elements of the `tuple` need not be the same.\n- Order of type declarations and their corresponding value cannot be interchanged.\n\nFor example, through a tuple, we can represent a value as a pair of a string and a boolean. Let's head to index.ts and populate it with the following code:\n\n```javascript\n// Declare the tuple\nlet option: [string, boolean];\n\n// Correctly initialize it\noption = [\"uppercase\", true];\n```\n\nIf we change value of option to [true, \"uppercase\"], we'll get an error:\n\n```javascript\n// Declare the tuple\nlet option: [string, boolean];\n\n// Correctly initialize it\noption = [\"uppercase\", true];\n\n/** Incorrect value order\n* Type 'true' is not assignable to type 'string'.\n* Type 'string' is not assignable to type 'boolean'.\n*/\noption = [true, \"uppercase\"];\n```","date":1.570458177413E+12,"__v":0}
{"_id":{"$oid":"5d6bf0702d63b3001655d525"},"tags":[{"$oid":"5d6bdb962a77330016c74e2f"},{"$oid":"5d520639aa54c34180a48139"}],"groups":[{"$oid":"5d520740aa54c34180a4813e"}],"title":"Functional Component - Using Typescript (simple)","type":"question","question":"# Explain programmatically how to include Typings in React Function / Stateless component\n\n- Provide Example\n- Provide Usage\n- [Link](https://www.linkedin.com/learning/react-using-typescript/functional-stateless-component-syntax)","answer":"# Solution\n\nThe below provides a simple example of a Functional component which accepts a prop called `message`\n\n## Reusable Component\n\n> Message.tsx\n\n```javascript\nimport React from 'react';\n\nconst Message = (props: {message: string}): JSX.Element => {\n    return (\n        <p>{props.message}</p>\n    );\n}\n\nexport default Message;\n```\n\n## Using the Message component in main App\n\n> App.tsx\n\n```javascript\nimport React from 'react';\nimport Message from './component/Message';\nimport logo from './logo.svg';\nimport './App.css';\n\nconst App = () => {\n  let firstName: string[] = ['Pramod'];\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Message message={`This is a simple message`}/>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n```","date":1.567386412959E+12,"__v":0}
{"_id":{"$oid":"5d70c747873769001644c3ff"},"tags":[{"$oid":"5d520639aa54c34180a48139"}],"groups":[{"$oid":"5d520740aa54c34180a4813e"}],"title":"How does React JS work ?","type":"question","question":"# Explain How React Works / How does Virtual-DOM in React work?\n\n- [medium article](https://medium.com/@vigowebs/frequently-asked-react-js-interview-questions-and-answers-36f3dd99f486)\n\n## Answer\n\n- React creates a `virtual DOM`. When state changes in a component it firstly runs a “diffing” algorithm, which identifies what has changed in the virtual DOM. \n- The second step is `reconciliation`, where it updates the DOM with the results of diff.\n\n- The HTML DOM is always tree-structured — which is allowed by the structure of HTML document. \n- The DOM trees are huge nowadays because of large apps. Since we are more and more pushed towards dynamic web apps (Single Page Applications — SPAs), we need to modify the DOM tree incessantly and a lot. And this is a real performance and development pain.\n\n- The Virtual DOM is an abstraction of the HTML DOM. \n- It is lightweight and detached from the browser-specific implementation details.\n- It is not invented by React but it uses it and provides it for free. \n- ReactElements lives in the virtual DOM. They make the basic nodes here. Once we defined the elements, \n- ReactElements get rendered into the `\"real\"` DOM.\n- Whenever a ReactComponent is changing the `state`, `diff` algorithm in React runs and identifies what has changed. \n- And then it updates the DOM with the results of diff. The point is - it’s done faster than it would be in the regular DOM.","answer":"# Explain what is JSX\n\n- JSX is a syntax extension to JavaScript and comes with the full power of JavaScript. \n- JSX produces React “elements”. \n- You can embed any JavaScript expression in JSX by wrapping it in curly braces. After compilation, JSX expressions become regular JavaScript objects. \n- This means that you can use JSX inside of if statements and for loops, assign it to variables, accept it as arguments, and return it from functions. \n- Even though React does not require JSX, it is the recommended way of describing our UI in React app.","date":1.56767213546E+12,"__v":0}
{"_id":{"$oid":"5d70c823873769001644c400"},"tags":[{"$oid":"5d520639aa54c34180a48139"}],"groups":[{"$oid":"5d520740aa54c34180a4813e"}],"title":"React vs React-DOM","type":"question","question":"# What is ReactDOM and what is the difference between ReactDOM and React?\n\n- Prior to `v0.14`, all `ReactDO`M functionality was part of `React`. But later, React and ReactDOM were split into two different libraries.\n- As the name implies, ReactDOM is the glue between React and the DOM. Often, we will only use it for one single thing: mounting with ReactDOM. \n- Another useful feature of ReactDOM is `ReactDOM.findDOMNode()` which we can use to gain direct access to a `DOM element`.\n- For everything else, there’s React. We use React to define and create our elements, for lifecycle hooks, etc. i.e. the guts of a React application.","answer":"","date":1.567672355474E+12,"__v":0}
{"_id":{"$oid":"5d70cc25873769001644c401"},"tags":[{"$oid":"5d520639aa54c34180a48139"}],"groups":[{"$oid":"5d520740aa54c34180a4813e"}],"title":"State vs Props in React","type":"question","question":"# Differentiate state and props in React\n\n- The state is a data structure that starts with a default value when a Component mounts. \n\n- State may be mutated across time, mostly as a result of user events.\n\n- Props (short for properties) are a Component’s configuration. \n\n- Props are how components talk to each other. \n\n- They are received from the above component and immutable as far as the Component receiving them is concerned. \n\n- A Component cannot change its props, but it is responsible for putting together the props of its child Components. \n\n- Props do not have to just be data — callback functions may be passed in as props.\n\n- There is also the case that we can have default props so that props are set even if a parent component doesn’t pass props down.\n\n## Props and State do similar things but are used in different ways.\n\n- The majority of our components will probably be stateless.\n \n- Props are used to pass data from parent to child or by the component itself. They are immutable and thus will not be changed. \n\n- The state is used for mutable data, or data that will change. This is particularly useful for user input.","answer":"","date":1.567673381566E+12,"__v":0}
{"_id":{"$oid":"5d70d71f7898d80016697242"},"tags":[{"$oid":"5d520653aa54c34180a4813a"}],"groups":[{"$oid":"5d52074caa54c34180a4813f"}],"title":"Autofocus input field in Angular","type":"question","question":"# Explain how to autofocus on a button when the view has been loaded\n\n- [Youtube Video link](https://www.youtube.com/watch?v=uwHE67T8NfM)\n- Explain the working of `@ViewChild` annotation","answer":"# Solution\n\n> - Component\n\n```javascript\nimport { Component, OnInit, ViewChild, AfterViewInit, Renderer } from '@angular/core';\n\n@Component({\n  selector: 'app-custom',\n  templateUrl: './custom.component.html',\n  styleUrls: ['./custom.component.css']\n})\nexport class CustomComponent implements OnInit, AfterViewInit {\n  @ViewChild('meetingInput', {static: false}) meetingInput;\n\n  meeting: string;\n\n  constructor(private renderer: Renderer) {\n    this.meeting = '';\n  }\n\n  joinMeeting (value) {\n    this.meeting = value;    \n  }\n\n  ngOnInit() {\n\n  }\n\n  ngAfterViewInit() {\n    //focus on meeting Input as soon as the page loads\n    this.renderer.invokeElementMethod(this.meetingInput.nativeElement, 'focus');\n  }\n\n}\n\n```\n\n> - View\n\n```html\n<input #meetingInput\n            class=\"bg-white \n            focus:outline-none \n            focus:shadow-outline \n            focus:bg-blue-100\n            border \n            border-gray-300 \n            rounded-lg \n            py-2 \n            px-4 \n            block \n            w-full \n            appearance-none \n            leading-normal\" \n            type=\"Meeting ID\"            \n            placeholder=\"m1234\"\n            [(ngModel)]=\"meeting\"/>\n```","date":1.567676191518E+12,"__v":0}
{"_id":{"$oid":"5d71d70e4294280016579052"},"tags":[{"$oid":"5d520639aa54c34180a48139"}],"groups":[{"$oid":"5d520740aa54c34180a4813e"}],"title":"React Context API","type":"question","question":"# Explain What is a Context API in React ?\n\n- Provide Examples\n\n- When to use the Context API\n\n- Code snippets\n\n- [Lynda Course](https://www.linkedin.com/learning/react-context-api-development/introduction-to-the-context-api)\n\n","answer":"# Answer\n\nThe Context API is a component structure provided by the React framework, which enables us to share specific forms of data across all levels of the application. It's aimed at solving the problem of prop drilling.\n\n- Component structure API\n\n- Child components within the Context can share their prop values directly\n\n- Solves Prop drilling (top down approach)\n\n- Available for both Stateful (Class) Components as well as Functional Components (**useContext** hook)\n\n![Context API](https://cmichel.io/static/5088656af004c68bc31df9e3990e0340/c31c2/react-context-vs-hoc.png)\n\n---\n\n## When to use Context API ?\n\n- When you need to share global data across components\n\n- You donot use the context if you simple want to pass the props from Parent to Child component\n\n---\n\n## Create a simple Context API\n\nTo create a context, we make use of `React.createContext()` method\n\n```javascript\nconst UserContext = React.createContext(); // Create a component UserContext \n```\n\nNow the Component created as two child components\n\n- **Provider** : Provides the data to its children component\n\n```html\n<UserContext.Provider value = {name: `Pramod`}>\n......\n</UserContext.Provider>\n```\n\n- **Consumer** : \n\n```javascript\nconst consumerObj = UserContext.Consumer;\n```\n\n---\n\n## Practical use of Context API in React\n\nPractically, we only export the `Provider` child component and the `Context` object as part of a Higher Order Component called - `AppProvider`\n\n- We wrap the AppProvider as the main Parent component in our React App\n- All structural / Stateful components, will get this value as part of their context object in the constructor\n- All Functional components can make use of the AppContext using the `useContext` hook\n\n\n```javascript\n/**\n * PAJ - Creating a Global Shared State using Context API\n * state defined in this AppProvider will be used throughout the context of our application\n */\nimport React, { Component } from 'react';\nexport const AppContext = React.createContext();\n\nexport class AppProvider extends Component {\n    constructor() {\n        super();\n        this.state = {            \n            version:'3.0.1',            \n            title:'Quest App',\n            themePalette:'light',\n            isHeaderSearch: true,\n            questionContent: '',\n            answerContent: '',\n            toggleTheme:()=>{                \n                this.setState(prev=>({themePalette: prev.themePalette === 'light' ? 'dark' : 'light'}));\n            },\n            setLightTheme:()=>{                \n                this.setState({themePalette:'light'});\n            },\n            setHeaderSearch:(val)=>{\n                this.setState({isHeaderSearch: val});\n            },\n            addLocalStorageItem:(name, value) => {\n                localStorage.setItem(`quest-${name}`, value);\n            }, \n            removeLocalStorageItem:(name) => {\n                localStorage.removeItem(`quest-${name}`);\n            },\n            getLocalStorageItem:(name) => {\n                return localStorage.getItem(`quest-${name}`);\n            },\n            addLocalStorageJSON: (name, data) => {\n                localStorage.setItem(`quest-${name}`, JSON.stringify(data));\n            },\n            getLocalStorageJSON: (name) => {\n                const data = localStorage.getItem(`quest-${name}`);\n                return JSON.parse(data);\n            },\n            setMarkdownContent: (type, data) => {\n                if (type === 'question') this.setState({questionContent: data});\n                else this.setState({answerContent: data});\n            },\n            getMarkdownContent: (type) => {\n                if (type === 'question') return this.questionContent;\n                else return this.answerContent;\n            }\n        };\n    }\n\n    componentDidMount() {   \n    }\n\n    render() {\n        return <AppContext.Provider value={this.state}>\n            {this.props.children}\n        </AppContext.Provider>\n    }\n}\n\n```\n\n\n","date":1.567743368865E+12,"__v":0}
{"_id":{"$oid":"5d72b16ba2594000162894f6"},"tags":[{"$oid":"5d5a43751ddcc90016428fe9"},{"$oid":"5d5a437e1ddcc90016428fea"}],"groups":[{"$oid":"5d53df003ac67a00160671e3"}],"title":"Node JS Performance improvement","type":"question","question":"# Explain some of the ways to improve Node JS performance on the server side\n\n- Explain `cluster` module\n- Explain `os` module\n- Explain `pm2` npm module","answer":"# Answer\n\n- Node JS runs in a single process and is basically in one thread.\n- This means that it does not utilize all the CPUs on a host.\n- To remedy this, Node JS has a **cluster** module.\n\n## Cluster Module\n- Under the hood, Node JS then uses interprocess communication to distribute the load between the chart processes, round robin way.\n- Cluster module is built into Node core package.\n\n```javascript\nconst cluster = require('cluster');\n...\n// if the CPU process is the master process ..do something\nif(cluster.isMaster) {\n log.info(`Master ${process.pid} is running`);\n for (let i= 0; i < numCPUs; i++) { \n   cluster.fork();\n }\n cluster.on('exit', (worker) => {\n  log.fatal(`Worker ${worker.process.pid} just died`);\n });\n \n} else {\n ...// do your app logic here !!\n}\n```\n\n## PM2 Module\n\n- Node cluster is not the only way to achieve this.\n- We can use the process manager 2 module to scale up all CPUs as well\n- Unlike `cluster` and `os` module which are built into Node. **PM2** module is external and needs to be installed.","date":1.567797611687E+12,"__v":0}
{"_id":{"$oid":"5d7b7e2c6ea1390016872d7c"},"tags":[{"$oid":"5d520639aa54c34180a48139"},{"$oid":"5d520585aa54c34180a48133"},{"$oid":"5d98324215b66a00168212ce"}],"groups":[{"$oid":"5d520740aa54c34180a4813e"}],"title":"React Functional Context with Typescript","type":"article","question":"# The following code shows how to create a Functional React Context which can be reused multiple times\n\n**NOTE:** _In case there are modules which don't have Typedef supported, include a `type.d.ts`_\n\n```javascript\ndeclare module 'react-notifications-component';\n```\n\n> AppContext.tsx\n\n```javascript\n/**\n * PAJ - Creating a Global Shared State using Context API\n * state defined in this AppProvider will be used throughout the context of our application\n */\nimport React, { Component, } from 'react';\nimport { store } from 'react-notifications-component';\n\nconst initialState = { \n    version: '1.0.01',\n    name: 'Flight Fares Calendar',\n    addNotification:(title: string = 'NOTE', description: string, type?: string, duration?: number ):any => {\n        const notificationType: string = type ? type: `success`;\n        const timing: number = duration ? duration: 5000;\n        store.addNotification ({\n            title: title,\n            width:300,\n            message: description,\n            type: notificationType,\n            insert: \"top\",\n            container: \"top-right\",\n            animationIn: [\"animated\", \"fadeIn\"],\n            animationOut: [\"animated\", \"fadeOut\"],\n            dismiss: {\n              duration: timing,\n              onScreen: true\n            }\n          });\n    }\n};\n\ntype State = Readonly<typeof initialState>;\n\nexport const AppContext = React.createContext(initialState);\n\nexport class AppProvider extends Component {\n    constructor(props: any) {\n        super(props);        \n    }    \n\n    render() {\n        return <AppContext.Provider value={initialState}>\n            {this.props.children}\n        </AppContext.Provider>\n    }\n}\n\n```","answer":"---\n\n# FAQs \n\n## 1. What is the use of readOnly ?\n\nIf you delcared using `readOnly` keyword or `ReadOnly<typeof(variable)>` to a state, then that state can only be created one, and not changed after creation.\n\n- It basically only allows to create the value once and then you can't change it, so if you create an interface with `readOnly` properties it means these props in your react component can only be created once and not be changed after the fact.\n\n## 2. What is a Higher Order Component ?\n\n`HOCs`, in a very simple way, are functions that take your component and return a new one.\n\n---","date":1.57051579341E+12,"__v":0}
{"_id":{"$oid":"5d8632e447d2b800168232a5"},"tags":[{"$oid":"5d520577aa54c34180a48132"},{"$oid":"5d520585aa54c34180a48133"},{"$oid":"5d6bdb962a77330016c74e2f"}],"groups":[{"$oid":"5d5565f04d555b0016d3e304"}],"title":"Promise.allSettled - Dealing with Multiple Promises","type":"question","question":"# Dealing with Multiple Promises - Promise.allSettled\n\nExplain the difference between **Promise.all** and **Promise.allSettled**\n\n- Show how Promise.allSettled pattern can be written in Typescript\n- Provide all Libraries which support latest promise functionalities\n- [Article Explaining Promise.allSettled](https://mike.biful.co/solve-all-your-problems-with-promise-allsettled)\n- [Tc39 - Proposal-promise-allSettled](https://github.com/tc39/proposal-promise-allSettled)\n\n## Useful Libraries\n- [Core JS](https://www.npmjs.com/package/core-js)\n- [Bluebird](https://www.npmjs.com/package/bluebird)\n\n","answer":"# Solution\n\n## 1. Async / Await\n\nPromises can now be expressed using **async/await**, which lets you write promises in a more legible, pseudo-serial form:\n\n```javascript\n// Anonymous function with async prefixed to it\nconst loadComments = async () => { \n  try {\n    // Functions using await should be marked with async prefix\n    const comments = await BlogEngine.loadCommentsForPost({ id: '12345' })\n    return comments\n  } catch (err) {\n    return new Error(err)\n  }\n}\n```\n\n## 2. Promise.all\n\nThe easiest way to send off multiple requests at once is with **Promise.all()**. It's a function which takes an array of Promises, and returns an array with the responses from each promise:\n\n```javascript\nconst postIds = ['1', '2', '3', '4', '5'];\nconst promises = postIds.map(async (id) => {\n  return await loadComments(id);\n};\n\nconst postComments = Promise.all(promises);\n\n// postComments will be an Array of results fromj the promises we created:\nconsole.log(JSON.postComments);\n/*\n[\n  { post1Comments },\n  { post2Comments },\n  etc...\n]\n```\n\n**NOTE:** _There is one important catch (lol) with Promise.all(). If any of the promises sent to Promise.all() fails or rejects,  everything  fails. From the [MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/all) (emphasis mine):_\n\n---\n\nThe Promise.all()  method returns a single Promise  that resolves when all of the promises passed as an iterable have resolved or when the iterable contains no promises. **It rejects with the reason of the first promise that rejects.**\n\n---\n\n## 3. Promise.allSettled()\n\n\nUntil fairly recently, there wasn't a spectacular answer for scenarios like this. **However**, we will soon have widespread access to **Promise.allSettled()**, which is currently a **Stage 3** proposal in front of the **ECMAscript Technical Committee 39**, the body in charge of approving and ratifying changes to ECMAscript (aka \"JavaScript\", for the un-initiated).\n\nYou see, Promise.allSettled()  does exactly what we'd like in the example above loading blog comments. Rather than failing if any of the proments handed to it fail, it waits until they all finish executing (until they all \"settle\", in other words), and returns an array from each:\n\n_(this code sample is cribbed from the github proposal - go give it a look for more detail)_\n\n```javascript\nconst promises = [fetch('index.html'), fetch('https://does-not-exist/')]\nconst results = await Promise.allSettled(promises)\nconst successfulPromises = results.filter(p => p.status === 'fulfilled')\n```\n\n---\n\n## Challenge with Typescript\n\nTypescript, it seems, would scream its **a$$** off if it cant find the above method in any of the libraries. So there is a simple alternative design pattern to achieving allSettled\n\nThis design pattern is pulled from the Github link of [Tc39 - Proposal-promise-allSettled](https://github.com/tc39/proposal-promise-allSettled)\n\n### Examples\n\nCurrently you would need to iterate through the array of promises and return a new value with the status known (either through the resolved branch or the rejected branch.\n\n```javascript\nfunction reflect(promise) {\n  return promise.then(\n    (v) => {\n      return { status: 'fulfilled', value: v };\n    },\n    (error) => {\n      return { status: 'rejected', reason: error };\n    }\n  );\n}\n\nconst promises = [ fetch('index.html'), fetch('https://does-not-exist/') ];\nconst results = await Promise.all(promises.map(reflect));\nconst successfulPromises = results.filter(p => p.status === 'fulfilled');\n```\n\nThe proposed API allows a developer to handle these cases without creating a reflect function and/or assigning intermediate results in temporary objects to map through:\n\n```javascript\nconst promises = [ fetch('index.html'), fetch('https://does-not-exist/') ];\nconst results = await Promise.allSettled(promises);\nconst successfulPromises = results.filter(p => p.status === 'fulfilled');\n```","date":1.569076119194E+12,"__v":0}
{"_id":{"$oid":"5d8648be6b68f000167ab58a"},"tags":[{"$oid":"5d520639aa54c34180a48139"},{"$oid":"5d5c328779d75f001616d186"}],"groups":[{"$oid":"5d520740aa54c34180a4813e"}],"title":"State Reducer Pattern","type":"question","question":"# Explain what is the **State Reducer Pattern**\n","answer":"# Answer\n\nWith **state reducer pattern**, we give control to the user of our custom hook/component on how the state is updated internally.\n\nThe technical term for this is called **\"inversion of control\"**. In layman terms, it means a system that allows the user to control how things work internally within your API.\n\n# Regular State Change Pattern\n\nWithin your custom hook, you call useState or useReducer or setState to update state internally. Once the update is made, the new state value is communicated to the user.\n\nThis is how all the patterns we’ve looked at so far have worked.\n\n\n![Inversion of Control](https://www.educative.io/api/collection/10370001/4597752283529216/page/6506202290716672/image/6751419556167680)\n\n---\n\n# State Reducer Pattern\n\nWith the state reducer pattern, there’s a significant change in how internal state updates are made.\n\n\n![State Reducer Pattern](https://www.educative.io/api/collection/10370001/4597752283529216/page/6506202290716672/image/5092601013207040)\n\n\n- With state reducers, what’s important to note is that before we make any internal state update, we send our proposed changes over to the user. \n- If the user is okay with the changes, we go ahead and update state with our proposed changes. \n- If they need to override a state change, they can do that as well.\n\n---","date":1.569081693806E+12,"__v":0}
{"_id":{"$oid":"5d875a3ce0c8340016fa8a83"},"tags":[{"$oid":"5d520639aa54c34180a48139"},{"$oid":"5d520585aa54c34180a48133"}],"groups":[{"$oid":"5d520740aa54c34180a4813e"}],"title":"useReducer  - React hook example","type":"article","question":"# How to use **useReducer** in React Application\n\nThe difference between **useState** & **useReducer** hooks in React is as follows:\n\n```javascript\n// useExpanded.js \n// before \n  ...\n const [expanded, setExpanded] = useState(initialExpanded)\n\n// now \nconst [{ expanded }, setExpanded] = useReducer(internalReducer, initialState)\n...\n```\n\nNote how we need to destructure expanded from the state object in the new implementation on line 7. It’s worth mentioning that setExpanded returned from the useReducer call now works as a dispatcher. I’ll show the implication of this soon.\n\nIf you’re new to **useReducer**, it is typically called with a reducer and an initial state value. \n\n_A **reducer** is just a **function** that receives **state** and **action** to returns a **new state**._\n\nComplete usage of a **useReducer** hook with reducer function\n\n```javascript\n\nuseExpanded.types = {\n  toggleExpand: 'EXPAND',\n  reset: 'RESET'\n}\n\n// useExpanded.js \nconst internalReducer = (state, action) => {\n  switch (action.type) {\n    case useExpanded.types.toggleExpand:\n      return {\n        ...state,\n        expanded: !state.expanded //toggle expand state property\n      }\n    case useExpanded.types.reset:\n      return {\n        ...state,\n        expanded: action.payload // reset expanded with a payload\n      }\n    default:\n      throw new Error(`Action type ${action.type} not handled`)\n  }\n}\n\nexport default function useExpanded (initialExpanded = false) {\nconst [{ expanded }, setExpanded] = useReducer(internalReducer, initialState)\n...\n}\n```","answer":"# Final Solution\n\nOur `useExpanded` hook finally look like the following: \n\n- `useExpanded.js`\n\n```javascript\nimport { useCallback, useMemo, useRef, useReducer } from 'react'\n\nconst callFunctionsInSequence = (...fns) => (...args) => {\n  console.log(args)\n  return fns.forEach(fn => fn && fn(...args))\n}\n\nconst internalReducer = (state, action) => {\n  switch (action.type) {\n    case useExpanded.types.toggleExpand:\n      return {\n        ...state,\n        expanded: !state.expanded\n      }\n    case useExpanded.types.reset:\n      return {\n        ...state,\n        expanded: action.payload\n      }\n    case useExpanded.types.override:\n      return {\n        ...state,\n        expanded: !state.expanded\n      }\n    default:\n      throw new Error(`Action type ${action.type} not handled`)\n  }\n}\n\nexport default function useExpanded (\n  initialExpanded = false,\n  userReducer = (s, a) => a.internalChanges\n) {\n  const initialState = { expanded: initialExpanded }\n  const resolveChangesReducer = (currentInternalState, action) => {\n    const internalChanges = internalReducer(currentInternalState, action)\n    const userChanges = userReducer(currentInternalState, {\n      ...action,\n      internalChanges\n    })\n    return userChanges\n  }\n\n  const [{ expanded }, setExpanded] = useReducer(\n    resolveChangesReducer,\n    initialState\n  )\n\n  const toggle = useCallback(\n    () => setExpanded({ type: useExpanded.types.toggleExpand }),\n    []\n  )\n\n  const override = useCallback(\n    () => setExpanded({ type: useExpanded.types.override }),\n    []\n  )\n\n  const resetRef = useRef(0)\n  const reset = useCallback(\n    () => {\n      setExpanded({ type: useExpanded.types.reset, payload: initialExpanded })\n      ++resetRef.current\n    },\n    [initialExpanded]\n  )\n\n  const getTogglerProps = useCallback(\n    ({ onClick, ...props }) => ({\n      'aria-expanded': expanded,\n      onClick: callFunctionsInSequence(toggle, onClick),\n      ...props\n    }),\n    [toggle, expanded]\n  )\n\n  const value = useMemo(\n    () => ({\n      expanded,\n      toggle,\n      getTogglerProps,\n      reset,\n      resetDep: resetRef.current,\n      override\n    }),\n    [expanded, toggle, getTogglerProps, reset, override]\n  )\n\n  return value\n}\n\nuseExpanded.types = {\n  toggleExpand: 'EXPAND',\n  reset: 'RESET',\n  override: 'OVERRIDE'\n}\n```\n\n---\n\n- `App.js`\n\nThe Below code snippet shows how to refer to the useExpanded custom hook in our application:\n\n```javascript\nimport React, { useRef } from 'react'\nimport useExpanded, { useEffectAfterMount } from './components/Expandable'\nimport Header from './components/Header'\nimport Icon from './components/Icon'\nimport Body from './components/Body'\n\nimport './App.css'\nimport './components/Expandable.css'\n\n/**\n * useExpanded consumer builds an App to share a conspiracy.\n * Goal:\n * - after the user clicks to see the conspiracy ...\n * - the reset callback should be invoked\n * - the user should NOT be able to expand the container any longer\n * - the secret can only be viewed ONCE!!!\n */\n\nfunction App () {\n  const hasViewedSecret = useRef(false)\n  const { expanded, toggle, override, reset, resetDep } = useExpanded(\n    false,\n    appReducer\n  )\n  function appReducer (currentInternalState, action) {\n    if (\n      hasViewedSecret.current &&\n      action.type === useExpanded.types.toggleExpand\n    ) {\n      return {\n        ...action.internalChanges,\n        // override internal update\n        expanded: false\n      }\n    }\n    return action.internalChanges\n  }\n\n  useEffectAfterMount(\n    () => {\n      // open secret in new tab ð\n      window.open('https://leanpub.com/reintroducing-react', '_blank')\n      hasViewedSecret.current = true\n      // perform side effect here ð e.g persist user details to database\n    },\n    [resetDep]\n  )\n\n  return (\n    <section className='App'>\n      <div className='Expandable'>\n        <Header toggle={toggle} style={{ border: '1px dotted red' }}>\n          {' '}\n          They've been lying to you{' '}\n        </Header>\n        <Icon expanded={expanded} />\n        <Body expanded={expanded} style={{ background: 'papayawhip' }}>\n          <p>\n            This is highly sensitive information and can only be viewed ONCE!!!!\n          </p>\n          <p>\n            Click to view the conspiracy <br />\n            <button onClick={reset}> View secret </button>\n          </p>\n        </Body>\n      </div>\n      {hasViewedSecret.current && (\n        <button onClick={override}>Be redeemed to view secret again</button>\n      )}\n    </section>\n  )\n}\n\nexport default App\n```","date":1.570430098625E+12,"__v":0}
{"_id":{"$oid":"5d8edd1d9ccd7e0016cdb48e"},"tags":[{"$oid":"5d8ede5c9ccd7e0016cdb48f"},{"$oid":"5d5a437e1ddcc90016428fea"}],"groups":[{"$oid":"5d5a403a1ddcc90016428fe7"}],"title":"Nest CLI & Nest Modules","type":"article","question":"<p align=\"center\">\n  <a href=\"http://nestjs.com/\" target=\"blank\"><img src=\"https://nestjs.com/img/logo_text.svg\" width=\"320\" alt=\"Nest Logo\" /></a>\n</p>\n\n# Nest JS CLI and NestJS Modules\n\n## Installation\n\n```bash\n$ npm install\n```\n\n## Running the app\n\n```bash\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prod\n```\n\n## Test\n\n```bash\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:cov\n```","answer":"# NestJS Modules\n\n- Each application has atleast one module - The root module. This is the starting point of the application.\n- Modules are an effective way to organize components by a closely related set of capabilities (eg. per Feature)\n- It is a good practice to have a folder per module, containing the module's components.\n- **Modules are singletons**, therefore a Module can be imported by other individual modules.\n\n- A Module is defined by annotating the class with the `@Module` Decorator.\n- The decorator provides metadata that Nest uses to organize the application structure.\n\n# @Module decorator properties\n- **providers**: Array of providers available within the module via dependency injection.\n- **controllers**: Array of controllers to be instantiated within the module\n- **exports**: Array of providers to export to other modules.\n- **imports**: List of Modules required by this module. Any exported provider by these modules will now be available in our module via dependency injection.\n\nTo create a Module using the CLI, run the following command\n\n```bash\nnest g module tasks\n```","date":1.569644195922E+12,"__v":0}
{"_id":{"$oid":"5d90f0b954e17b00167b2c68"},"tags":[{"$oid":"5d5a437e1ddcc90016428fea"},{"$oid":"5d8ede5c9ccd7e0016cdb48f"}],"groups":[{"$oid":"5d5a403a1ddcc90016428fe7"}],"title":"Controller & Services in Nest JS","type":"question","question":"# Explain programmatically what is a controller and a service in Nest JS\n\n- Explain **@Controller**\n- Explain **@Injectable**\n- Explain how to make a **POST** and **GET** handler\n- Provide examples of passing body parameters to **POST** handler\n- Explain what the role of an **@Injectable** in Nest JS\n- Explain the difference between **Service** and **Injectable**\n\n\n- [Controller Example](https://www.udemy.com/course/nestjs-zero-to-hero/learn/lecture/14744772#overview)\n","answer":"# Solution\n\nThe Controller is used to parse incoming requests and provide the response in application/json format.\n\n- The Controller annotated with the `@Controller('serviceName')` annotation which takes in a string parameter - name of the handler\n\n```javascript\nimport { Controller, Get, Post, Body } from '@nestjs/common';\nimport { TasksService } from './tasks.service';\nimport { Task } from './tasks.model';\n\n@Controller('tasks')\nexport class TasksController {\n\n    constructor(private taskService: TasksService) {}\n    \n    @Get()\n    getAllTasks(): Task[] {\n        return this.taskService.getAllTasks();\n    }\n\n    @Post()\n    createTask ( @Body() body ) {\n        console.log('Body is: ', body);\n    }\n}\n```\n\n- For processing the Request body we can either \n\n- Use the Entire Request Body as follows\n\n```javascript\n@Post()\n    createTask ( @Body() body ) {\n        console.log('Body payload entire object is: ', body);\n    }\n```\n\n- Or we can specifically look for fields within the Body payload. Like so\n\n```javascript\n@Post()\n    createTask ( \n          @Body('title') title: string,\n          @Body('description') description: string,\n    ) {\n        console.log('Title is: ', title);\n        console.log('Description is: ', description);\n    }\n```\n\n- The second method is a better suited design as it helps in error handling.\n\n# Services\n\nThe `@Injectable` decorator is used for the following purpose:\n\n- It is used to define that a certain class should have shared instance across the module.\n- The instance can be then injected using Dependency Injection\n- All injectors (controllers) will have access to the same shared instance and its state\n\n### Difference between Service and Injectable\n\n- Injectable is used to share the instance of the class across the module\n- Service is a layer that provides some sort of Business Logic.\n\n```javascript\nimport { Injectable } from '@nestjs/common';\nimport { Task, TaskStatus } from './tasks.model';\nimport * as uuid from 'uuid/v1';\n\n@Injectable()\nexport class TasksService {\n\n    private tasks: Task[];\n\n    getAllTasks(): Task[] {\n        return this.tasks;\n    }\n\n    createTask (title: string, description: string): Task {\n        const task: Task = {\n            id: uuid(),\n            title,\n            description,\n            status: TaskStatus.OPEN\n        };\n\n        this.tasks.push(task);\n        return task;\n    }\n\n}\n```","date":1.570008314729E+12,"__v":0}
{"_id":{"$oid":"5d9437da3315cb0016642dbc"},"tags":[{"$oid":"5d5a437e1ddcc90016428fea"},{"$oid":"5d8ede5c9ccd7e0016cdb48f"}],"groups":[{"$oid":"5d5a403a1ddcc90016428fe7"}],"title":"Data Transfer Objects - Nest JS","type":"question","question":"# Explain what a Data Transfer Object is\n\n- Also, explain how to pass `params` and `body` payload to a **@Get** and **@Post** handlers","answer":"# Answer\n\n## Pain Point\n\n- We do not have a unified way to pass objects between Controllers and Services for arguments.\n- Every time we need to introduce a new parameter to the Web-Service, maintenance becomes hard.\n\n\n---\n\n## Data Transfer Objects\n\nA Data Transfer Object is an object which carries data between processes. \n- It encapsulates data and sends it from one subsystem of an application to another.\n- It defines how data will be sent over the network\n- More bulletproof code\n- Used for for storage, retrieval, serialization, deserialization of data.\n\nA Data Transfer Object (dto) is different from a model as it only defines the shape of an object **for a specific transaction / service** not the entire Model / Schema\n\n- It can be an interface / abstract class.\n- The recommended approach in Nest JS is to use classes to define a Data Transfer Object (dto).\n- The reason being, interface are specifically part of Typescript, and will not be preserved post-compilation\n- Classes on the other hand, are Ecmascript specification which can exist even after Typescript compilation.\n- Nest JS cannot refer to the interfaces at runtime, but can easily refer to classes.\n\n---\n\n## Example of a DTO\n\nThe following is how you specify a Data Transfer Object\n\n### DTO\n\n```javascript\nexport class CreateTasksDto {\n    title: string;\n    description: string;\n};\n```\n\nThis Create Task DTO can now be used to define the POST parameters in a controller, like so:\n\n### Controller\n\n```javascript\n@Controller('tasks')\nexport class TasksController {\n\n    constructor(private taskService: TasksService) {}\n...\n...\n...\n// DTO being used as parameter type definition\n @Post()\n    createTask ( @Body() createTask: CreateTasksDto ): Task {\n        return this.taskService.createTask(createTask);\n    }\n...\n}\n```\n\nThis can now be referred in a Service, like so:\n\n### Service\n\n```javascript\nimport { Injectable } from '@nestjs/common';\nimport { Task, TaskStatus } from '../models/tasks.model';\nimport * as uuid from 'uuid/v1';\nimport { CreateTasksDto } from '../dto/tasks.dto';\n\n@Injectable()\nexport class TasksService {\n...\n...\n...\n// DTO being used as a request param type definition\ncreateTask (createTask: CreateTasksDto): Task {\n        const { title, description } = createTask;\n        const task: Task = {\n            id: uuid(),\n            title,\n            description,\n            status: TaskStatus.OPEN\n        };\n        this.tasks.push(task);\n        return task;\n    }\n}\n```\n\n---","date":1.569994714269E+12,"__v":0}
{"_id":{"$oid":"5d94938d2ff3340016919c49"},"tags":[{"$oid":"5d5a437e1ddcc90016428fea"},{"$oid":"5d8ede5c9ccd7e0016cdb48f"}],"groups":[{"$oid":"5d5a403a1ddcc90016428fe7"}],"title":"Pipes - Nest JS","type":"question","question":"# What are Nest JS Pipes, Explain in detail with examples\n\n- Validation\n- Error Handling\n- Custom Pipes\n- Validation Pipes - Searching & Filtering\n\n","answer":"# Pipes\n\n- Pipes operate on the **arguments** to be processed by the route handler, just before the handler is being called.\n\n- Pipes can perform **data transformation** or **data validation**\n- Pipes can return data - _either original or modified_ -  which will be passed to the route handler\n- Pipes can throw exceptions. Exceptions thrown will be handled by Nest JS framework and parsed into a **valid error response**.\n- Pipes can be **asynchronous**.\n- Nest JS ships with some pre-built, useful pipes in the `@nestjs/common` module.\n\n---\n\n# Validation Pipe\n\nValidates the compatibility of an entire object against a class (goes well with Data Transfer Objects). If any property cannot be mapped properly (for example type mismatch), validation will fail.\n\n# ParseInt Pipe\n\nBy default, arguments are of type **string**. This pipe validates that an argument is a **number**. If successful, the argument is transformed into a **Number** type and passed onto the handler.\n\n# Custom Pipe Implementation\n\n- Pipes are classes annotated with the **@Injectable** annotation/decorator.\n- Pipes must implement the **PipeTransform** generic interface.\n- Therefore, every pipe must have a **transform()** method.\n- This method will be called by NestJS to process the arguments.\n\n## transform()\n\nThe **transform()** method accepts 2 arguments:\n\n- **value:** The value of the processed argument.\n- **metadata** _(optional)_: An object containing the metadata about the argument.\n- Whatever is returned from the transform() is returned the route handler\n- The exception is sent back to the client.\n\n---\n\n# Pipe usage\n\nPipes can be consumed in many ways:\n\n- **Handler-level pipes**: are defined at the handler level, via the `@UsePipes()` decorator. Such pipes will process all parameters for the incoming requests.\n\n\n```javascript\n@Post()\n@UsePipes(SomePipe)\ncreateTask(\n@Body('description') description: string\n) {\n// ..... Handler Pipe example\n}\n```\n\n---\n\n- **Parameter-level pipes**: are defined at the parameter level. Only the specific parameter for which the pipe is specified will be processed\n\n```javascript\n@Post()\ncreateTask(\n@Body('description', SomePipe) description: string\n) {\n// ..... Parameter Pipe example\n}\n```\n\n---\n\n- **Global pipes**: are defined at the application level and will be applied to any incoming request.\n\n```javascript\nasync function bootstrap() {\n const app = await NestFactory.create(ApplicationModule);\n app.useGlobalPipes(SomePipe); // Global Pipe reference\n await app.listen(3000);\n}\nbootstrap();\n```\n\n--- \n\n# Handler pipes vs Parameter pipes\n\nWell using one above the other depends on the context\n\n- **Parameter-level pipes**: tend to be slimmer and cleaner. However, they often result in extra code added to handlers - this can get messy and hard to maintain.\n\n- **Handler-level pipes**: require some more code but are easier to maintain.\n- Such pipe does not require extra code at the parameter level.\n- Easier to maintain and scale. If the shape of the data changes, easier to update the pipe as well.\n- Responsibility of identifying the arguments to process is not centralized due to the Pipe\n- Promotes the use of DTOs which is a very good practice.\n\n---","date":1.570018189777E+12,"__v":0}
{"_id":{"$oid":"5d9569eefd20fc0016712854"},"tags":[{"$oid":"5d5a437e1ddcc90016428fea"},{"$oid":"5d8ede5c9ccd7e0016cdb48f"}],"groups":[{"$oid":"5d5a403a1ddcc90016428fe7"}],"title":"Custom Pipes vs Built in Pipes","type":"question","question":"# Explain the difference between Custom Pipes and Built in Pipes in Nest JS\n- Custom Pipes - Provide Code snippets\n- Built in Pipes - Provide Example of Class Validators\n- [Class Validators - Decorators](https://github.com/typestack/class-validator#validation-decorators)","answer":"# Built In Pipes in Nest JS\n\n1. Nest JS ships with the following built in Pipes \n - **ValidationPipe**\n - **ParseIntPipe**\n\n2. Nest JS also provides the ability to define your own custom pipe. We mainly use the pipe as `parameter - level` pipe declaration.\n\n---\n\n## 1. Validation Pipe\n\nValidation Pipe makes heavy use of `Data Transfer Objects` as well as it is a `handler - level` pipe declaration.\n\nFor DTOs to validate a property, we make use of pre-existing library called - `Class Validator`. Some of the Validation annotation used are as follows:\n\n- **@IsNotEmpty()**: _Checks if given value is not empty (!== '', !== null, !== undefined)._\n- **@IsOptional()**: _Checks if given value is empty (=== null, === undefined) and if so, ignores all the validators on the property._\n- **@IsIn(values: any[ ])**: _Checks if value is in a array of allowed values._\n\n```javascript\nimport { TaskStatus } from \"../models/tasks.model\";\nimport { IsNotEmpty, IsOptional, IsIn } from 'class-validator';\n\nexport class CreateTasksDto {\n    @IsNotEmpty()\n    title: string;\n    \n    @IsNotEmpty()\n    description: string;\n};\n\nexport class UpdateTaskDto {\n    title: string;\n    description: string;\n    status: TaskStatus\n}\n\nexport class GetTaskFilterDto {\n    @IsOptional()\n    @IsIn([ TaskStatus.OPEN, TaskStatus.IN_PROGRESS, TaskStatus.DONE ])\n    status: TaskStatus;\n\n    @IsOptional()\n    @IsNotEmpty()\n    search: string\n}\n```\n\n---\n\n## 2. Custom Pipe\n\nCustom pipes are classes which implement the interface : `PipeTransform`\n\n```javascript\nimport { PipeTransform, ArgumentMetadata, BadRequestException } from \"@nestjs/common\";\nimport { TaskStatus } from \"../models/tasks.model\";\n\nexport class TaskStatusValidationPipe implements PipeTransform {\n\n    private readonly allowed_status = [\n        TaskStatus.OPEN,\n        TaskStatus.IN_PROGRESS,\n        TaskStatus.DONE\n    ];\n\n    //implement the method as part of the interface contract\n    transform (value: any, metadata: ArgumentMetadata) {        \n        value = value.toUpperCase();\n        if (!this.isStatusValid(value)) {\n            throw new BadRequestException(`${value} is any invalid status`);\n        }\n        return value;\n    }\n\n    private isStatusValid(status: any) {\n        const idx = this.allowed_status.indexOf(status);\n        return idx !== -1;\n    }\n}\n```\n\nThis custom `TaskStatusValidationPipe` is introduced as a `Parameter - level` pipe while defining a **PATCH** handler like so:\n\n```javascript\n@Patch('/:id/status')\n    updateTaskStatus (\n        @Param('id') id: string,\n        @Body('status', TaskStatusValidationPipe) status: TaskStatus\n    ) {\n        return this.taskService.updateTaskStatusById(id, status);\n    }\n```\n\n","date":1.570073070168E+12,"__v":0}
{"_id":{"$oid":"5d96db90eef59a0016cfe1fd"},"tags":[{"$oid":"5d5a437e1ddcc90016428fea"},{"$oid":"5d8ede5c9ccd7e0016cdb48f"}],"groups":[{"$oid":"5d5a403a1ddcc90016428fe7"}],"title":"TypeORM - config and integration","type":"question","question":"# Explain the entire procedure/mechanism involved to integrate TypeORM into Nest JS. \n\n### Also, with examples, explain the following:\n\n- TypeORM Pros and Cons.\n- How to integrate with PostgreSQL\n- Entity vs Model\n- Repository\n- Query, QueryBuilder, SelectQueryBuilder\n- Basic CRUD Operations using TypeORM\n\n## Resources\n- [Type ORM Official Website](https://typeorm.io/#/)\n- [Type ORM API Documentation](http://typeorm.delightful.studio/classes/_repository_repository_.repository.html)\n\n\n---\n\n# ORM & TypeORM\n\nObject-Relational Mapping (ORM) is a technique that lets you query and manipulates data from a database, using the Object-Oriented Paradigm.\n\n## Pros\n\n- Writing the data model in one place - easier to maintain. Less repetition.\n- Lots of things done automatically - database handling, data types, relations ..etc.,\n- No need to write SQL syntax (easy to learn, hard to master). Use your natural way of coding.\n- DB Abstraction - you can change the database type whenever you wish.\n- Leverages OOP - therefore things like inheritance are easy to achieve.\n\n## Cons\n\n- Steep learning curve.\n- Performance is alright, but it's easy to neglect.\n- Makes it easy to forget (or never learn) what's happening behind the scenes, which can lead to a variety of maintainability issues","answer":"# Package dependencies\n\nThe following Package dependencies are required in order to integrate TypeORM with your NestJS project\n\n```json\n\"dependencies\": {\n    \"uuid\": \"^3.3.3\",\n    \"@nestjs/typeorm\": \"^6.2.0\",\n    \"typeorm\": \"^0.2.19\",\n    \"pg\": \"^7.12.1\",\n    \"class-transformer\": \"^0.2.3\",\n    \"class-validator\": \"^0.10.1\"\n  }\n```\n\n>**NOTE:** _`class-transformer` & `class-transformer` are dependencies for Validation Pipe / Custom Pipes_\n\n# 1. TypeORM configuration file\n\nIn order, to connect with PostgreSQL, Localhost server, Enter the following details under the file name: src/config/typeorm.config.ts\n\n```javascript\nimport { TypeOrmModuleOptions } from '@nestjs/typeorm';\n\nexport const typeOrmConfig: TypeOrmModuleOptions = {\n    type: 'postgres',\n    host: 'localhost',\n    port: 5432,\n    username: 'postgres',\n    password: 'admin',\n    database: 'taskmanagement',\n    entities: [__dirname + '/../**/entities/*.entity.{js,ts}'],\n    synchronize: true\n};\n```\n\n# 2. Bootstrap TypeORM in NestJS - AppModule\n\nIn order to bootstrap Type ORM, the following configuration need to be made in `app.module.ts` file:\n\n```javascript\nimport { Module } from '@nestjs/common';\nimport { TasksModule } from './tasks/tasks.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { typeOrmConfig } from './config/typeorm.config';\n\n\n@Module ({\n  imports: [\n    TypeOrmModule.forRoot(typeOrmConfig),\n    TasksModule,\n  ],\n  controllers: [],\n  providers: [],\n})\nexport class AppModule {}\n```\n\n# 3. Provide TaskRepository as a dependency injection in `task.module.ts`\n\n```javascript\nimport { Module } from '@nestjs/common';\nimport { TasksController } from './controllers/tasks.controller';\nimport { TasksService } from './services/tasks.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { TaskRepository } from './repos/task.repository';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([TaskRepository])\n  ],\n  controllers: [TasksController],\n  providers: [TasksService]\n})\nexport class TasksModule { }\n\n```\n\n# 4. Create a Entity file - task.entity.ts\n\n**NOTE:** The `task.entity.ts` is different from `task.model.ts` in that it contain TypeORM annotations which enable it to be persisted as a Table in PostgreSQL\n\n```javascript\nimport { BaseEntity, Entity, PrimaryGeneratedColumn, Column } from \"typeorm\";\nimport { TaskStatus } from \"../models/tasks.model\";\n\n@Entity()\nexport class Task extends BaseEntity {    \n    @PrimaryGeneratedColumn()\n    id: number;\n\n    @Column()\n    title: string;\n\n    @Column()\n    description: string;\n    \n    @Column()\n    status: TaskStatus;\n}\n```\n\n# 5. Create a Repository file - task.repository.ts\n\nThe `task.repository.ts` file is a wrapper on top of the Entity file, in that not only does it expose same methods as that of Entity file, but you can also write custom methods inside the repository file:\n\n\n```javascript\nimport { Repository, EntityRepository } from \"typeorm\";\nimport { Task } from \"../entities/task.entity\";\nimport { CreateTasksDto, GetTaskFilterDto } from \"../dto/tasks.dto\";\nimport { TaskStatus } from \"../models/tasks.model\";\n\n@EntityRepository(Task)\nexport class TaskRepository extends Repository<Task> {\n\n    async getTasks (filterDto: GetTaskFilterDto): Promise <Task[]> {\n        const { status, search } = filterDto;\n        const query = this.createQueryBuilder('task'); // keyword refer to the Task entity\n        if ( status ) {\n            query.andWhere('task.status = :status', {status});\n        }\n        if ( search ) {\n            query.andWhere('task.title LIKE :search OR task.description LIKE :search', { search: `%${search}%` });\n        }\n        const tasks = await query.getMany();\n        return tasks;\n    }\n\n    async createTask(createTaskDto: CreateTasksDto) : Promise <Task> {\n        const { title, description } = createTaskDto;\n        const task = new Task();\n        task.title = title;\n        task.description = description;\n        task.status = TaskStatus.OPEN;\n        await task.save();\n        return task;\n    }\n}\n```\n\n# 6. Inject TaskRepository as a dependency in your Service File\n\nThe `tasks.service.ts` file now contains the dependency injection `@InjectRepository(TaskRepository)` which will create an instance of the task repository file.\n\n```javascript\nimport { Injectable, NotFoundException } from '@nestjs/common';\nimport { TaskStatus } from '../models/tasks.model';\nimport { CreateTasksDto, UpdateTaskDto, GetTaskFilterDto } from '../dto/tasks.dto';\nimport { TaskRepository } from '../repos/task.repository';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Task } from '../entities/task.entity';\n\n@Injectable()\nexport class TasksService {\n    constructor (\n        @InjectRepository(TaskRepository)\n        private taskRepository: TaskRepository\n    ) { }\n\n    getTasks(filterDto: GetTaskFilterDto) {\n        return this.taskRepository.getTasks(filterDto);\n    }\n\n    async getTaskById(id: number): Promise<Task> {\n        const found = await this.taskRepository.findOne(id);\n        if (!found) {\n            throw new NotFoundException(`Task by id ${id} not found`);\n        }\n        return found;\n    }\n\n    async createTask( createTaskDto: CreateTasksDto ): Promise<Task> {        \n        return this.taskRepository.createTask(createTaskDto);\n    }\n\n    async deleteTaskById (id: number): Promise <string> {        \n        const result = await this.taskRepository.delete({id: id});\n        if (result && result.affected > 0) {\n            return `Rows Deleted ${result.affected}`;\n        } else {\n            throw new NotFoundException(`Task by id ${id} not found`);\n        }\n        \n    }\n\n    async updateTaskById (id: number, updateTaskDto: UpdateTaskDto): Promise<Task> {\n        const { title, description, status } = updateTaskDto;\n        const task = await this.getTaskById(id);\n        task.title = title;\n        task.description = description;\n        task.status = status;\n        await task.save();\n        return task;\n    }\n\n    async updateTaskStatus (id: number, status: TaskStatus): Promise<Task> {\n        const task = await this.getTaskById(id);\n        task.status = status;\n        await task.save();\n        return task;\n    }\n}\n```\n\n# 7. Finally, the Task service file is referenced in the Task Controller file\n\nWe added two new Handlers - `PUT` and `PATCH`. The difference between the two HTTP methods is that `PUT` request is used to update the resource entirely where as `PATCH` request is used to update a specific field in the Resource.\n\n\n```javascript\nimport { Controller, Get, Post, Body, Param, Delete, Patch, Put, Query, UsePipes, ValidationPipe, ParseIntPipe } from '@nestjs/common';\nimport { TasksService } from '../services/tasks.service';\nimport { TaskStatus } from '../models/tasks.model';\nimport { CreateTasksDto, UpdateTaskDto, GetTaskFilterDto } from '../dto/tasks.dto';\nimport { TaskStatusValidationPipe } from '../pipes/tasks.pipes';\nimport { Task } from '../entities/task.entity';\nimport { filter } from 'minimatch';\n\n@Controller('tasks')\nexport class TasksController {\n\n    constructor(private taskService: TasksService) {}\n\n    @Get()\n    getTasks(@Query(ValidationPipe) filter: GetTaskFilterDto) {\n        return this.taskService.getTasks(filter);\n    }\n    \n    @Get('/:id')\n    async getTaskById(@Param('id', ParseIntPipe) id: number): Promise<Task> {\n        return this.taskService.getTaskById(id);\n    }\n\n    @Post()\n    @UsePipes(ValidationPipe)\n    async createTask(@Body() createTaskDto: CreateTasksDto): Promise<Task> {\n        return this.taskService.createTask(createTaskDto);\n    }\n\n    @Delete('/:id')\n    async deleteTaskById(@Param('id', ParseIntPipe) id: number): Promise <string> {\n        return this.taskService.deleteTaskById(id);\n    }\n\n    @Put('/:id')\n    @UsePipes(ValidationPipe)\n    updateTaskById (\n        @Param('id', ParseIntPipe) id: number,\n        @Body() updateTaskDto: UpdateTaskDto\n    ): Promise<Task> {\n            return this.taskService.updateTaskById(id, updateTaskDto);\n    }\n\n    @Patch('/:id/status')\n    updateTaskStatus (\n        @Param('id', ParseIntPipe) id: number,\n        @Body('status', TaskStatusValidationPipe) status: TaskStatus\n    ): Promise<Task> {\n        return this.taskService.updateTaskStatus(id, status);\n    }\n}\n\n```\n\n","date":1.570189185565E+12,"__v":0}
{"_id":{"$oid":"5d9828d715b66a00168212ca"},"tags":[{"$oid":"5d5a437e1ddcc90016428fea"},{"$oid":"5d8ede5c9ccd7e0016cdb48f"}],"groups":[{"$oid":"5d5a403a1ddcc90016428fe7"}],"title":"Authentication - Nest JS","type":"question","question":"# Explain Authentication procedure - Entity, Repository, Service & Controllers\n\n- Dependent Library plugins\n- Code snippet of Entity Configuration\n- Code snippet of Repository Configuration\n- Code snippet of Service\n- Code snippet of Controllers\n\n\n# Dependent Libraries\n\nFor hashing and generating salt - Recommended library is - `bcrypt`\n\n```json\n\"dependencies\": {\n    \"bcrypt\": \"^3.0.6\",\n}\n```","answer":"# Module Configuration\n\nTo first start with, The `Auth module` should contain the following configuration\n\n```javascript\nimport { Module } from '@nestjs/common';\nimport { AuthController } from './controllers/auth.controller';\nimport { AuthService } from './services/auth.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { UserRepository } from './repos/user.repository';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([UserRepository])\n  ],\n  controllers: [AuthController],\n  providers: [AuthService]\n})\nexport class AuthModule {}\n\n```\n\n\n# Entity Configuration\n\nUser Entity also comes with a new annotation, to ensure unique Column names - `@Unique(['columnName'])`\n\n```javascript\nimport { BaseEntity, Entity, PrimaryGeneratedColumn, Column, Unique } from \"typeorm\";\nimport * as bcrypt from 'bcrypt';\n\n@Entity()\n@Unique(['username'])\nexport class User extends BaseEntity {\n    \n    @PrimaryGeneratedColumn()\n    id: number;\n\n    @Column()\n    username: string;\n\n    @Column()\n    password: string;\n\n    @Column()\n    salt: string;\n\n    // custom method to validate password\n    async validatePassword(password: string): Promise <boolean> {\n        const hash = await bcrypt.hash(password, this.salt);\n        return hash === this.password;\n    }\n}\n```\n\n---\n\n# Repository Configuration\n\nUser Repository has the following methods:\n\n- private **hashPassword**\n- **validateUserPassword**\n- **signUp**\n\n```javascript\nimport { Repository, EntityRepository } from \"typeorm\";\nimport { User } from \"../entities/user.entity\";\nimport { AuthCredentialsDto } from \"../dto/auth-credentials.dto\";\nimport { ConflictException, InternalServerErrorException } from \"@nestjs/common\";\nimport * as bcrypt from 'bcrypt';\n\n@EntityRepository(User)\nexport class UserRepository extends Repository<User> {\n\n    async signUp (authCredentialsDto: AuthCredentialsDto): Promise<void> {\n        const { username, password } = authCredentialsDto;\n        \n        const user  = new User();\n        user.username = username;\n        user.salt = await bcrypt.genSalt();\n        user.password = await this.hashPassword(password, user.salt);\n\n        try {\n            await user.save();\n        } catch (error) {\n            if (error.code === `23505`) {\n                throw new ConflictException(`Username already Exists`);\n            } else {\n                throw new InternalServerErrorException(error);\n            }\n        }\n    }\n\n    async validateUserPassword (authCredentialsDto: AuthCredentialsDto): Promise<string> {\n        const { username, password } = authCredentialsDto;\n        const user = await this.findOne({username});\n        if (user && await user.validatePassword(password)) {\n            return user.username;\n        } else {\n            return null;\n        }\n    }\n\n    private async hashPassword (password: string, salt: string): Promise <string> {\n        return bcrypt.hash(password, salt);\n    }\n}\n```\n\n---\n\n# Service Configuration\n\nThe `Auth` Service has the following two methods\n\n- **signUp**\n- **login**\n\n```javascript\nimport { Injectable } from '@nestjs/common';\nimport { UserRepository } from '../repos/user.repository';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { AuthCredentialsDto } from '../dto/auth-credentials.dto';\n\n@Injectable()\nexport class AuthService {\n    \n    constructor(\n        @InjectRepository(UserRepository)\n        private userRepository: UserRepository\n    ) {}\n\n    async signUp(authCredentialsDto: AuthCredentialsDto): Promise<void> {\n        return this.userRepository.signUp(authCredentialsDto);\n    }\n\n    async login(authCredentialsDto: AuthCredentialsDto): Promise<string> {\n        return await this.userRepository.validateUserPassword(authCredentialsDto);        \n    }\n    \n}\n```\n\n---\n\n# Controller Configuration\n\nThe Controller - `Auth` controller contains two `POST` handlers\n\n- **signUp**\n- **login**\n\n```javascript\nimport { Controller, Post, Body, ValidationPipe, UnauthorizedException } from '@nestjs/common';\nimport { AuthCredentialsDto } from '../dto/auth-credentials.dto';\nimport { AuthService } from '../services/auth.service';\n\n@Controller('auth')\nexport class AuthController {\n\n    constructor(        \n        private authService: AuthService\n    ) {}\n\n    @Post('/signup')\n    async signUp (\n        @Body(ValidationPipe) authCredentialsDto: AuthCredentialsDto\n    ) {\n        return this.authService.signUp(authCredentialsDto);\n    }\n\n    @Post('/login')\n    async login (\n        @Body(ValidationPipe) authCredentialsDto: AuthCredentialsDto\n    ): Promise<string> {\n        const username = await this.authService.login(authCredentialsDto);\n        if(!username) {\n            throw new UnauthorizedException('Invalid Credentials');\n        } else {\n            return username;\n        }\n    }\n}\n\n```","date":1.570253015281E+12,"__v":0}
{"_id":{"$oid":"5d98315815b66a00168212cb"},"tags":[{"$oid":"5d5a43751ddcc90016428fe9"},{"$oid":"5d8ede5c9ccd7e0016cdb48f"},{"$oid":"5d5c328779d75f001616d186"}],"groups":[{"$oid":"5d5a403a1ddcc90016428fe7"}],"title":"JWT - JSON Web Tokens","type":"question","question":"# Briefly explain what is JWT and what role does it play in Authentication and Authorization of User.\n\n- Structure of **JWT**\n- JWT Authentication process\n- JWT Authrization process\n- Practical Examples","answer":"# What are JSON Web Tokens\n\n- Open-source Web Industry standard (RFC-7519).\n- Usable for Authorization or secure exchange of information between parties.\n- Verify the sender is who it/she/he claims to be.\n- Signed by an issuer, using a secret or keypair (HMAC algorithm, RSA or ECDSA).\n\n---\n\n## JWT Structure\n\n- Consists of `Header` (type, hashing algorithm)\n- `Payload` contains claims (statement about an entity - for example, a user and additional data).\n- `Signature` is the result of the encoded `Header`, the encoded `Payload`, **signed against the user**.\n\n---\n\n## Practical Example\n\n### Authenticating John Doe\n\n- User **John Doe** signs into our applications. We want to create a token with which John can authorize for a while.\n- We create a `Payload` containing the following \n  - Username as `username`\n  - Role as `role`\n  - Issue at `iat`\n  - Expiry `exp`\n- We then run the `Payload` against a `Cryptographic algorithm` which results in a `JWT`\n\n### Authorizing John Doe\n\n- **John Doe** sends a request to our API. He wants to say - Delete a task. In the Header request, we can find the `JWT` token.\n- To validate his token, we take the `Header` and `Payload`, and re-generate the `Signature` using our secret.\n- We then compare the result `Signature` with the `Signature` from his `JWT`.\n\n### Rejecting Fake John Doe\n\n- Let's say a **Fake John Doe** decides to get access to the JWT Header and Payload, and he modifies the role to admin and sends the request\n- We will then compare the result signature to the signature provided in his token. Since DJ does not know our `Secret` - there is no way he could fake the `Signature` as well.\n\n### Finally - JWTs should really be short-lived!","date":1.57025519263E+12,"__v":0}
{"_id":{"$oid":"5d9842fc5627c20016c0d5e9"},"tags":[{"$oid":"5d98324215b66a00168212ce"},{"$oid":"5d98326915b66a00168212cf"},{"$oid":"5d98320f15b66a00168212cd"}],"groups":[{"$oid":"5d9831d715b66a00168212cc"}],"title":"Finance - Savings","type":"article","question":"# What is Finance\nThe purpose of Finance is to help you understand what is likely to happen to your money invested in a variety of ways and prepare for different outcomes. Finance can be used for:\n- Business examining\n- Profits & Losses\n- for Individuals making investment decisions\n- Every day choices - Banking, Buying a house, Getting insurance.\n\n> Unlike Accounting, which is `backward looking`, Finance is `forward looking`.\n\n## Categories\n\n- Loans\n- 401(k)s\n- HSAs\n- IRAs\n- Stocks & Bonds\n\n---\n\n# Save - About Savings\n\n## How Banks work\n\nThe basic function of a bank is to \n\n- Accept money from savers\n- Opening up Savings and Checking accounts\n- Loan the money out at Higher rates to borrowers\n    - For Houses\n    - For Cars\n    - Businesses\n\n# Complicated for the following reasons\n\n- Savers can withdraw their money anytime\n- Banks borrow money from the Government\n\n- `OMOs - Open Market Operations`: they are purchase and sale of securities in the open market by a central bank.\n\n\n`Jerome Powell` - Chairman of the Federal Reserve of the United States (2019) - second most powerful person in the Country.\n`Raghuram Govind Rajan` - He was the 23rd Governor of the Reserve Bank of India ; in 2015,\n`Shaktikanta Das` - Governor of the Reserve Bank of India ; since 2018\n\n---\n\n# How does the Bank make money \n\nAlso explain what is a `Net Interest Margin`\n\n- You may be wondering how banks make money if they're always borrowing money from the Fed. \n- In order for a bank to make money the bank must charge more for the money it loans out to people than what it pays on the money it accepts from savers and the Federal Reserve. \n- For instance, a bank might lend money at 5%.\n- but borrow money from the Fed at 2%. \n- The difference between these two is the bank's profit also called the `Net Interest Margin`.\n\nWhen you are borrowing money from the bank, the following are the 2 important factors to consider.\n\n- `Prime Rate`: The **lowest rate** that the bank charges from its best customers\n- `Net Interest Margin` (aka Bank's Profit): The difference between what the Bank charges and what it pays.\n\nThese two factors, drive the other rates the Bank charges\n\n- `CD` : Certificates of Deposits\n- `Home Loans` : \n- `Student Loans` :\n- `HELOCs` : \n\n> - **NOTE**: Credit card refinancing is not typically something a bank loans money for.\n> - `APY` - Annual Percentage Yield / per annum\n> - `APR` - Annual Percentage Rate / For Borrowing per annum\n\n---\n\n# Difference between APR and Simple Interest Rate\n\n- Essentially, it means that you are charged money based on not only the amount that you have borrowed, but any interest that accrues over time. \n- If you fail to pay off your loan your payments will be higher in the future. \n- It's the compounding effect in your interest rate. \n- The same thing holds true on the savings side. \n- The more money you have as a result of interest payments you've earned in the past the more money you'll earn in the future.\n\n# Certificate of Deposits - CDs\n\nCDs act like Savings Account, but offer a much Higher Rate of Interest because the person giving their money to the bank, promises not to withdraw their money for a certain amount of time in the future.\n- Usually from 6 months - 5 years\n- Longer the term - Higher the interest rates\n- Guaranteed by the bank\n- Risk Free as investment\n\n# Pros\n\n- Guaranteed by the bank.\n- Higher Rate of Interests.\n- Risk Free.\n\n# Cons\n- Money time-locked.\n- Interest taxed: Interest is taxed at ordinary income rates. Lower rates only available on `Stock and Bonds`.\n- Often times, CD rates change on location.\n\n---\n\n# Understanding Credit Scores\n\nThings to show while requesting for a loan:\n- Common Rule of Law : Mortgage Debt cannot be 4 times more than your Annual Income\n- 2 years of Tax returns\n- 2 months Payslips\n\n**Credit Scores** : Assessment of your risk as a borrower.\n\n- Credit scores help the bank to judge how risky you are as a borrower and whether or not they should give you that loan. \n- Your credit score is important because it is key to getting a loan for a house or a car. Probably the most important role that banks play in most people's lives is providing home loans. \n- Now your credit score will often be shown via your `FICO score`. \n- FICO is not an acronym, it's a company, `Fair Isaac Company.` \n- Your FICO score comes from one of three credit unions. \n    - Equifax, \n    - Experian and \n    - TransUnion. \n- They collect information on all of your outstanding loans and credit cards. \n- Essentially any time you borrow money from someone else, the credit unions are gathering information on you. \n- And they gather information on whether you pay those loans on time in order to determine your credit score.\n\nYou can check your `Credit Score` for free - at any of the following websites\n- [Experian](https://www.experian.com)\n- [TransUnion](https://www.transunion.com)\n- [Equifax](https://www.equifax.com)\n\nCredit Score range from `0 / 300 ` to `850`","answer":"","date":1.570259834751E+12,"__v":0}
{"_id":{"$oid":"5d98460d5627c20016c0d5ea"},"tags":[{"$oid":"5d98324215b66a00168212ce"},{"$oid":"5d98326915b66a00168212cf"},{"$oid":"5d98320f15b66a00168212cd"}],"groups":[{"$oid":"5d9831d715b66a00168212cc"}],"title":"Finance - Stocks","type":"article","question":"# Invest\n\n## What is Stock Market\n\n- [Stock page for Disney](https://seekingalpha.com)\n\nCommon stock is a certificate that indicates ownership in part of a corporation.\n\nThe stock market is a system that enables companies to sell partial ownership in themselves to people, to investors, in exchange for cash.\n- Investors get a way to earn a return on their cash that they want to invest by owning a piece of a company.\n- Companies get cash from investors that help to grow their business more, \n- So it's a win-win for both sides.\n- A `Stock` is a singular version / unified version of individual `Shares`\n- `Shares` are pieces of the company.\n- If the company has a million shares of stock, then when you own one share, you own 1/1000000 of the company.\n- the `Stock` pays what's called a `Dividend` (Div Rate (TTM)).\n- This dividend, shown here, is the amount of cash that shareholders get back from the company every year in profit. \n- In the case of Disney, it's `$1.72` paid out over the last `12 months`.\n\n_When you buy a share, you buy a part or a share of the company and attain ownership rights in proportion to your share of that company, making you a shareholder, also sometimes called a stockholder._\n\n- To help make sure that the company is being run in their best interests, as the owners of the firm, common stockholders get to vote on the most important matters for the company. \n- Common stockholders are entitled to vote on the board of directors and elect those directors and to approve any changes in the corporate charter.\n\nCommon Stocks (a.k.a Stocks) have the `Highest Rate of Return` \n\n\n# How are Dividends decided\n\n- The `Stock` pays what's called a `Dividend` (Div Rate (TTM)).\n- This dividend, shown here, is the amount of cash that shareholders get back from the company every year in profit. \n- The stock price for Disney is based on the value that investors assign the company based on how money they think it will earn over time, based on what they think the dividend payouts will be in the future, and based on what they think Disney will earn in cash that helps to grow the company going forward.","answer":"","date":1.570260493976E+12,"__v":0}
{"_id":{"$oid":"5d98d17e99fa8300166d506c"},"tags":[{"$oid":"5d98324215b66a00168212ce"},{"$oid":"5d98320f15b66a00168212cd"},{"$oid":"5d98326915b66a00168212cf"}],"groups":[{"$oid":"5d9831d715b66a00168212cc"}],"title":"Finance - Insurance Overview","type":"article","question":"# Insurance\n\n- Insurance is related to `risk aversion`. \n- People pay an insurance company even though they know on average that they're never going to need the insurance company. \n- Also that they can avoid the risk of having a very large loss at some point during their lives and that's how insurance fits into your personal finances.\n\n# Risk Aversion\n\nAvoiding risk by paying a premium to ensure they are protected in the event of a big loss / tragedy.\n- Individuals generally prefer to minimize the risk of loss while maximizing big gains, even if it costs them money.\n- There are 3 types of Insurance that you need to invest in:\n    - Health Insurance : Person's health.\n    - Life Insurance : Payout after the person dies.\n    - Property & Auto Insurance (P&C -  Property & Casualty Insurance ) : Event of a disaster of a property.\n\n`Three major metrics` define the insurance business. \n\n# 1. The Loss ratio \nThe Loss ratio is the amount of every dollar in premiums that gets paid back out to insured people. \n- For instance, if a home insurance company brings in a million dollars in premium payments and pays out 800000 to cover fires, floods, other sorts of disasters, what have you, then the loss ratio is `0.8` or `80%`. 800000 divided by 1000000. \n\n# 2. The expense ratio\nThe expense ratio is the amount of every dollar in premiums that gets used by the insurance company to pay their own office and overhead expenses. \n- For instance, if that insurance company brings in a million in premium payments and then spends 120000 on office expenses and customer service for their customers, well the expense ratio is `0.12` or `12%`. That's 120000 divided by 1000000. \n\n# 3. The combined ratio\nFinally, the combined ratio is the amount when the expense ratio is combined with the loss ratio. \n- It's the total amount of every dollar in premiums the insurance company spends on all of its costs plus its payouts to insured people. \n- In our example, the combined ratio is 800000 plus 120000 divided by 1000000. \n- This then tells us that the profit for the insurance company is `8%`, which is just `one minus that combined ratio`.\n\n---","answer":"# Life Insurance\n\nThere are two major types of Life insurance\n\n- Term Life Insurance\n- Whole Life Insurance\n\n---\n\n# 1. Term Life Insurance\n\nTerm life insurance is the simplest form of life insurance. \n- It pays only if death occurs during the term of the policy, which is usually from one to 30 years. Basically you buy term life insurance, say with a 10-year term, then if you die in the next 10 years the insurance pays out to your family. If you die in 15 years or 11 years or 20 years the insurance does not pay. \n- There are two basic types of term life insurance policies, \n- `Level term` : Death Benefit stays the same.\n- `Decreasing term` : Death Benefit decreases over time.\n\n---\n\n# 2. Whole Life Insurance\n\nWhole life, which is sometimes called permanent insurance, pays a death benefit whenever you die even if you live to be 100. \n- Whole life encompasses several subcategories including: \n    - Traditional whole life, \n    - Universal life, and \n    - Variable life. \n\n# a. Traditional whole life insurance\n\nTraditional life insurance is a simple flat rate premium each month. \n\n- The cost per thousand dollar of benefit, that is the $1,000 that your beneficiaries get when you die, increases as the insured person ages, and it obviously gets very high if the insured person lives to be say 80 years or more. \n- So the earlier you buy that traditional whole life insurance, the cheaper the cost will be per month. \n- The later you buy it, the more expensive it'll be per month.\n\n# b. Universal whole life insurance\n\nNext, we have universal life insurance, which is just a type of `cash value life insurance`. \n\n- It's just like traditional whole life insurance, in that you get a payout whatever age you are when you die. \n- This type of insurance acts a bit like a savings account too. \n- You can put extra cash into it, and the cash will be paid out to your family with interest when you die. \n- You can also take extra cash out of the universal life insurance before you die if the policy is over-funded. \n- There are very specific rules about taking money out of the policy though, so you do need to be careful if you're going to do this. \n\n# c. Variable whole life insurance\n\nVariable life insurance builds a cash value over time.\n\n- In a variable life insurance policy, or VL, the cash value can be invested in a wide variety of separate accounts, similar to mutual funds.\n- Unlike a universal life policy though, the value of the VL at your death depends on which specific investment choices you made. \n- So it's similar to investing your money in mutual funds. \n- If you make good investments, those mutual funds are worth a lot. \n- If you make bad investments, they're not worth much. \n- Variable life works the same way. \n- Both universal life insurance and certain types of variable life insurance, called variable universal life insurance policies, allow you to pay either a lot or a little in premium each month, and the value of your policy changes based on that payment.\n\n---\n\n# Practical Applications\n\n- Do you want insurance for a specific period of time, consider a `Term life policy`. \n- Want insurance throughout your life with a fixed cost, a `Whole life policy` might be the best choice. \n- Want to be able to vary how much you pay into the policy depending on your budget each month, a `Universal life policy` could be a good choice then. \n- Or if you want to combine life insurance with your investing acumen, a `Variable life policy` might be the right fit.\n\n---\n\n# Property & Casuality Insurance (P & C)\n\nThis insurance is generally not optional. The P&C Category can be broadly divided into:\n\n- Homeowners Insurance : If you have mortgage and a house, The bank demands that you have Homeowners Insurance.\n- Auto Insurance : If you have a Car, you NEED to have a CAR Insurance.\n\nThere are various terms to consider, while selecting which insurance is best:\n\n## 1. Premium\n- Amount paid to the insurance company each month.\n- Range based on the property value and choices made.\n- Insurance company uses EVERYONE's premium to cover for that situation.\n\n---\n\n## 2. Deductable\n\n- The deductible is how much you have to pay out to cover a problem or accident that comes up before the insurance company pays anything. \n- A deductible in the range of say 500 to $5000 is pretty common.\n- Higher the deductible, the lower the premium, lower the risk.\n- To sum up, Higher Deductible + Lower Coverage = Lower Premium / Monthly bills.\n\n## 3. Declarations Page\n\n- Outlines covered in your insurance\n- Less Coverage = Less Premium\n- Higher Deductable + Less Coverage = Less Premiums / EMIs monthly.\n- The deductible is what you have to pay before your insurance kicks in and covers the remaining medical fees. \n- The deductible cost varies based on your plan. \n\n---\n\n# HSAs and if its right for you\n\nHSA stands for `Health Savings Account (HSA) Account` are a tax-free option often provided by employers, and they are a great tool to use in combination with insurance. \n- Say you have a high-deductible health insurance plan, one where you have to pay the first one or two thousand in medical expenses before the insurance kicks in. \n- You can save money, tax-free in an HSA account.\n- For example, if you have a car accident and you have to go to the hospital, that is where your insurance would kick in once you cover the deductible with your HSA. \n- The attractive feature about high-deductible health insurance plans is they're quite cheap mostly because they're there to cover you in the event of a true medical emergency or medical costs exceed $1,000 or whatever the deductible is. \n- You can contribute up to $3,350 a year for an individual or $6,650 for a family in an HSA to meet these deductible expenses, and there is no tax on the contributions. \n- Now be aware these figures do change over time, but $3,350 for an individual, $6,650 for a family are the current levels. If you're 55 or older, you can also contribute an extra $1,000 to an HSA. \n- You can withdraw that money from your HSA to pay for allowable medical expenses including copays and items like eyeglasses. \n- If you don't spend the money, it rolls over indefinitely, and as long as you save your receipts, you went through all money to reimburse yourself for expenses that you paid years ago. \n- If you're 65 or older, you can withdraw money for non-medical reasons without penalty, but you have to pay taxes on money you withdraw in that case. \n- If you withdraw the money before you're 65 for any reason besides medical expenses, you have to pay income taxes and a 20% penalty. \n- If you don't need the money for medical expenses, you can invest it just as you would other retirement savings. \n- Investment options for HSAs vary from company to company, but usually you can invest your unused HSA balance in one of a number of mutual funds. This is a great option because you can save $6,650 a year, remember that's the max for a family HSA, early on in your career when you're less likely to need it. That money is then tax deferred so you won't pay taxes on that $6,650, and you can invest the untaxed funds in a mutual fund within the HSA. \n- The untaxed money earns a return through those mutual funds over time, and so if you can avoid using the money until you need it later in life, you'll have built up quite a nest egg.\n\n---\n\n# HSA - Practical Applications\n\nThis is a great strategy for building wealth while also having a good reserve set aside for any medical emergencies that do come up. \n\n- Do you have a high-deductible health insurance plan? \n- Do you think you will have medical expenses that you need to pay for? \n- And can you afford to take withdrawal from your paycheck for the HSA? \n\nGet started by answering these three questions before deciding whether an HSA account is the way to go for your health insurance plan.\n\n---\n\n# Questions & Answers\n\n- _What type of life insurance has a fixed premium throughout the beneficiary's life?_\n- `Whole life insurance / policies` generally have fixed premiums.\n\n---\n\n- _Which term refers to the money an insurance company pays to policyholders relative to the premiums it receives?_\n- `The Loss ratio` is payouts to policyholders/premiums received.\n\n---\n\n- _What does HSA stand for?_\n- HSA stands for `Health Savings Account`\n\n---\n\n- _What factor would likely lead to a lower premium on a home insurance policy?_\n- `Higher deductible` leads to a lower premium.\n\n---","date":1.570296190553E+12,"__v":0}
{"_id":{"$oid":"5d98d5c399fa8300166d506d"},"tags":[{"$oid":"5d98320f15b66a00168212cd"},{"$oid":"5d98324215b66a00168212ce"},{"$oid":"5d98326915b66a00168212cf"}],"groups":[{"$oid":"5d9831d715b66a00168212cc"}],"title":"Insurance Companies - Overview","type":"article","question":"# Insurance Companies\n\nThe social value of insurance is that it shifts risk from ordinary people such as you and me to a large insurance company. \n- We pay insurance companies to take risk away from us from risk like: \n- Healthcare cost risk, \n- House fire risk, \n- Automobile damage risk, \n- Early death risk, and so forth. \n\n# How do Insurance companies make money ?\n\nInsurance companies earn their money in two ways.\n- `Price Premiums` to cover losses \n    - First, they are very good at estimating what their losses are and then pricing their premiums to cover those losses. \n    - That's the most common way we think about insurance companies. \n    - They charge a premium and the losses they have to pay for are less than the premiums that they collect. \n- Now, in addition to balancing the cost of claims against the amount of premiums collected, insurance companies also make money in another way, through `Investments`.\n\n---","answer":"# Now, what type of insurance companies are there ? \n\nWell, we are familiar with all of these. \n- There are `Property & Casualty insurance` companies. They cover losses from flood, fire, earthquake, and automobile losses. Examples include State Farm, Allstate, and Geico. \n- Another type of insurance is `Health insurance`. These insurance companies cover traditional health insurance, catastrophic health insurance, disability insurance, and long-term healthcare insurance. A well-known health insurance company is Blue Cross Blue Shield. \n- There are also `Life insurance companies`. You can buy life insurance policies from companies such as Prudential, MetLife and New York Life. We pay premiums and the insurance company guarantees that they will pay money to our family if and when we die.\n- Another type of insurance is `Business insurance`. Doctors pay insurance companies to help them with medical malpractice. Other companies buy business interruption insurance in case some outside event hinders or stops their business operations. Companies that insure businesses include Zurich Insurance, Travelers Insurance, and AIG. \n\n# What does Insurance Companies do with the Premiums ?\n\nThink about the timing of the cash flows in the insurance business. I pay my premiums to the insurance company now and they pay losses on my behalf later. \n- The insurance company has the use of that money from the moment I give it to them to the moment they have to pay out the claims. \n- Now, what can they do with that float, the money that's available to them? Well, they can invest in other companies. \n- They can invest in stocks, bonds, and mutual funds. \n- They can invest in real estate development projects. \n- Insurance companies make a great deal of money on their investments while they are waiting to pay for the insurance claims that come in. - Because insurance companies are able to make profits from these investments, they can lower the cost that they charge us for insurance. \n- Thus, we see that insurance companies are another form of financial institution. \n\n# To Summarize\n\nTo review, if we were all financially sophisticated and had infinite time and perfect communication with everyone else in the world, we would arrange borrowing, investing, and savings transactions personally among ourselves. We would also manage risk ourselves. We wouldn't need special insurance companies, but we don't have infinite time, and we don't have perfect information. And we are not all financially sophisticated. \n\nFinancial institutions provide us with financial sophistication for a price. They gather savings from lots of investors like you and me and channel those savings to entrepreneurs on our behalf.\n","date":1.570297283251E+12,"__v":0}
{"_id":{"$oid":"5d98e097aef49600166c02f9"},"tags":[{"$oid":"5d98320f15b66a00168212cd"},{"$oid":"5d98326915b66a00168212cf"}],"groups":[{"$oid":"5d9831d715b66a00168212cc"}],"title":"Insurance Questions - Part 1","type":"article","question":"# Questions & Answers\n\n- [Important Links - Interview Questions](https://career.guru99.com/top-50-insurance-interview-questions/)\n\n### 1. What type of life insurance has a fixed premium throughout the beneficiary's life ?\n- `Whole life insurance / policies` generally have fixed premiums.\n\n---\n\n### 2. Which term refers to the money an insurance company pays to policyholders relative to the premiums it receives ?\n- `The Loss ratio` is payouts to policyholders/premiums received.\n\n---\n\n### 3. What does HSA stand for ?\n- HSA stands for `Health Savings Account`\n\n---\n\n### 4. What factor would likely lead to a lower premium on a home insurance policy ?\n- `Higher deductible` leads to a lower premium.\n\n---\n\n### 5. What are the different types of Insurance Coverage ?\n\nInsurance policy is categorised into two\n- `General or Non-life` Insurance coverage\n- `Life Insurance` coverage\n\n---\n\n### 6. What do you mean by the term - insurance coverage ?\n- The term `insurance coverage` means, when an individual takes an insurance policy the insured will be covered by insurance company for a specific amount for themselves or the things that he had taken the insurance policy, \n- for which he would be paying premiums to the insurance company.  \n- The insurance company will pay the insured in case of damage or claims made by the insured according to their `insurance coverage`.\n\n---\n\n### 7. What is a premium ?\n\nIt is the amount to be paid for a contract of insurance to the insurance company. It is the sum that a person pays **monthly**, **quarterly** or **annually** according to their plan, in return of the coverage he/she has taken from the insurance company.\n\n---\n\n### 8. What do you mean by term ‘Insurer’ and ‘Insured’ ?\n\n`Insured` is the one who holds the policy and `Insurer` is the company that covers the insured.\n\n---\n\n### 9. Who is the beneficiary ?\n\nBeneficiary is the one whom `you have nominated` for the insured amount in case of your death.\n\n---\n\n### 10. What is the 'contestable period' in insurance policy ?\n\n`Contestable period` is usually 1 or 2 years, during which the insurance company holds all the right to investigate the policy and decide whether to pay or not to pay to the insured.\n\n---\n\n### 11. What is the difference between “revocable beneficiary” and “irrevocable beneficiary” ?\n\n`Revocable beneficiary` designation gives right to the policy holder to change the beneficiary name without the consent of the named beneficiary. While in `Irrevocable beneficiary` the policy holder has to take consent of the beneficiary before the name is changed.\n\n---\n\n### 12. What is no-claim bonus ?\n\nA `No claim bonus` is a benefit for those who have not claimed insurance during the preceding year of cover. This will lower the premium on the following year.\n\n---","answer":"### 13. What is ‘declaration page’ in insurance policy ?\n\n`Declaration page` in insurance policy, bears all the information of the policy holder like name, address, vehicle information, type of coverage and loss payee information.\n\n---\n\n### 14. What do you mean by ‘Loss Payee’ ?\n\nThe `Loss payee` is a person or institution (Bank) that receives the insurance payment on the loss of the property or vehicle you own.  It is a legal definition used to cover the investment of other parties or bank that is owned by you. For example, you have a car on loan, and also you have insurance for that car. Now you met an accident, and your car is a total loss (meaning completely damaged beyond repair). Your bank still owes money from you in such case when you claim the insurance; the insurance company will pay money directly to Bank or person you owes money. Here bank is a `Loss payee`.\n\n---\n\n### 15. What do you mean by ‘Deductible’ ?\n\n`Deductible` is one of the several types of clause that are used by the insurance company as a threshold for policy payment for health insurance or travel insurance. `Deductible` is a decided amount that you have to pay from your pocket while claiming the insurance.  For example, you have a `deductible` of $500, and you have insurance coverage for $2000, then you are responsible for paying for $500 and the remaining amount $1500 will be paid by insurance company.\n\n---\n\n### 16. What is Co-insurance ?\n\n`Co-insurance` term is usually referred to health insurance companies.  In this type of policy, you share the coverage with, the insurance company in percentage of the policy value, after paying deductible or co-payment.  It is the split of insurance coverage between you and insurance company; usually the split would be 80/20 % where you are liable to pay 20% and the remaining amount by the insurance company.  For example, for health policy you have claimed for $200, according to policy clause you have to pay deductible, let say $100, now after paying deductible the remaining amount is $100, now you have a `co-insurance` which is split into 80/20%. So you will pay $20 out of $100 from your pocket while the $80 will be paid by `co-insurance`(meaning the insurance company).\n\n---\n\n### 17. What do you mean by term “Annuity” ?\n\nAn annuity is the term used for the regular amount paid by the insurance company to the insured, after a certain period of time. The payment can be monthly or quarterly, this is often done to supplement income after retirement.\n\n---\n\n###  18. What is the Surrender Value ?\n\nSurrender Value is the amount when you stop paying the premium and withdraw the entire amount. The policy ceases as soon as you withdraw the money, and the insured will lose out all the returns on it.\n\n---\n\n### 19. What is Paid Value ?\n\nThe paid value is something, when the insured stops paying the premium but do not withdraw the amount. The sum assured by the insurance company is reduced proportionally depending when insured has stopped paying the premium.  You will get the amount at the end of the term.\n\n---\n\n### 20. Is it advisable to replace the policy with another policy ?\n\nIf it is not a long duration that you have bought the policy, then you can replace the policy. But in other case it is not advisable as you will lose all the benefits of the previous policy also the premium will go high as you go older.  Also, the two-year period of contestability will also begin again.\n\n---\n\n### 21. How to claim the policy ?\n\nIn order to claim the policy, you have to fill up the claim form and contact your financial advisor from whom you have bought the policy. You have to supplement all the required documents like original payment receipt to your insurance company.  If everything is ok, you will be paid within seven days of the policy claimed.\n\n---\n\n### 22. What happens if you fail to make required premium payments ?\n\nUsually, Insurance Company gives a grace period of 10-15 days to the insured if they fail to pay the premium before the due date.  Further, if you fail to pay a premium, then your policy will lapse.  You can revive your policy by paying the outstanding premium along with the interest, counted from the date the policy got lapsed. Different Insurance Company has a different norm for reviving the policy.\n\nHowever, if your policy is in force for alonger period like say more than2-3 years,and if you fail to pay a premium, then insurance company will deduct the premium amount from your accumulated funds, especially in permanent life insurance. This will continue till there is an available fund after which your policy will be terminated.\n\n---\n\n###  23. Is it safe to pay the premium through Insurance Agent ?\n\nIt is safe to pay the premium through your agent as far as you are making the payment through cheques on the name of Insurance Company and receiving all the receipts for the payments.\n\n---\n\n### 24. Is it possible to get the full payment on cancelling the new policy in free look period ?\n\n`Free Look Period` is a time-period where the insured can cancel their newly bought policy in a specific period of time from the date of issuing the policy without any penalties or surrender charges.\n\nYes, it is possible to get the full payment in free look period; you can cancel your new policy in 15 days by returning the policy to the life Insurance company after you receive all the documents related to the policy.\n\n---","date":1.570300055135E+12,"__v":0}
{"_id":{"$oid":"5d9b41bd00792e0016b2afaa"},"tags":[{"$oid":"5d520639aa54c34180a48139"},{"$oid":"5d6bdb962a77330016c74e2f"},{"$oid":"5d98324215b66a00168212ce"}],"groups":[{"$oid":"5d520740aa54c34180a4813e"}],"title":"Typescript - Functional Component Props Type declaration","type":"question","question":"# Provide Syntax for creating a functional component using Typescript - React\n\n- Explain what is an Interface\n- How do you use the Interface in your Functional component.\n- [Difference between Typescript Type and Interface](https://www.educba.com/typescript-type-vs-interface/)\n\n# Difference between Typescript Type and Interface\n\n\n- TypeScript `Type` declaration can introduce a name for any kind of type including primitive, union or intersection type. `Interface` declaration always introduced the named object type.\n- The syntax for `Type` can be written as `type ABC = {a: number, b: number};`. The syntax for `Interface` can be written as `interface ABC {a: number; b: number;}`.\n- In TypeScript, `Type` does not create a new name for instance. In TypeScript, an `Interface` can create the new name that can be used everywhere.\n- `Type` does not have a functionality of extending. An `Interface` can extend multiple interfaces and class as well.\n- `Type` is mainly used when a union or tuple type needs to be used. In typescript, sometimes developers cannot express some of the shapes with an `Interface`.\n","answer":"# Typescript - Simple component without Prop Types\n\nThe following code snippet shows how to declare a very simple component without any custom prop types using Typescript\n\n```javascript\n/**\n * Simple Button Component\n * need not pass any generic if you dont want any custom prop type\n */\nimport React, { FunctionComponent } from 'react';\n\n\nconst SimpleButton: FunctionComponent = (props): JSX.Element => {\n    return (\n        <React.Fragment>\n            <button onClick={()=> console.log('Simple button clicked')}\n                    className=\"md:mt-6 \n                    outline-none \n                    focus:outline-none \n                    hover:bg-indigo-100 \n                    self-end \n                    flex mx-auto \n                    lg:mx-0 \n                    bg-white \n                    text-gray-800 \n                    font-bold \n                    rounded-full \n                    my-2 \n                    py-2 \n                    px-8 \n                    shadow \n                    opacity-75\">Simple Button</button>\n        </React.Fragment>\n    );\n};\n\nexport default SimpleButton;\n\n```\n\n---\n\n# 1. Functional Component using Type\n\nTo declare a Typescript functional component, We first write what datatypes to the our `props` we need to pass.\n\nThe below code how to use `Type` keyword to define our custom props. Later we will implement the same component using `Interface` keyword\n\n```javascript\ntype ISelectOption = {\n    title: string,\n    onClick:(evt: any) => void\n};\n```\n\nWe are using the `type` keyword to derive our proptypes.\n\nOur Functional Component is then declared as follows:\n\n```javascript\n/**\n * Reusable Rounded Button Component\n */\nimport React, { FunctionComponent } from 'react';\n\ntype ISelectOption = {\n    title: string,\n    onClick:(evt: any) => void\n};\n\n/**\n * Reusable Rounded Button Component\n */\nimport React, { FunctionComponent } from 'react';\n\ntype ISelectOption = {\n    title: string,\n    onClick:(evt: any) => void\n};\n\nconst RoundedButton: FunctionComponent<ISelectOption> = (props): JSX.Element => {\n    return (\n        <React.Fragment>\n            <button onClick={props.onClick}\n                    className=\"md:mt-6 \n                    outline-none \n                    focus:outline-none \n                    hover:bg-indigo-100 \n                    self-end \n                    flex mx-auto \n                    lg:mx-0 \n                    bg-white \n                    text-gray-800 \n                    font-bold \n                    rounded-full \n                    my-2 \n                    py-2 \n                    px-8 \n                    shadow \n                    opacity-75\">{props.title}</button>\n        </React.Fragment>\n    );\n};\n\nexport default RoundedButton;\n```\n\n---\n\n# 2. Functional Component using an Interface\n\nThe same Rounded Button can be declared using an `Interface` as shown below. This also works in React:\n\n```javascript\n/**\n * Reusable Rounded Button Component\n */\nimport React, { FunctionComponent } from 'react';\n\ninterface ISelectOption {\n    title: string,\n    onClick:(evt: any) => void\n};\n\nconst RoundedButton = (props: ISelectOption): JSX.Element => {\n    return (\n        <React.Fragment>\n            <button onClick={props.onClick}\n                    className=\"md:mt-6 \n                    outline-none \n                    focus:outline-none \n                    hover:bg-indigo-100 \n                    self-end \n                    flex mx-auto \n                    lg:mx-0 \n                    bg-white \n                    text-gray-800 \n                    font-bold \n                    rounded-full \n                    my-2 \n                    py-2 \n                    px-8 \n                    shadow \n                    opacity-75\">{props.title}</button>\n        </React.Fragment>\n    );\n};\n\nexport default RoundedButton;\n```\n\n---\n\n# What's the difference ?\n\n- Its more of a choice of preference than a comparison on which is best. Typescript respects both `Type` or `Interface` declaration. Also important to note that both these keywords are Typescript specific. ie., they dont exist post compilation.\n\n- **NOTE:** If you want to use the datatype `FunctionComponent` then you must pass the interface / type as a `generic` to the FunctionComponent. like so:\n\n```javascript\n// If datatyping FunctionComponent, pass the interface / type as generic\nconst RoundedButton: FunctionComponent<ISelectOption> = (props): JSX.Element => {\n...\n}\n```\n\nThe below code will throw an error, As React assums that your `FunctionComponent` has a `void` return type:\n\n```javascript\n// This throws an error\nconst RoundedButton: FunctionComponent = (props: ISelectOption): JSX.Element => {\n....\n}\n```\n\n","date":1.570513933515E+12,"__v":0}
{"_id":{"$oid":"5da140acf1d1da0016260097"},"tags":[{"$oid":"5d520639aa54c34180a48139"}],"groups":[{"$oid":"5d520740aa54c34180a4813e"}],"title":"Redux - Principles","type":"question","question":"# Explain the 3 principles of Redux. Also explain the following\n\n- Redux `STORE`\n- Redux `ACTION`\n- Redux `REDUCER`","answer":"# Redux Basics\n\n## Redux STORE\n\n- The Redux `STORE` can be likened to the Bank Vault. It holds the state of your application - and keeps it safe.\n- `First Principle #1:`\n> - _\"Have a single source of truth: The state of your whole application is stored in an object tree within a single Redux store\"._\n\n## Redux ACTION\n\n- An **ACTION** is the only way to change the state of the app.\n- If you want to update the state of your Redux application (like you do with setState in React,) you need to let Redux know about that with an `ACTION`.\n- This process is mostly called DISPATCHING an ACTION.\n- `Redux Principle #2:`\n> - _\"State is read-only: The only way to change the state is to emit an action, an object describing what happened\"._\n\n## Redux REDUCER\n\n- It interprets our actions and manipulates the app based on them.\n- If you want to update the state of your application, you convey your ACTION to the `REDUCER`\n- `Redux Principle #3:`\n> - _\"To specify how the state tree is transformed by actions, you write pure reducers\"._\n\n## Important Points\n\n\n- Redux is a predictable state container for JavaScript apps.\n- The createStore factory function from Redux is used to create a Redux STORE.\n- The Reducer is the only mandatory argument passed into createStore().\n- A REDUCER is just a function. A function that takes in two parameters. The first being the STATE of the app, and the other being an ACTION.\n- A Reducer always returns the NEW STATE of your application.\n- The INITIAL STATE of your application, initialState is the second argument passed into the createStore function call.\n- Store.getState() will return the current state of your application, where store is a valid Redux STORE.\n","date":1.570856382546E+12,"__v":0}
{"_id":{"$oid":"5da15b1b10274b001611887d"},"tags":[{"$oid":"5d520639aa54c34180a48139"}],"groups":[{"$oid":"5d520740aa54c34180a4813e"}],"title":"Simple Redux - STORE, REDUCER","type":"question","question":"# Explain how to create a STORE and a REDUCER using simple REDUX package\n\n- Create `initialState`\n- Create a simple `reducer`\n- Create a `store` using { `createStore` }  from `'redux'`","answer":"# Installing Redux package\n\nYou can install redux package using the following npm command:\n\n```bash\nnpm install --save redux\n```\n\n---\n\n# Redux STORE\n\nWe will make use of the `createStore` function from the `redux` module\n\n```javascript\nimport { createStore } from 'redux';\n```\n\nTo create a store object, we will pass 2 parameters to the `createStore` function\n\n```javascript\nconst initialState = { tech: \"React \" };\nconst store = createStore(reducer, initialState);\n```\n\nThe first parameter is the Redux `REDUCER`\n\n---\n\n# Redux REDUCER\n\nFor now our reducer, simply returns the currentState\n\n```javascript\nexport default state => {\n  return state\n}\n```\n\n---\n\n# Pass Redux STORE to App component\n\nFinally, for React to access the single STORE object, pass the store object's `getState()` function\n\n```javascript\nimport React, { Component } from \"react\";\nimport HelloWorld from \"./HelloWorld\";\nimport { createStore } from \"redux\";\nimport reducer from \"./reducers\";\n\nconst initialState = { tech: \"React \" };\nconst store = createStore(reducer, initialState);\n\nclass App extends Component {\n  render() {\n    return <HelloWorld tech={store.getState().tech}/>\n  }\n}\n\nexport default App;\n```\n\n---\n\nAnd that is it! You just learned the `Redux` basics and successfully refactored a simple React app to use `Redux`.\n\nThe React application now has its state managed by `Redux`. Whatever needs to be gotten from the `STATE` object will be grabbed from the `STORE` as shown earlier.\n\n---\n\n# state Gotchas\nConsider the following solution\n\n```javascript\nclass App extends Component {\n  state = store.getState();\n  render() {\n    return <HelloWorld tech={this.state.tech} />;\n  }\n}\n```\n\nSo, back to answering the question, yes, the solution will work just fine.\n\n`store.getState()` will grab the current state from the Redux `STORE`.\n\nHowever, the assignment, state = store.getState() will assign the state gotten from Redux to that of the < App /> component.\n\nBy implication, the return statement from render i.e `<HelloWorld tech={this.state.tech} />` will be valid.\n\nNote that this reads `this.state.tech NOT store.getState().tech`. Even though this works, it is **against the ideal philosophy of Redux**.\n\nIf within the app, you now run, this.setState(), the App’s state will be updated without the help of REDUX.\n\nThis is the default React mechanism, and it isn’t what you want. **You want the state managed by the Redux STORE to be the single source of truth.**\n\nWhether you’re retrieving state, as in store.getState() or updating/changing state (as we’ll cover later) you want that to be entirely managed by Redux, not by setState().\n\nSince Redux manages the app’s state, all you need to do is feed in the state from the Redux STORE as props to any required component.\n\n---","date":1.570856279772E+12,"__v":0}
{"_id":{"$oid":"5da1e4516949e500162c1ffe"},"tags":[{"$oid":"5d5a437e1ddcc90016428fea"},{"$oid":"5d8ede5c9ccd7e0016cdb48f"}],"groups":[{"$oid":"5d5a403a1ddcc90016428fe7"}],"title":"JWT Token Authentication - Login","type":"question","question":"# Explain the Authentication (Login)  using JWT - Token in Nest JS\n\n- Configuring `auth.module.ts`\n- Configuring `auth.service.ts`\n- Defining Type using `jwt-payload.interface.ts`\n- Using `@nest/jwt` module - `JwtService`","answer":"# Solution\n\n## 1. Package Dependencies\n\nWe are going to need the following modules for JWT Authentication\n\n```json\n\"dependencies\": {\n \"@nestjs/jwt\": \"^6.1.1\",\n \"@nestjs/passport\": \"^6.1.0\",\n \"passport\": \"^0.4.0\",\n \"passport-jwt\": \"^4.0.0\",\n}\n```\n\n---\n\n## 2. Auth Module Configuration\n\nWe need to wire in JWT Module in our Authentication Module:\n\n> **NOTE:** We are going to configure our Signature `secret key` here !\n\n```javascript\nimport { Module } from '@nestjs/common';\nimport { JwtModule } from '@nestjs/jwt';\nimport { PassportModule } from '@nestjs/passport';\nimport { AuthController } from './controllers/auth.controller';\nimport { AuthService } from './services/auth.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { UserRepository } from './repos/user.repository';\n\n@Module({\n  imports: [\n    PassportModule.register({\n      defaultStrategy: 'jwt'\n    }),\n    JwtModule.register({\n      secret: 'topSecret51',\n      signOptions: {\n        expiresIn: 3600        \n      }\n    }),\n    TypeOrmModule.forFeature([UserRepository])\n  ],\n  controllers: [AuthController],\n  providers: [AuthService]\n})\nexport class AuthModule {}\n\n```\n\n---\n\n## 3. JWT Payload Interface declaration\n\nIn order to specify the type that goes into our JWT signature, we will define our JWT Payload interface\n\n```javascript\nexport interface JwtPayload {\n    username: string;\n}\n```\n\n---\n\n## 4. Auth Service - Login Method\n\nFor Authentication, in our **auth.service.ts** we will make use of the nest js module - jwtservice\n\n```javascript\nimport { JwtService } from '@nestjs/jwt';\n```\n\nWe will add this as Dependency injection in our service, by defining a field in our constructor as follows:\n\n```javascript\n    constructor(\n        @InjectRepository(UserRepository)\n        private userRepository: UserRepository,\n        private jwtService: JwtService,\n    ) {}\n```\n\nFinal implementation where we sign our payload and return the JWT Token.\n\n```javascript\nimport { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { UserRepository } from '../repos/user.repository';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { AuthCredentialsDto } from '../dto/auth-credentials.dto';\nimport { JwtService } from '@nestjs/jwt';\nimport { JwtPayload } from '../interfaces/jwt-payload.interface';\n\n@Injectable()\nexport class AuthService {\n    \n    constructor(\n        @InjectRepository(UserRepository)\n        private userRepository: UserRepository,\n        private jwtService: JwtService,\n    ) {}\n\n    async signUp(authCredentialsDto: AuthCredentialsDto): Promise<void> {\n        return this.userRepository.signUp(authCredentialsDto);\n    }\n\n    // Returning JWT Token upon login\n    async login(authCredentialsDto: AuthCredentialsDto): Promise<{accessToken: string}> {\n        const username = await this.userRepository.validateUserPassword(authCredentialsDto);\n        if (!username) {\n            throw new UnauthorizedException('Invalid Credentials');\n        }\n        const payload: JwtPayload = { username };\n        const accessToken = await this.jwtService.sign(payload);\n        return { accessToken: accessToken };\n    }\n    \n}\n\n```\n\n---\n\n## 5. Finally, changing the return signature in our controller\n\nSince the return signature of our Service has now changed to **Promise<{accessToken:string}>**, We need to change the same for login method in our controller / handler\n\n```javascript\nimport { Controller, Post, Body, ValidationPipe, UnauthorizedException } from '@nestjs/common';\nimport { AuthCredentialsDto } from '../dto/auth-credentials.dto';\nimport { AuthService } from '../services/auth.service';\n\n@Controller('auth')\nexport class AuthController {\n\n    constructor(        \n        private authService: AuthService\n    ) {}\n\n    @Post('/signup')\n    async signUp (\n        @Body(ValidationPipe) authCredentialsDto: AuthCredentialsDto\n    ) {\n        return this.authService.signUp(authCredentialsDto);\n    }\n\n    @Post('/login')\n    async login (\n        @Body(ValidationPipe) authCredentialsDto: AuthCredentialsDto\n    ): Promise<{accessToken: string}> {\n        const username = await this.authService.login(authCredentialsDto);\n        if(!username) {\n            throw new UnauthorizedException('Invalid Credentials');\n        } else {\n            return username;\n        }\n    }\n}\n\n```\n\n\n\n\n\n","date":1.570891071371E+12,"__v":0}
{"_id":{"$oid":"5da2eddc2c1a97001693a76f"},"tags":[{"$oid":"5d5a437e1ddcc90016428fea"},{"$oid":"5d8ede5c9ccd7e0016cdb48f"}],"groups":[{"$oid":"5d5a403a1ddcc90016428fe7"}],"title":"JWT Validation - UseGuards, AuthGuard","type":"question","question":"## Explain step by step process of using JWT Validation & its invocation both on Request based and on Handler based declarations.\n\n- Explain JWT's `AuthGuard`\n- Explain how to create `JWT.strategy.ts`\n- How to export JWT Validation from a `Module`\n- Identify User information from a Request using `@Req()` decorator","answer":"# Solution\n\n## 1. Create a jwt.config.ts configuration file\n\nWe will refactor some code in our `auth.module.ts` where we extract the secretKey into a separate file - `jwt.config.ts`\n\n> - jwt.interface.ts\n\n```javascript\nexport interface JwtPayload {\n    username: string;\n}\n\nexport interface JwtSecret {\n    secretOrKey: string;\n}\n```\n\n> - jwt.config.ts\n\n```javascript\nimport { JwtSecret } from './../interfaces/jwt-payload.interface';\n\nexport const jwtSecret: JwtSecret = {\n    secretOrKey: 'topSecret51'\n};\n```\n\n---\n\n## 2. Refactor auth.module.ts\n\n```javascript\nimport { jwtSecret } from './config/jwt.config';\n...\n...\n...\n\n@Module({\n  imports: [\n    PassportModule.register({\n      defaultStrategy: 'jwt'\n    }),\n    JwtModule.register({\n      secret: jwtSecret.secretOrKey,\n      signOptions: {\n        expiresIn: 3600        \n      }\n    }),\n    TypeOrmModule.forFeature([UserRepository])\n  ],\n...\n...\n...\n})\nexport class AuthModule { }\n```\n\n---\n\n## 3. Setup a JWT.strategy.ts service configuration\n\nFor validating, we will create a `jwt.strategy.ts` Service file, which needs a mandatory method - `validate`\n\n```javascript\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Strategy, ExtractJwt } from 'passport-jwt';\nimport { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { jwtSecret } from './../config/jwt.config';\nimport { JwtPayload } from '../interfaces/jwt-payload.interface';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { UserRepository } from '../repos/user.repository';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n constructor(\n     @InjectRepository(UserRepository)\n     private userRepository: UserRepository\n ) {\n     super({\n         jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n         secretOrKey: jwtSecret.secretOrKey\n     });\n }\n\n async validate (payload: JwtPayload): Promise<any> {\n    const { username } = payload;\n    const user = await this.userRepository.findOne({ username });\n\n    if (!user) {\n        throw new UnauthorizedException();\n    }\n    \n    return user;\n }\n}\n\n```\n\n## 4. Dependency Inject JWT strategy service file into our Auth Module\n\nWith the `jwt.strategy.ts` service file definition, we can inject it in our module and also make it an exportable module via out `auth.module.ts`. Like so:\n\n\n> - auth.module.ts\n\n```javascript\nimport { Module } from '@nestjs/common';\nimport { JwtModule } from '@nestjs/jwt';\nimport { PassportModule } from '@nestjs/passport';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n// Custom components\nimport { AuthController } from './controllers/auth.controller';\nimport { AuthService } from './services/auth.service';\nimport { UserRepository } from './repos/user.repository';\nimport { jwtSecret } from './config/jwt.config';\nimport { JwtStrategy } from './services/jwt.strategy';\n\n@Module({\n  imports: [\n    PassportModule.register({\n      defaultStrategy: 'jwt'\n    }),\n    JwtModule.register({\n      secret: jwtSecret.secretOrKey,\n      signOptions: {\n        expiresIn: 3600        \n      }\n    }),\n    TypeOrmModule.forFeature([UserRepository])\n  ],\n  controllers: [AuthController],\n  providers: [\n    AuthService,\n    JwtStrategy\n  ],\n  exports: [\n    JwtStrategy,\n    PassportModule\n  ]\n})\nexport class AuthModule {}\n\n```\n\n## 5. Using Nest JS' @UseGuards() decorator and Passport's AuthGuard() module.\n\nWith the `jwt.strategy.ts` now available as dependency injection, we can easily attach Authentication, like an interceptor using two important modules from both Nest JS and Passport\n\n- `@UseGuards()` - Nest JS decorator for validating requests\n- `AuthGuard` - Passport's module for JWT validation\n\n```javascript\nimport { Controller, Post, Body, UseGuards, ValidationPipe, UnauthorizedException, Req } from '@nestjs/common';\nimport { AuthCredentialsDto } from '../dto/auth-credentials.dto';\nimport { AuthService } from '../services/auth.service';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Controller('auth')\nexport class AuthController {\n\n    constructor(        \n        private authService: AuthService\n    ) {}\n\n    @Post('/signup')\n    async signUp (\n        @Body(ValidationPipe) authCredentialsDto: AuthCredentialsDto\n    ) {\n        return this.authService.signUp(authCredentialsDto);\n    }\n\n    @Post('/login')\n    async login (\n        @Body(ValidationPipe) authCredentialsDto: AuthCredentialsDto\n    ): Promise<{accessToken: string}> {\n        const username = await this.authService.login(authCredentialsDto);\n        if(!username) {\n            throw new UnauthorizedException('Invalid Credentials');\n        } else {\n            return username;\n        }\n    }\n\n    @Post('/test')\n    @UseGuards(AuthGuard())\n    test(@Req() req) {\n        console.log('Request is: ', req);\n    }\n}\n\n```","date":1.570958812031E+12,"__v":0}
{"_id":{"$oid":"5da31bccc678560016612679"},"tags":[{"$oid":"5d5a437e1ddcc90016428fea"},{"$oid":"5d8ede5c9ccd7e0016cdb48f"}],"groups":[{"$oid":"5d5a403a1ddcc90016428fe7"}],"title":"Custom Decorators vs Built in Decorators","type":"question","question":"# Explain Built in Decorators versus Creating Custom Decorators in Nest JS\n\n- Create a Parameter level Custom Decorator\n- Differentiate Custom and Built in Decorators.\n- How to use Decorators in your Nest JS controllers.","answer":"# Custom Decorators\n\nUntil, we were only utilizing Built-in Decorators either mainly from **Nest JS** module or from an external Module such as **JWT Passport**\n\nWe can write our own Custom Decorators which are wrappers around built-in ones and can be easily exported and added into Handler level or on Controller level\n\nThese `custom decorators` that we are writing mainly act like `Interceptors` which are on handler level.\n\nWe will be creating a Parameter level Decorator. A Decorators needs two parameters\n- `data`: The data passed as parameter to the decorator\n- `req`: The Request object of the Handler\n\nThis custom decorator `GetUser` will return only the User object from the entire Request object.\n\n> - `GetUser` decorator (auth.decorators.ts)\n\n```javascript\nimport { createParamDecorator } from \"@nestjs/common\";\nimport { User } from \"../entities/user.entity\";\n\n/**\n * Custom Decorators for Authentication\n */\nexport const GetUser =  createParamDecorator((data, req): User => {\n    return req.user;\n});\n```\n\nWith the custom decorator defined, we can easily intergate it to our `Auth Controller`\n\n```javascript\nimport { Controller, Post, Body, UseGuards, ValidationPipe, UnauthorizedException, Req } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n// Custom Components\nimport { AuthCredentialsDto } from '../dto/auth-credentials.dto';\nimport { AuthService } from '../services/auth.service';\nimport { GetUser } from '../decorators/auth.decorators';\nimport { User } from '../entities/user.entity';\n\n@Controller('auth')\nexport class AuthController {\n\n    constructor(        \n        private authService: AuthService\n    ) {}\n\n    @Post('/signup')\n    async signUp (\n        @Body(ValidationPipe) authCredentialsDto: AuthCredentialsDto\n    ) {\n        return this.authService.signUp(authCredentialsDto);\n    }\n\n    @Post('/login')\n    async login (\n        @Body(ValidationPipe) authCredentialsDto: AuthCredentialsDto\n    ): Promise<{accessToken: string}> {\n        const username = await this.authService.login(authCredentialsDto);\n        if(!username) {\n            throw new UnauthorizedException('Invalid Credentials');\n        } else {\n            return username;\n        }\n    }\n    \n    // Custom Decorator - GetUser from auth.decorators.ts file\n    @Post('/test')\n    @UseGuards(AuthGuard())\n    test(@GetUser() user: User): User { // returns only the user object from the Request object.\n        return user;\n    }\n}\n\n\n```\n\n**NOTE:** This Decorator will only work, if its preceeded by the Built in `@UseGuards` & `AuthGuard` decorators.","date":1.570970572661E+12,"__v":0}
{"_id":{"$oid":"5da33cc3ef708700168c078a"},"tags":[{"$oid":"5d5a437e1ddcc90016428fea"},{"$oid":"5d8ede5c9ccd7e0016cdb48f"}],"groups":[{"$oid":"5d5a403a1ddcc90016428fe7"}],"title":"Protecting Routes with Auth Module","type":"question","question":"## Explain how to protect routes with Authentication Module.\n\n- Explain how to wire Authentication Module into Task Module.\n- Use of `@UseGuard()` and `AuthGuard()` Decorator.","answer":"# Solution\n\nIn order to integrate `AuthModule`, simple import it as part of `TaskModule's` `imports` array:\n\n> - task.module.ts\n\n```javascript\nimport { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n// Custom Components\nimport { TasksController } from './controllers/tasks.controller';\nimport { TasksService } from './services/tasks.service';\nimport { TaskRepository } from './repos/task.repository';\nimport { AuthModule } from './../auth/auth.module';\n\n@Module({\n  imports: [\n    AuthModule,\n    TypeOrmModule.forFeature([TaskRepository])\n  ],\n  controllers: [TasksController],\n  providers: [TasksService]\n})\nexport class TasksModule { }\n```\n\n---\n\nIn order to protect an entire route / handler, simply add the decorators at the top of the Class declaration\n\n> - task.controller.ts\n\n```javascript\nimport { Controller, Get, Post, Body, Param, Delete, Patch, Put, Query, UsePipes, ValidationPipe, ParseIntPipe, UseGuards } from '@nestjs/common';\nimport { TasksService } from '../services/tasks.service';\nimport { TaskStatus } from '../models/tasks.model';\nimport { CreateTasksDto, UpdateTaskDto, GetTaskFilterDto } from '../dto/tasks.dto';\nimport { TaskStatusValidationPipe } from '../pipes/tasks.pipes';\nimport { Task } from '../entities/task.entity';\nimport { filter } from 'minimatch';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Controller('tasks')\n@UseGuards(AuthGuard())\nexport class TasksController {\n\n    constructor(private taskService: TasksService) {}\n\n    @Get()\n    getTasks(@Query(ValidationPipe) filter: GetTaskFilterDto) {\n        return this.taskService.getTasks(filter);\n    }\n    \n    @Get('/:id')\n    async getTaskById(@Param('id', ParseIntPipe) id: number): Promise<Task> {\n        return this.taskService.getTaskById(id);\n    }\n\n    @Post()\n    @UsePipes(ValidationPipe)\n    async createTask(@Body() createTaskDto: CreateTasksDto): Promise<Task> {\n        return this.taskService.createTask(createTaskDto);\n    }\n\n    @Delete('/:id')\n    async deleteTaskById(@Param('id', ParseIntPipe) id: number): Promise <string> {\n        return this.taskService.deleteTaskById(id);\n    }\n\n    @Put('/:id')\n    @UsePipes(ValidationPipe)\n    updateTaskById (\n        @Param('id', ParseIntPipe) id: number,\n        @Body() updateTaskDto: UpdateTaskDto\n    ): Promise<Task> {\n            return this.taskService.updateTaskById(id, updateTaskDto);\n    }\n\n    @Patch('/:id/status')\n    updateTaskStatus (\n        @Param('id', ParseIntPipe) id: number,\n        @Body('status', TaskStatusValidationPipe) status: TaskStatus\n    ): Promise<Task> {\n        return this.taskService.updateTaskStatus(id, status);\n    }\n}\n\n```","date":1.570979011576E+12,"__v":0}
{"_id":{"$oid":"5da3e93f1b27490016a035d8"},"tags":[{"$oid":"5d5a437e1ddcc90016428fea"},{"$oid":"5d8ede5c9ccd7e0016cdb48f"}],"groups":[{"$oid":"5d5a403a1ddcc90016428fe7"}],"title":"Logging - Nest JS","type":"question","question":"# Explain Why is Logging Useful ? Types of Logs and Activating ? Uses of Logging in application.\n\nWhen something goes wrong, Logs can be useful for debugging purposes. It can also be useful during development and to inform in detail the process of development\n\n# Types of Logs\n\n- `Log` : General purpose logging for information. For support and tracking purpose\n- `Warning` : Unhandled issues that are not fatal or destructive\n- `Error` : Unhandled issues that are fatal / destructive\n- `Debug` : Useful information that can help developers debug the application during development\n- `Verbose` : Information providing insights about the behavior of the application. Intended for operators (usually - support level). _Usually too much information._","answer":"# Solution\n\nTo enable logging in your application. Nest JS provides the `Logger` module\n\n```javascript\nimport { Logger } from '@nestjs/common';\n```\n\n## Instantiating the Logger\n\nTo instantiate the Logger, we pass a context as string while constructor the logger instance\n\n```javascript\n// bootstrap is to provide a context\nconst logger = new Logger('bootstrap'); \n```\n\n## Controller\n\nIn Controller, the logger is introduced as a field\n\n```javascript\nexport class TasksController {\n    private logger = new Logger('TasksController');\n....\n....\n....\nthis.logger.verbose(`User retrieving all tasks. Filter: ${JSON.stringify(filterDto)}`);\n...\n}\n```","date":1.571023167958E+12,"__v":0}
{"_id":{"$oid":"5da5b2930f9efb0016574773"},"tags":[{"$oid":"5d5a437e1ddcc90016428fea"},{"$oid":"5d5c328779d75f001616d186"},{"$oid":"5d5c323779d75f001616d184"}],"groups":[{"$oid":"5d5c317e79d75f001616d183"}],"title":"Design Patterns & Anti Patterns - categories","type":"question","question":"# Explain Design Patterns and Anti-Patterns in Javascript / Node JS Development\n\nDesign Patterns are Reusable, Reliable solutions to problems that we face every day in software development.\n\nDesign Patterns were first introduced by the Gang of Four. in the year, 1994, in the book - **Elements of Reusable Object-Oriented software.**\n\n\n- Erich Gamma\n- Richard Helm\n- Ralph Johnson\n- John Vlissides","answer":"## The Design Patterns can be categorized into three categories \n_(Remember `B.Sc` -> Behavioral, Structural, Creational)._\n\n# 1. Creational Patterns:\nPatterns which deal with the creation of an instance: \n\n> **NOTE:** _Remember:  `A.B - F.P.S`_\n\n- Abstract Factory\n- Builder\n- Factory Method\n- Prototype\n- Singleton\n\n# 2. Structural Patterns\n\nThese Patterns have to do with the way objects are composed or put together:\n\n> **NOTE:** _Remember `A.B.C.D - F.F.P`_\n\n- Adaptor Pattern\n- Bridge Pattern\n- Composite Pattern\n- Decorator Pattern\n- Facade Pattern\n- Flyweight Pattern\n- Proxy Pattern\n\n# 3. Behavioral Patterns\n\nThese design patterns define how objects interact with one another\n\n> **NOTE**: _Remember `II.CC.O.MM.SS.T.V`_\n\n- Interpreter Pattern\n- Iterator Pattern\n- Chain of Responsibility\n- Command Pattern\n- Mediator Pattern\n- Memento Pattern\n- Strategy Pattern\n- State Pattern\n- Template Method\n- Visitor Pattern\n\n# 4. Anti-Patterns\n\nIf there are Good Design Patterns that we adher to, there are also Bad Design Patterns that we need to avoid. They define Bad solution that cause problems\n\n- **Blocking Code execution**\n- **Callback Chaos**\n- **Constructor Telescoping**: Passing too many parameters as arguments to the constructor of a class\n\n```javascript\nconst me = new Person('Pramod', true, true, false, 32, 0, 95, ['jeans']);\n```","date":1.571254834877E+12,"__v":0}
{"_id":{"$oid":"5da75780227b01001621a8fa"},"tags":[{"$oid":"5d5c323779d75f001616d184"},{"$oid":"5d5c328779d75f001616d186"},{"$oid":"5d5a437e1ddcc90016428fea"}],"groups":[{"$oid":"5d5c317e79d75f001616d183"}],"title":"Singleton Design Pattern","type":"question","question":"# Explain the Singleton Design Pattern. How does Node JS ship with the Singleton design pattern\n\n- [The Singleton Problem](https://www.linkedin.com/learning/node-js-design-patterns/the-singleton-problem)\n- [The Singleton Pattern](https://www.linkedin.com/learning/node-js-design-patterns/the-singletons-pattern)","answer":"Intent: Ensure a class has only one instance, and provide a global point of access to it\n\nTo Create a Singleton instance in NodeJS, you wrap your class in another class.\n\nConsider the following class to be wrapped in Singleton class:\n\n```javascript\nclass Logger {\n\n    constructor() {\n        this.logs = [];\n    }\n\n    get count() {\n        return this.logs.length;\n    }\n\n    log(message) {\n        const timestamp = new Date().toISOString();\n        this.logs.push({ message, timestamp });\n        console.log(`${timestamp} - ${message}`);\n    }\n\n}\n```\n\nOur **Singleton** class:\n\n```javascript\nimport { Logger } from './logger';\n\nclass Singleton {\n constructor() {\n  if (!Singleton.instance){\n    Singleton.instance = new Logger;\n  }\n }\n\n getInstance() {\n  return Singleton.instance;\n }\n}\n\nmodule.exports = Singleton;\n```\n---\n\n`NOTE:` **Did you know?** Node JS module based approach, can automatically handle exporting the same instance of the class and caching it.\n\nSo we can absolutely remove the Singleton class and implement the Logger class as follows:\n\n\n```javascript\nclass Logger {\n\n    constructor() {\n        this.logs = [];\n    }\n\n    get count() {\n        return this.logs.length;\n    }\n\n    log(message) {\n        const timestamp = new Date().toISOString();\n        this.logs.push({ message, timestamp });\n        console.log(`${timestamp} - ${message}`);\n    }\n\n}\n\nmodule.exports = new Logger(); // This is Node JS specific\n```\n","date":1.571248178695E+12,"__v":0}
{"_id":{"$oid":"5da76101b7ba0b0016bffe2a"},"tags":[{"$oid":"5d5a437e1ddcc90016428fea"},{"$oid":"5d5c328779d75f001616d186"},{"$oid":"5d5c323779d75f001616d184"}],"groups":[{"$oid":"5d5c317e79d75f001616d183"}],"title":"Prototype Pattern","type":"article","question":"Node JS (or Javascript) follows a different way to inherit object properties than the conventional `Inheritance`. It access it's parent class properties by the `proto` chain.\n\n- `_proto_`: dunder proto. used if you want to traverse an `Object's/Instance's` parent object properties\n- `prototype`: used if you want to traverse a `Class's` parent class properties.\n\n> Intent: _Specify the kinds of objects to create using prototypical instance, and create new objects by copying this prototype_\n\n> NOTE: The following method `clone()` defined, lies within the class of the Prototype Object","answer":"## Prototype Pattern Code\n\nThe below code snippet shows how to implement the `clone()` method of any class that you want to clone from:\n\n```js\nclone () {\n    const proto = Object.prototypeOf(this);\n    const cloned = Object.create(proto); // Creates a clone of all the method definitions\n \n    cloned._name = this._name ; //Copying the field ppty values\n    cloned._shoppingList = [...this._shoppingList]; //This is an easier way to create a copy of array\n    return cloned;\n}\n\n```","date":1.571250433958E+12,"__v":0}
{"_id":{"$oid":"5da76359b7ba0b0016bffe2b"},"tags":[{"$oid":"5d5c328779d75f001616d186"},{"$oid":"5d5c323779d75f001616d184"},{"$oid":"5d5a437e1ddcc90016428fea"}],"groups":[{"$oid":"5d5c317e79d75f001616d183"}],"title":"Factory Pattern","type":"article","question":"# Factory Pattern\n\n## Intent\n\n_Define an interface for creating objects, but **let subclasses decide which class to instantiate**. `Factory Method` **lets a class defer instantiation to subclasses**_\n\nBelow code snippet is the example of a `Factory Pattern`:\n```javascript\nvar Employee = require('./Employee'); //Import all the subclasses that need to be instantiated into the factory\nvar Shopper = require('./Shopper'); //Import all the subclasses that need to be instantiated into the factory\n\n//Then define a function\nconst userFactory = (name, money=0, type, employer) => {\n    if (type === 'employee') {\n        return new Employee(name, money, employer);\n    } else {\n        return new Shopper(name, money);\n    }\n}\n```\n---\n\n`NOTE:` The Factory pattern (in this case **userFactory** method) encapsulates different types of Classes into one method. By passing different arguments you get different types of instances like:\n\n- Employee\n- Shopper","answer":"# Some additional information...\n\n## Employee Class\n\n```javascript\nvar Shopper = require('./Shopper')\n\nclass Employee extends Shopper {\n\n    constructor(name, money=0, employer='') {\n        super(name, money);\n        this.employer = employer;\n        this.employed = true;\n    }\n\n    payDay(money=0) {\n        this.money += money;\n    }\n\n}\n\nmodule.exports = Employee;\n```\n\n---\n\n## Shopper Class\n\n```javascript\nvar Person = require('./Person')\n\nclass Shopper extends Person {\n\n    constructor(name, money=0) {\n        super(name);\n        this.money = money;\n        this.employed = false;\n    }\n\n}\n\nmodule.exports = Shopper;\n\n```\n\n---\n\n## Person Class\n\n```javascript\nclass Person {\n\n    constructor(name='unnamed person')  {\n        this.name = name;\n    }\n\n    toString() {\n        return JSON.stringify(this);\n    }\n\n}\n\nmodule.exports = Person;\n\n```","date":1.571251871384E+12,"__v":0}
{"_id":{"$oid":"5da772f9286fd5001687811c"},"tags":[{"$oid":"5d5c323779d75f001616d184"},{"$oid":"5d5c328779d75f001616d186"},{"$oid":"5d5a437e1ddcc90016428fea"}],"groups":[{"$oid":"5d5c317e79d75f001616d183"}],"title":"Builder Pattern","type":"article","question":"> Intent: _`Separate the construction of a complex object from its representation` so that the same construction process can create different representations_\n\n> NOTE: The Builder pattern is used to solve the following anti-pattern `CONSTRUCTOR TELESCOPING`, ie., Too many arguments in the constructor.\n\n```js\nvar charles = new Person('Charles', false, false, 0, 500, ['jeans', 'sunglasses']);\n```\n\n> Using - The Builder Pattern, the same code above can be resolved as follows\n\n```js\nvar sue = new PersonBuilder('Sue').makeEmployee().makeManager(60).build();\n```","answer":"# How to implement the Builder class\n\n- The above can be resolved using `Builder pattern`. \n- Before we dive into the `PersonBuilder` class, let's implement how it would work in our `Person` class\n- We need to first wrap the `Person` object inside another builder class - `PersonBuilder`\n\n---\n\n## Person class\n\n```js\nclass Person {\n\n    constructor(builder) { // This will be the PersonBuilder object here\n        this.name = builder.name\n        this.isEmployee = builder.isEmployee;\n        this.isManager = builder.isManager;\n        this.hours = builder.hours || 0;\n        this.money = builder.money || 0;\n        this.shoppingList = builder.shoppingList || [];\n    }\n\n    toString() {\n        return JSON.stringify(this);\n    }\n\n}\n\nmodule.exports = Person;\n```\n\n--- \n\n## Builder class\n\n> Now, the magic happens inside the `PersonBuilder` class\n\n```javascript\nvar Person = require('./Person');\n\nclass PersonBuilder {\n\n    constructor(name) {\n        this.name = name;\n    }\n\n    makeEmployee() {\n        this.isEmployee = true;\n        return this; // always keep retruning the self instance.\n    }\n\n    makeManager(hours=40) {\n        this.isManager = true;\n        this.hours = hours;\n        return this;\n    }\n\n    makePartTime(hours=20) {\n        this.hours = hours;\n        return this;\n    }\n\n    withMoney(money) {\n        this.money = money;\n        return this;\n    }\n\n    withList(list=[]) {\n        this.shoppingList = list;\n        return this;\n    }\n\n    //It's during the build method that we pass the instance of Personbuilder to Person class\n    build() {\n        return new Person(this);\n    }\n\n}\n```","date":1.571255033799E+12,"__v":0}
{"_id":{"$oid":"5da77609286fd5001687811d"},"tags":[{"$oid":"5d5a437e1ddcc90016428fea"},{"$oid":"5d5c328779d75f001616d186"},{"$oid":"5d5c325179d75f001616d185"}],"groups":[{"$oid":"5d5c317e79d75f001616d183"}],"title":"Adapter Pattern","type":"article","question":"Adapter Classes, `make incompatible classes, compatible` under different environments.\n\n> Intent: _Convert the interface of a class into another, which clients expect. Adapter lets classes work together that couldn't otherwise because of incompatible interfaces._\n\n## Pain Point\n\nFor example, Let's consider the `localStorage` class. Our browser has this class built in every browsers - Chrome, Firefox, Edge..etc., But if we move to Node JS, then our code containing `localStorage` fails.\n\n## Solution\n\nSo using the Adapter Pattern to work in a Node JS environment. We know that the `localStorage` class has the following methods:\n\n- **length()**: Get the length of the localStorage instance\n- **getItem(key)**: Get a value from localStorage\n- **setItem(key, value)**: Set a value in localStorage\n- **clear()**: Clear the localStorage","answer":"## Example of LocalStorage library to work in Node JS Environment\n\n**LocalStorage.js**\n\n```js\nvar { writeFile, existsSync, readFileSync, unlink } = require('fs');\n\nclass LocalStorage {\n\n    constructor() {\n        if (existsSync('localStorage.json')) {\n            console.log('Loading items from localStorage.json');\n            var txt = readFileSync('localStorage.json');\n            this.items = JSON.parse(txt);\n        } else {\n            this.items = {};\n        }\n    }\n\n    get length() {\n        //Object.keys will give all the Keys in an object\n        return Object.keys(this.items).length;\n    }\n\n    getItem(key) {\n        return this.items[key];\n    }\n\n    setItem(key, value) {\n        this.items[key] = value;\n        writeFile('localStorage.json', JSON.stringify(this.items), error => {\n            if (error) {\n                console.error(error);\n            }\n        })\n    }\n\n    clear() {\n        this.items = {};\n        unlink('localStorage.json', () => {\n            console.log('localStorage file removed');\n        })\n    }\n\n}\n\nmodule.exports = new LocalStorage();\n```","date":1.571255817107E+12,"__v":0}
{"_id":{"$oid":"5da78128286fd5001687811e"},"tags":[{"$oid":"5d5a437e1ddcc90016428fea"},{"$oid":"5d5c328779d75f001616d186"},{"$oid":"5d5c325179d75f001616d185"}],"groups":[{"$oid":"5d5c317e79d75f001616d183"}],"title":"Proxy Pattern","type":"article","question":"## Example\n\nA `proxy` is an object that controls access to another object. \n\nFor example, it is possible to call your top executive, the CEO of your company, directly and make an appointment with them. \n\nHowever, the CEO is very busy and in order for them to function efficiently, you would call their `assistant` and make an appointment with them instead. \nThe `assistant` controls access to the CEO. You can think of them as the proxy for the CEO. \n- They queue up appointments\n- prevent unnecessary appointments\n- and they even keep track of who met with the CEO. \n\n---\n\n## Benefit of using a Proxy\n\n- There are a number of reasons to use a proxy, but the main motivation from the design pattern has to do with expensive objects. - - Instead of working directly with an object that requires a lot of resources, you can work with a proxy, \n- A `Proxy` has the exact same interface, but it can delay instantiation of an expensive object and control requests made to that object.\n\n## Intent\n\nThe gang of four defines the intent of a proxy as:\n\n_\"Providing a surrogate or placeholder for another object to control access to it.\"_ \n\nIn addition to managing expensive objects, proxies can be used to:\n- Manage a remote resource, \n- Provide data validation of input, \n- Provide security, \n- Cache data, even log actions. \n\n---\n\n## How is it different / similar to Adapter Pattern\n\nJust like the **Adapter pattern**, a proxy must provide the same interface as the subject. The client would call the same methods on the proxy that they would call on the original object.\n\n","answer":"# Example\n\nLet's say we have a written a code to read from both a **MARKDOWN** and a **TEXT** File\n\n## FileReader.js\n\n```javascript\nvar fs = require('fs');\nvar path = require('path');\n\nvar txtFile = path.join(__dirname, 'Readme.txt');\nvar mdFile = path.join(__dirname, 'Readme.md');\n\nvar result = (error, contents) => {\n\n    if (error) {\n        console.log('\\x07');\n        console.error(error);\n        process.exit(0);\n    }\n\n    console.log('reading file...');\n    console.log(contents);\n\n}\n\nfs.readFile(txtFile, 'UTF-8', result);\nfs.readFile(mdFile, 'UTF-8', result);\n\n```\n\nLet's implement the Proxy pattern, which will provide an additional security (ie, it will now only allow **MARKDOWN** files to be read)\n\n## FS_Proxy.js\n\n```javascript\nclass FS_Proxy {\n\n    constructor(fs_subject) {\n        this.fs = fs_subject;\n    }\n\n    readFile(path, format, callback) {\n\n        if (!path.match(/.md$|.MD$/)) {\n            return callback(new Error(`Can only read Markdown files.`));\n        }\n\n        this.fs.readFile(path, format, (error, contents) => {\n\n            if (error) {\n                console.error(error);\n                return callback(error);\n            }\n\n            return callback(null, contents);\n\n        })\n\n    }\n\n}\n\nmodule.exports = FS_Proxy;\n\n```\n\nNow with the above Proxy Class, We will re-instantiate our **FileReader** class to go through the Proxy instance\n\n```javascript\nvar path = require('path');\nvar FS_Proxy = require('./FS_Proxy');\n\n// Create a FS instance via the PROXY\nvar fs = new FS_Proxy(require('fs'));\n\n// var txtFile = path.join(__dirname, 'Readme.txt');\nvar mdFile = path.join(__dirname, 'Readme.md');\n\nvar result = (error, contents) => {\n\n    if (error) {\n        console.log('\\x07');\n        console.error(error);\n        process.exit(0);\n    }\n\n    console.log('reading file...');\n    console.log(contents);\n\n}\n\n// fs.readFile(txtFile, 'UTF-8', result);\nfs.readFile(mdFile, 'UTF-8', result);\n\n```","date":1.57125868886E+12,"__v":0}
{"_id":{"$oid":"5da78ed8286fd5001687811f"},"tags":[{"$oid":"5d5a437e1ddcc90016428fea"},{"$oid":"5d5c328779d75f001616d186"},{"$oid":"5d5c325179d75f001616d185"}],"groups":[{"$oid":"5d5c317e79d75f001616d183"}],"title":"Composite Pattern","type":"article","question":"\nSometimes, we want to perform the same operation on an individual element as we would a group of elements. \n\n## Example \nConsider the grape.. \n- I could tell you to `eat` a grape, and you'd know what to do with it. - I could also tell you to `eat` a bunch grapes, and so long as your hungry for grapes, you would then `eat` them all, one by one. \n- In this example, the `eat` method can be used on a single grape, or a group of grapes. It will handle both cases accordingly.\n\n---\n\n## Main use-case of Composite Pattern\n\n- Composites work with trees, and when it comes to programming, trees are everywhere. \n- One of the most common trees that we interact with is the file system, and the file system directories can be used to group files in other directories. \n- The nodes that contain groups of other nodes are referred to as branches, and the file system, a file folder, represents a branch. If we traverse the tree, we will eventually end up with nodes that do not contain or group other nodes. \n- These nodes are referred to as leaves, and in the file system, each file would represent a leaf. \n- A composite is a leaf, or a branch, and the composite's design pattern allows you to organize your objects in a way that treats leaves and branches uniformly. \n\n---\n\n## Intent\n\nThe Gang of Four define the intent of the composite pattern as:\n \n_\"Composing objects into tree structures to represent part-whole hierarchies.\"_","answer":"","date":1.571262168588E+12,"__v":0}
{"_id":{"$oid":"5da795c1286fd50016878120"},"tags":[{"$oid":"5d5a437e1ddcc90016428fea"},{"$oid":"5d5c328779d75f001616d186"},{"$oid":"5d5c325179d75f001616d185"}],"groups":[{"$oid":"5d5c317e79d75f001616d183"}],"title":"Decorator Pattern","type":"article","question":"# The Decorator pattern\nA decorator is a design pattern that allows us to dynamically attach additional properties and methods to existing objects. \n\n## Intent\n\nThe Gang of Four defines the intent of the decorator pattern to: \n\n**_attach additional responsibilities to an object dynamically._**\n\n## Practical Example\n\n- Let's say we have an instance, `InventoryItem`. \n- We want to extend this into a `GoldenInventoryItem`\n\nThen, using Decorator Pattern, we would be able to do this:\n\n```javascript\nvar walkman = new InventoryItem(\"Walkman\", 29.99);\nvar necklace = new InventoryItem(\"Necklace\", 9.99);\n\n// Creating a decorator - GoldenInventoryItem\nvar gold_necklace = new GoldenInventoryItem(necklace);\n\n// Creating a decorator - DiamondInventoryItem\nvar diamond_gold_necklace = new DiamondInventoryItem(gold_necklace);\n```","answer":"To create a Decorator Class is simple, to the constructor of the Decorator class, we pass in the `base` class that we want to extend.\n\n```javascript\nclass InventoryItem {\n\n    constructor(name, price) {\n        this.name = name\n        this.price = price\n    }\n\n    print() {\n        console.log(`${item.name} costs ${item.price}`)\n    }\n\n}\n\nclass GoldenInventoryItem {\n\n    constructor(baseItem) {\n        this.name = `Golden ${baseItem.name}`;\n        this.price = 1000 + baseItem.price;\n    }\n\n}\n\nclass DiamondInventoryItem {\n\n  constructor(baseItem) {\n      this.name = `Diamond ${baseItem.name}`;\n      this.price = 1000 + baseItem.price;\n      this.cutsGlass = true;\n  }\n```","date":1.571263937198E+12,"__v":0}
{"_id":{"$oid":"5da79a35286fd50016878121"},"tags":[{"$oid":"5d5a437e1ddcc90016428fea"},{"$oid":"5d5c328779d75f001616d186"},{"$oid":"5d5c329a79d75f001616d187"}],"groups":[{"$oid":"5d5c317e79d75f001616d183"}],"title":"Iterator Pattern","type":"article","question":"The Iterator pattern\nThe **Iterator** is a very common design pattern. \n\nIt gives us a uniform interface for interacting with lists, collections, arrays, or any type of aggregate object. \n\n- Iterators are designed to work with collections of data. \n- They give us a clear way to access the first data record, and then they give us a way to iterate through the rest of the rows within our data set.\n\n## Intent:\n\n\"_Provide a way to access the elements of an aggregate object sequentially without exposing its underlying representation._\"\n\n## Example\n\nLet's say we want to iterate through a list of custom objects:\n\n```javascript\n// Wrapping the list of custom objects inside an Iterator class\nvar inventory = new Iterator([\n    new InventoryItem(\"Poles\", 9.99),\n    new InventoryItem(\"Skis\", 799.99),\n    new InventoryItem(\"Boots\", 799.99),\n    new InventoryItem(\"Burgers\", 5.99),\n    new InventoryItem(\"Fries\", 2.99),\n    new InventoryItem(\"Shake\", 4.99),\n    new InventoryItem(\"Jeans\", 59.99),\n    new InventoryItem(\"Shoes\", 39.99)\n]);\n\n// Calling the below functionalities\ninventory.next();\ninventory.prev();\n```","answer":"## Iterator Class\n\nThen our Iterator Wrapper class would look as follows:\n\n```javascript\nclass Iterator {\n\n    constructor(items=[]) {\n        this.index = 0;\n        this.items = items;\n    }\n\n    first() {\n        var [first] = this.items;\n        return first;\n    }\n\n    last() {\n       var [last] = [...this.items].reverse();\n       return last;\n    }\n\n    hasNext() {\n        return this.index < this.items.length - 1;\n    }\n\n    current() {\n        return this.items[this.index];\n    }\n\n    next() {\n        if (this.hasNext()) {\n           this.index += 1;\n        }\n        return this.current();\n    }\n\n    prev() {\n        if (this.index !== 0) {\n            this.index -= 1;\n        }\n        return this.current();\n    }\n\n}\n\nmodule.exports = Iterator;\n\n```","date":1.571265077826E+12,"__v":0}
{"_id":{"$oid":"5da7f12ccd3b3a0016beceda"},"tags":[{"$oid":"5d98326915b66a00168212cf"},{"$oid":"5d98320f15b66a00168212cd"}],"groups":[{"$oid":"5d9831d715b66a00168212cc"}],"title":"Managerial Interview - Culture related","type":"article","question":"# Manager interview more towards culture & team fit\n\n- Manager Interview - `Mr. Hans From Topdanmark Malaysia`\n\n### 1. _Do you prefer working alone or as part of a team? Why?_\n\nI would like to answer this question by providing scenarios where I do a bit of both.\n- Let's say its a Hackathon in a very short term duration. I prefer working alone if I have an idea that takes time to convey to the other team mates.\n- On the other hand, If it is Agile Scrum that I am working in, then I prefer working as a team where I can contribute to the architecture designs \n- As a Developer, I have found this invaluable sometimes - I would login quite early to the Office which helps me work alone and think aloud - which is required in my line of work.\n\n---\n\n### 2. _Describe the type of work environment in which you are most productive_\n\n- I can be flexible when it comes to my work environment. \n- From your website, it looks like the environment Flexible and open environment that you can contribute ideas and contribute to the architecture designs. \n- I enjoy working in an area experiencing rapid growth and I think this kind of environment is conducive to new ideas and applications.\n\n---\n\n### 3. _How do you prefer to get feedback from your manager: through formal performance reviews or daily/weekly meetings? Why ?_\n\n- I prefer both, Its always good to get Feedback over a period of 3-4 months as a Formal Performance review. \n- I also rather there be 1-1 meetings maybe on a Bi-weekly basis to focus more on My Goals and Objectives agreed for that year.\n\n---\n\n### 4. _What do you hope to achieve during your first six months here_\n\n- _Express your enthusiasm_: In Addition, to getting to know my team-mates and fully align myself to the role, I would like to scale up not just technically, but from a management perspective - Get to know the vision and how Topdanmark works.\n- _Outline your goals for every 2-3 months_: \n- **1-2 months:** I would be able to understand the vision and align myself well into my role. I would also like to get to know my client and stakeholders (POs, PMs, Scrum Masters)...\n- **3-4 months:** Start contributing, not just as a new joinee, but as integral part of the team. Start delivering\n- **5-6 months:** I hope I would be able to - pitch in for Project Enhancement, new requirements. Someone who drives team not as lead but as someone who can bring new ideas & thinking.\n\n---\n\n### 5. _What are your strengths (UX-Designer)_\n\nAs you saw on my resume and if you have seen the <span style=\"color:orange\">assignment</span> I submitted, \n- <span style=\"color:cyan;\">I'm very **customer-focused**.</span>\n- <span style=\"color:cyan;\">I do a lot of **user design**,</span>\n- <span style=\"color:cyan;\">and I do a **storyboard** in the prototypes that I have.</span>\n- <span style=\"color:cyan;\">I have a **visual board** that I use for my customers so then that way, they're able to use the mobile devices, and then in my storyboard, I take all of that on with my other projects as well.</span>\n- <span style=\"color:cyan;\">I am also a quick learner. This comes as part of my current role and the organization that I work in. </span>\n\n---\n\n### 6. _What are your weaknesses (UX-Designer)_\n\n### As per the Job description and in the Current Context:\n\n- I would admit that I am new to <span style=\"color:cyan\">Insurance Domain</span> - Although having said that, I did go through couple of courses on Finance - Insurance & Risk Management on LinkedIn\n- Technically as per the job description, I admit I need to scale in Java Web Frameworks - <span style=\"color:orange\">Spring, Spring boot</span>. But I believe I can scale up in a very short duration.\n- It's been a while since I have worked on a Java J2EE Project, I was mainly into Node JS Development for the past 5 years.\n\n---\n\n### 7. a. _What’s one thing you like about your current (or prior) job and you’d want here as well? OR_\n### b. _Why are you interested in our company? OR_\n### c. _What do you like about the Role / Position ? OR_\n### d. _Why are you interested about the Role / Position ? OR_\n### e. _What’s one thing you like about your current (or prior) job and you’d want here as well?_\n\n- I am interested in <span style=\"color:orange\">Topdanmark</span> because it would allow me to use my focus on innovative approaches to design and apply them to a growing company. \n- I have also researched that - <span style=\"color:orange\">Topdanmark</span> provides flexible and open environment that you can contribute ideas and contribute to the architecture designs.\n- In my research, it was nice to see - _<span style=\"color:cyan;\">On 4 April 2019, Topdanmark went live with an end-to-end new SaaS platform that supports the entire business of Topdanmark Liv from policy administration, holistic advisory to risk management.</span>_\n- It's a great opportunity to not only build my career, but to also help organizations maximize their brand. \n\n---\n\n### a. _What would make you quit a job in the first month ? OR_\n### b. _Why did you leave your previous company ?_\n\n- My current company is great in that it allowed me to grow my technical skills and honed me to focus on my career. \n- Also the majority of my Career experience has been focused in the `HealthCare Sector`.\n- I am now at a stage where I would like to explore the diverse culture that an organization can bring and I believe this job description fits perfectly.\n\n_Also to add:_\n\n- I am interested in <span style=\"color:orange\">Topdanmark</span> because it would allow me to use my focus on innovative approaches to design and apply them to a growing company. \n- In my research, it was nice to see - _<span style=\"color:cyan;\">On 4 April 2019, Topdanmark went live with an end-to-end new SaaS platform that supports the entire business of Topdanmark Liv from policy administration, holistic advisory to risk management.</span>_\n- It's a great opportunity to not only build my career, but to also help organizations maximize their brand. \n\n---\n\n### a. _What would you say or do to motivate your team during a challenging project_ OR\n### b. _Tell me how you handled a difficult situation_ OR\n\n- My current company decided to go with a New Technology that was new to me (C# .NET) and had a tight deadline.\n- I let my manager know it would take extra training and I asked for support. \n- I also reached out to a team that had already converted to this technology and asked their advice for meeting the deadline. \n- With their help, I realized that the timeline was too tight and talked to my manager about extending it. \n- Although we weren't able to extend the deadline, we were able to bring on some extra help. \n- I've since learned to stay on top of departmental changes outside of my unit to anticipate new technology trends and how to better negotiate timelines. \n\n### c. _Your manager assigns you a big task right before the end of the day. How would you reply?_\n\n- First, I would like to gain perspective. I would like to discuss with my manager and understand his need on the high priority.\n- If its too big of a Task and can be broken down into Subtask. I would break the Task into meaningful subtask and discuss on prioritize the smaller chunks of task that need to be finished by the end of the day.\n- Sometimes, having discussed all options, it just so happen that the expectation was to complete the task as a whole. I have been in such situations, and most of the times (if not all) - I have stretched myself into completing it.\n- <span style=\"color:orange\">Last resort:</span> If I am in a position that I am totally unable to complete the entire task for the day, I would then send an email with an apology providing the reason for my not doing it. I would also communicate and ask if I could login early the next day and complete it.\n\n---\n\n### 8. _How would you change an institutional “this is how we always do it” attitude, if you felt there was a better approach_\n\n- Collaborate.\n- Gain Perspective / Understanding.\n- Negotiate as to the outcome of the desired change.\n- Voice out concerns and invite for a Healthy discussion.\n\n---\n\n\n# Conclusion\n\n- Topdanmark Culture : Flexible and open environment that you can contribute ideas and contribute to the architecture designs \n- Topdanmark always like people > social type who easily connects and bonds & also voice out his opinion and open for discussions","answer":"","date":1.571310980213E+12,"__v":0}
{"_id":{"$oid":"5da88a1f9420da0016c35b04"},"tags":[{"$oid":"5d520639aa54c34180a48139"},{"$oid":"5d6bdb962a77330016c74e2f"},{"$oid":"5d98320f15b66a00168212cd"}],"groups":[{"$oid":"5d520740aa54c34180a4813e"}],"title":"Higher Order Component - Typescript","type":"question","question":"# What are Higher Order Components\n\n- [React Official Documentation](https://reactjs.org/docs/higher-order-components.html)\n\nA higher-order component (HOC) is an advanced technique in React for reusing component logic. HOCs are not part of the React API, per se. They are a pattern that emerges from React’s compositional nature.\n\n\nHOCs, in a very simple way, are functions that take your component and return a new one. Simple as that. \n\n## So why would you use them? \n\nWhen you have components that are similar, but have slight differences, this would be an ideal case for it. \n- In large applications, Repetition patterns will happen over and over. \n- Where your components have similar structure with a few minor differences. \n- Writing each functions might not be the most effective way of approaching the situation. \n- This is where HOCs would be ideal. \n- So we can write a function to create new components where we pass the differences for each and the similarities are created with the HOC. \n\nBoom, that's component magic right there. \n\n## HOCs Do's and Dont's\n\n- Don't change the HOC once in use\n- Don't use HOCs inside React Component's render method.\n- ","answer":"# Syntax of a HOC function\n\nThe following Higher Order Component function wraps a Class Component - WrappedComponent and returns it based on the parameters. The below code is written in Typescript:\n\n- **HOC.tsx**\n\n```javascript\nimport React, { Component } from 'react';\n\nconst initialState = {\n    name: 'Manny',\n    message: 'HOCs are cool!!'\n}\n\ntype State = Readonly<typeof initialState>;\n\nconst messageHoc = (WrappedComponent: any) => {\n    class HOC extends Component<{}, State> {\n        readonly state: State = initialState;\n\n        render() {\n            return (\n                <WrappedComponent name={this.state.name} \n                message={this.state.message} />\n            )\n        }\n    }\n    return HOC;\n}\n\nexport default messageHoc;\n\n```\n\n## Usage\n\nThis is how a Higher Order Component function is called and invoked:\n\n```javascript\n    import React from 'react';\n    import messageHoc from './Hoc';\n\n    const example = (props: any): any => <p>{props.name}, {props.message}</p>;\n\n    const Message = messageHoc(example);\n\n    export default Message;\n\n```","date":1.571357356118E+12,"__v":0}
